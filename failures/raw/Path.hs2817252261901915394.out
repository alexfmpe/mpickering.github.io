{-# LANGUAGE CPP #-}
-- | This module provides type-safe access to filepath manipulations.
--
--   It is designed to be imported instead of "System.FilePath".
--   (It is intended to provide versions of functions from that
--   module which have equivalent functionality but are more
--   typesafe). "System.Path.Directory" is a companion module
--   providing a type-safe alternative to "System.Directory".
--
--   The heart of this module is the @'Path' ar fd@ abstract type which
--   represents file and directory paths. The idea is that there are
--   two phantom type parameters - the first should be 'Abs' or 'Rel',
--   and the second 'File' or 'Dir'. A number of type synonyms are
--   provided for common types:
--
--   > type AbsFile     = Path Abs File
--   > type RelFile     = Path Rel File
--   > type AbsDir      = Path Abs Dir
--   > type RelDir      = Path Rel Dir
--   >
--   > type AbsPath  fd = Path Abs fd
--   > type RelPath  fd = Path Rel fd
--   > type FilePath ar = Path ar File
--   > type DirPath  ar = Path ar Dir
--
--   The type of the 'combine' (aka '</>') function gives the idea:
--
--   > (</>) :: DirPath ar -> RelPath fd -> Path ar fd
--
--   Together this enables us to give more meaningful types to
--   a lot of the functions, and (hopefully) catch a bunch more
--   errors at compile time.
--
--   Overloaded string literals are supported, so with the @OverloadedStrings@
--   extension enabled, you can:
--
--   > f :: FilePath ar
--   > f = "tmp" </> "someFile" <.> "ext"
--
--   If you don't want to use @OverloadedStrings@, you can use the construction fns:
--
--   > f :: FilePath ar
--   > f = asDirPath "tmp" </> asFilePath "someFile" <.> "ext"
--
--   or...
--
--   > f :: FilePath ar
--   > f = asPath "tmp" </> asPath "someFile" <.> "ext"
--
--   or just...
--
--   > f :: FilePath ar
--   > f = asPath "tmp/someFile.ext"
--
--   One point to note is that whether one of these is interpreted as
--   an absolute or a relative path depends on the type at which it is
--   used:
--
--   > *System.Path> f :: AbsFile
--   > /tmp/someFile.ext
--   > *System.Path> f :: RelFile
--   > tmp/someFile.ext
--
--   You will typically want to import as follows:
--
--   > import Prelude hiding (FilePath)
--   > import System.Path
--   > import System.Path.Directory
--   > import System.Path.IO
--
--   The basic API (and properties satisfied) are heavily influenced
--   by Neil Mitchell's "System.FilePath" module.
--
--
-- Ben Moseley - (c) 2009-2010
--

#if defined(mingw32_HOST_OS) || defined(__MINGW32__)
module System.Path(module System.Path.Windows) where
import System.Path.Windows
#else
module       System.Path(module System.Path.Posix) where
import System.Path.Posix
#endif



==============
../../hackage-packages/pathtype-0.5.4/System/Path.hs
==============
lengths:(2729,2723)

==============

({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:1:1 }
 Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,20)) "{-# LANGUAGE CPP #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,70)) "-- | This module provides type-safe access to filepath manipulations." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,65)) "--   It is designed to be imported instead of \"System.FilePath\"." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,64)) "--   (It is intended to provide versions of functions from that" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,61)) "--   module which have equivalent functionality but are more" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,62)) "--   typesafe). \"System.Path.Directory\" is a companion module" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,62)) "--   providing a type-safe alternative to \"System.Directory\"." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,72)) "--   The heart of this module is the @'Path' ar fd@ abstract type which" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,69)) "--   represents file and directory paths. The idea is that there are" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,71)) "--   two phantom type parameters - the first should be 'Abs' or 'Rel'," Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,67)) "--   and the second 'File' or 'Dir'. A number of type synonyms are" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,32)) "--   provided for common types:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,40)) "--   > type AbsFile     = Path Abs File" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,40)) "--   > type RelFile     = Path Rel File" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,39)) "--   > type AbsDir      = Path Abs Dir" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,39)) "--   > type RelDir      = Path Rel Dir" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,7)) "--   >" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,38)) "--   > type AbsPath  fd = Path Abs fd" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,38)) "--   > type RelPath  fd = Path Rel fd" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,39)) "--   > type FilePath ar = Path ar File" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,38)) "--   > type DirPath  ar = Path ar Dir" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,68)) "--   The type of the 'combine' (aka '</>') function gives the idea:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,55)) "--   > (</>) :: DirPath ar -> RelPath fd -> Path ar fd" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,63)) "--   Together this enables us to give more meaningful types to" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,64)) "--   a lot of the functions, and (hopefully) catch a bunch more" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,29)) "--   errors at compile time." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,79)) "--   Overloaded string literals are supported, so with the @OverloadedStrings@" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,33)) "--   extension enabled, you can:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,42)) "--   > f = \"tmp\" </> \"someFile\" <.> \"ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,85)) "--   If you don't want to use @OverloadedStrings@, you can use the construction fns:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,63)) "--   > f = asDirPath \"tmp\" </> asFilePath \"someFile\" <.> \"ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,11)) "--   or..." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,56)) "--   > f = asPath \"tmp\" </> asPath \"someFile\" <.> \"ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,16)) "--   or just..." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,37)) "--   > f = asPath \"tmp/someFile.ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,70)) "--   One point to note is that whether one of these is interpreted as" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,71)) "--   an absolute or a relative path depends on the type at which it is" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,11)) "--   used:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,34)) "--   > *System.Path> f :: AbsFile" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,25)) "--   > /tmp/someFile.ext" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,34)) "--   > *System.Path> f :: RelFile" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > tmp/someFile.ext" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,51)) "--   You will typically want to import as follows:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,40)) "--   > import Prelude hiding (FilePath)" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,26)) "--   > import System.Path" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,36)) "--   > import System.Path.Directory" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,29)) "--   > import System.Path.IO" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,69)) "--   The basic API (and properties satisfied) are heavily influenced" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,50)) "--   by Neil Mitchell's \"System.FilePath\" module." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,31)) "-- Ben Moseley - (c) 2009-2010" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,52)) "#if defined(mingw32_HOST_OS) || defined(__MINGW32__)" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,7)) "module" Nothing),DP (1,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "System.Path" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "(" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "module" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,20)) "System.Path.Windows" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "where" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "import" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,20)) "System.Path.Windows" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnModule),DP (81,1)),((AnnComment DComment (DP (0,-6),DP (0,-6)) "" Nothing),DP (0,-6)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (3,1),DP (3,1)) "" Nothing),DP (3,1)),((G AnnEofPos),DP (5,0))])
 (HsModule 
  (Just 
   ({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:8-18 }
    Nothing{ModuleName: System.Path})) 
  (Just 
   ({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:19-44 }
    Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
    [
     ({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:20-43 }
      Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1))])
      (IEModuleContents 
       ({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:27-43 }
        Nothing{ModuleName: System.Path.Posix})))])) 
  [
   ({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:83:1-24 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/pathtype-0.5.4/System/Path.hs:83:8-24 }
      Nothing{ModuleName: System.Path.Posix}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing)))] 
  [] 
  (Nothing) 
  (Nothing)))
==============
[(AnnKey ../../hackage-packages/pathtype-0.5.4/System/Path.hs:1:1 CN "HsModule" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,20)) "{-# LANGUAGE CPP #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,70)) "-- | This module provides type-safe access to filepath manipulations." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,65)) "--   It is designed to be imported instead of \"System.FilePath\"." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,64)) "--   (It is intended to provide versions of functions from that" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,61)) "--   module which have equivalent functionality but are more" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,62)) "--   typesafe). \"System.Path.Directory\" is a companion module" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,62)) "--   providing a type-safe alternative to \"System.Directory\"." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,72)) "--   The heart of this module is the @'Path' ar fd@ abstract type which" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,69)) "--   represents file and directory paths. The idea is that there are" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,71)) "--   two phantom type parameters - the first should be 'Abs' or 'Rel'," Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,67)) "--   and the second 'File' or 'Dir'. A number of type synonyms are" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,32)) "--   provided for common types:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,40)) "--   > type AbsFile     = Path Abs File" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,40)) "--   > type RelFile     = Path Rel File" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,39)) "--   > type AbsDir      = Path Abs Dir" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,39)) "--   > type RelDir      = Path Rel Dir" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,7)) "--   >" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,38)) "--   > type AbsPath  fd = Path Abs fd" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,38)) "--   > type RelPath  fd = Path Rel fd" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,39)) "--   > type FilePath ar = Path ar File" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,38)) "--   > type DirPath  ar = Path ar Dir" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,68)) "--   The type of the 'combine' (aka '</>') function gives the idea:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,55)) "--   > (</>) :: DirPath ar -> RelPath fd -> Path ar fd" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,63)) "--   Together this enables us to give more meaningful types to" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,64)) "--   a lot of the functions, and (hopefully) catch a bunch more" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,29)) "--   errors at compile time." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,79)) "--   Overloaded string literals are supported, so with the @OverloadedStrings@" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,33)) "--   extension enabled, you can:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,42)) "--   > f = \"tmp\" </> \"someFile\" <.> \"ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,85)) "--   If you don't want to use @OverloadedStrings@, you can use the construction fns:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,63)) "--   > f = asDirPath \"tmp\" </> asFilePath \"someFile\" <.> \"ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,11)) "--   or..." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,56)) "--   > f = asPath \"tmp\" </> asPath \"someFile\" <.> \"ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,16)) "--   or just..." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > f :: FilePath ar" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,37)) "--   > f = asPath \"tmp/someFile.ext\"" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,70)) "--   One point to note is that whether one of these is interpreted as" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,71)) "--   an absolute or a relative path depends on the type at which it is" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,11)) "--   used:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,34)) "--   > *System.Path> f :: AbsFile" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,25)) "--   > /tmp/someFile.ext" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,34)) "--   > *System.Path> f :: RelFile" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "--   > tmp/someFile.ext" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,51)) "--   You will typically want to import as follows:" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,40)) "--   > import Prelude hiding (FilePath)" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,26)) "--   > import System.Path" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,36)) "--   > import System.Path.Directory" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,29)) "--   > import System.Path.IO" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,69)) "--   The basic API (and properties satisfied) are heavily influenced" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,50)) "--   by Neil Mitchell's \"System.FilePath\" module." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,31)) "-- Ben Moseley - (c) 2009-2010" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,52)) "#if defined(mingw32_HOST_OS) || defined(__MINGW32__)" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,7)) "module" Nothing),DP (1,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "System.Path" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "(" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "module" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,20)) "System.Path.Windows" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "where" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "import" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,20)) "System.Path.Windows" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnModule),DP (81,1)),((AnnComment DComment (DP (0,-6),DP (0,-6)) "" Nothing),DP (0,-6)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (3,1),DP (3,1)) "" Nothing),DP (3,1)),((G AnnEofPos),DP (5,0))])),
 (AnnKey ../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:19-44 CN "(:)" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:20-43 CN "IEModuleContents" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/pathtype-0.5.4/System/Path.hs:83:1-24 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))]))]
==============
([((../../hackage-packages/pathtype-0.5.4/System/Path.hs:1:1,
    AnnModule),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:1-6]),
  ((../../hackage-packages/pathtype-0.5.4/System/Path.hs:1:1,
    AnnWhere),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:46-50]),
  ((../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:19-44,
    AnnCloseP),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:44]),
  ((../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:19-44,
    AnnOpenP),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:19]),
  ((../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:20-43,
    AnnModule),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:82:20-25]),
  ((../../hackage-packages/pathtype-0.5.4/System/Path.hs:83:1-24,
    AnnImport),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:83:1-6]),
  ((../../hackage-packages/pathtype-0.5.4/System/Path.hs:83:1-24,
    AnnSemi),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:88:1]),
  ((<no location info>, AnnEofPos),
   [../../hackage-packages/pathtype-0.5.4/System/Path.hs:88:1])],
 [(<no location info>,
   [AnnLineComment "--",
    AnnLineComment "-- Ben Moseley - (c) 2009-2010",
    AnnLineComment "--", AnnLineComment "--",
    AnnLineComment "--   by Neil Mitchell's \"System.FilePath\" module.",
    AnnLineComment "--   The basic API (and properties satisfied) are heavily influenced",
    AnnLineComment "--", AnnLineComment "--   > import System.Path.IO",
    AnnLineComment "--   > import System.Path.Directory",
    AnnLineComment "--   > import System.Path",
    AnnLineComment "--   > import Prelude hiding (FilePath)",
    AnnLineComment "--",
    AnnLineComment "--   You will typically want to import as follows:",
    AnnLineComment "--", AnnLineComment "--   > tmp/someFile.ext",
    AnnLineComment "--   > *System.Path> f :: RelFile",
    AnnLineComment "--   > /tmp/someFile.ext",
    AnnLineComment "--   > *System.Path> f :: AbsFile",
    AnnLineComment "--", AnnLineComment "--   used:",
    AnnLineComment "--   an absolute or a relative path depends on the type at which it is",
    AnnLineComment "--   One point to note is that whether one of these is interpreted as",
    AnnLineComment "--",
    AnnLineComment "--   > f = asPath \"tmp/someFile.ext\"",
    AnnLineComment "--   > f :: FilePath ar", AnnLineComment "--",
    AnnLineComment "--   or just...", AnnLineComment "--",
    AnnLineComment "--   > f = asPath \"tmp\" </> asPath \"someFile\" <.> \"ext\"",
    AnnLineComment "--   > f :: FilePath ar", AnnLineComment "--",
    AnnLineComment "--   or...", AnnLineComment "--",
    AnnLineComment "--   > f = asDirPath \"tmp\" </> asFilePath \"someFile\" <.> \"ext\"",
    AnnLineComment "--   > f :: FilePath ar", AnnLineComment "--",
    AnnLineComment "--   If you don't want to use @OverloadedStrings@, you can use the construction fns:",
    AnnLineComment "--",
    AnnLineComment "--   > f = \"tmp\" </> \"someFile\" <.> \"ext\"",
    AnnLineComment "--   > f :: FilePath ar", AnnLineComment "--",
    AnnLineComment "--   extension enabled, you can:",
    AnnLineComment "--   Overloaded string literals are supported, so with the @OverloadedStrings@",
    AnnLineComment "--", AnnLineComment "--   errors at compile time.",
    AnnLineComment "--   a lot of the functions, and (hopefully) catch a bunch more",
    AnnLineComment "--   Together this enables us to give more meaningful types to",
    AnnLineComment "--",
    AnnLineComment "--   > (</>) :: DirPath ar -> RelPath fd -> Path ar fd",
    AnnLineComment "--",
    AnnLineComment "--   The type of the 'combine' (aka '</>') function gives the idea:",
    AnnLineComment "--",
    AnnLineComment "--   > type DirPath  ar = Path ar Dir",
    AnnLineComment "--   > type FilePath ar = Path ar File",
    AnnLineComment "--   > type RelPath  fd = Path Rel fd",
    AnnLineComment "--   > type AbsPath  fd = Path Abs fd",
    AnnLineComment "--   >",
    AnnLineComment "--   > type RelDir      = Path Rel Dir",
    AnnLineComment "--   > type AbsDir      = Path Abs Dir",
    AnnLineComment "--   > type RelFile     = Path Rel File",
    AnnLineComment "--   > type AbsFile     = Path Abs File",
    AnnLineComment "--",
    AnnLineComment "--   provided for common types:",
    AnnLineComment "--   and the second 'File' or 'Dir'. A number of type synonyms are",
    AnnLineComment "--   two phantom type parameters - the first should be 'Abs' or 'Rel',",
    AnnLineComment "--   represents file and directory paths. The idea is that there are",
    AnnLineComment "--   The heart of this module is the @'Path' ar fd@ abstract type which",
    AnnLineComment "--",
    AnnLineComment "--   providing a type-safe alternative to \"System.Directory\".",
    AnnLineComment "--   typesafe). \"System.Path.Directory\" is a companion module",
    AnnLineComment "--   module which have equivalent functionality but are more",
    AnnLineComment "--   (It is intended to provide versions of functions from that",
    AnnLineComment "--   It is designed to be imported instead of \"System.FilePath\".",
    AnnLineComment "--",
    AnnLineComment "-- | This module provides type-safe access to filepath manipulations.",
    AnnBlockComment "{-# LANGUAGE CPP #-}"])])