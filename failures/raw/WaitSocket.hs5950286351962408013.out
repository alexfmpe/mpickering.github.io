{-# LANGUAGE CPP, ForeignFunctionInterface #-}
-- | Block until a read or write operation on a socket would succeed
--
-- On most platforms this uses 'Control.Concurrent.threadWaitRead' or
-- 'Conctrol.Concurrent.threadWaitWrite', but on Windows we need to do
-- something different.
--
-- See <http://hackage.haskell.org/trac/ghc/ticket/5797>.
module Network.SSH.Client.LibSSH2.WaitSocket
  ( threadWaitRead
  , threadWaitWrite
  ) where

import Network.Socket(Socket,fdSocket)
import System.Posix.Types(Fd(Fd))

#ifdef mingw32_HOST_OS
import Control.Concurrent(forkIO,newEmptyMVar,putMVar,takeMVar)
import Control.Exception(IOException,throwIO,try)
import Control.Exception.Base(mask_)
import Foreign.C.Error(throwErrnoIfMinus1_)
import Foreign.C.Types(CInt(CInt))
import System.IO(hWaitForInput,stdin)
#else
import qualified GHC.Conc (threadWaitRead, threadWaitWrite)
#endif

threadWaitRead :: Socket -> IO ()
threadWaitRead = threadWaitRead_ . Fd . fdSocket

threadWaitWrite :: Socket -> IO ()
threadWaitWrite = threadWaitWrite_ . Fd . fdSocket

-- | Block the current thread until data is available to read on the
-- given file descriptor (GHC only).
--
-- This will throw an 'IOError' if the file descriptor was closed
-- while this thread was blocked.  To safely close a file descriptor
-- that has been used with 'threadWaitRead', use
-- 'GHC.Conc.closeFdWith'.
threadWaitRead_ :: Fd -> IO ()
threadWaitRead_ fd
#ifdef mingw32_HOST_OS
  -- We have no IO manager implementing threadWaitRead on Windows.
  -- fdReady does the right thing, but we have to call it in a
  -- separate thread, otherwise threadWaitRead won't be interruptible,
  -- and this only works with -threaded.
  | threaded  = withThread (waitFd fd 0)
  | otherwise = case fd of
      0 -> do
        -- hWaitForInput does work properly, but we can only
        -- do this for stdin since we know its FD.
        _ <- hWaitForInput stdin (-1)
        return ()
      _ ->
        error "threadWaitRead requires -threaded on Windows, or use System.IO.hWaitForInput"
#else
  =  GHC.Conc.threadWaitRead fd
#endif

-- | Block the current thread until data can be written to the
-- given file descriptor (GHC only).
-- This will throw an 'IOError' if the file descriptor was closed
-- while this thread was blocked.  To safely close a file descriptor
-- that has been used with 'threadWaitWrite', use
-- 'GHC.Conc.closeFdWith'.
threadWaitWrite_ :: Fd -> IO ()
threadWaitWrite_ fd
#ifdef mingw32_HOST_OS
  | threaded  = withThread (waitFd fd 1)
  | otherwise = error "threadWaitWrite requires -threaded on Windows"
#else
  = GHC.Conc.threadWaitWrite fd
#endif

#ifdef mingw32_HOST_OS
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded:: Bool

withThread :: IO a -> IO a
withThread io = do
  m <- newEmptyMVar
  _ <- mask_ $ forkIO $ try io >>= putMVar m
  x <- takeMVar m
  case x of
    Right a -> return a
    Left e  -> throwIO (e :: IOException)

-- The last argument can be 1 (true) because this will only be applied to
-- sockets
waitFd :: Fd -> CInt -> IO ()
waitFd fd write =
    throwErrnoIfMinus1_ "fdReady" $ fdReady (fromIntegral fd) write iNFINITE 1
  where
    iNFINITE :: CInt
    iNFINITE = 0xFFFFFFFF -- urgh

foreign import ccall safe "fdReady"
  fdReady:: CInt -- ^ fd
         -> CInt -- ^ write
         -> CInt -- ^ msecs
         -> CInt -- ^ isSock
         -> IO CInt
#endif

==============
../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs
==============
lengths:(3380,3379)

==============

({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:1:1
  }
 Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,46)) "{-# LANGUAGE CPP, ForeignFunctionInterface #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,69)) "-- | Block until a read or write operation on a socket would succeed" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,70)) "-- On most platforms this uses 'Control.Concurrent.threadWaitRead' or" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,71)) "-- 'Conctrol.Concurrent.threadWaitWrite', but on Windows we need to do" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "-- something different." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,58)) "-- See <http://hackage.haskell.org/trac/ghc/ticket/5797>." Nothing),DP (1,1)),((G AnnModule),DP (8,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,8)) "foreign" Nothing),DP (1,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "unsafe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,26)) "\"rtsSupportsBoundThreads\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,2)) "::" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,5)) "Bool" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "m" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "mask_" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) ">>=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "putMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "x" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "takeMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "x" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,4)) "->" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,8)) "throwIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (2,1),DP (2,74)) "-- The last argument can be 1 (true) because this will only be applied to" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,11)) "-- sockets" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "Fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,24)) "throwErrnoIfMinus1_" Nothing),DP (1,5)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "fdReady" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,12)) "fromIntegral" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "iNFINITE" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,8)) "where" Nothing),DP (1,3)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "0xFFFFFFFF" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "-- urgh" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "safe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,10)) "fdReady" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,2)) "::" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "-- ^ fd" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "-- ^ write" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "-- ^ msecs" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "-- ^ isSock" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((G AnnEofPos),DP (4,0))])
 (HsModule 
  (Just 
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:9:8-44
     }
    Nothing{ModuleName: Network.SSH.Client.LibSSH2.WaitSocket})) 
  (Just 
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(10,3)-(12,3)
     }
    Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (1,3))])
    [
     ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:10:5-18
       }
      Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
      (IEVar 
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:10:5-18
         }
        Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (1,3))])
        (Unqual {OccName: threadWaitRead})))),
     ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:11:5-19
       }
      Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
      (IEVar 
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:11:5-19
         }
        Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitWrite}))))])) 
  [
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:1-38
     }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:8-21
       }
      Nothing{ModuleName: Network.Socket}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:22-38
         }
        Just (Ann (DP (0,0)) (ColDelta 22) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:23-28
           }
          Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])
          (IEThingAbs 
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:23-28
             }
            Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: Socket})))),
         ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:30-37
           }
          Just (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:30-37
             }
            Just (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: fdSocket}))))]))))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:1-33
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:8-25
       }
      Nothing{ModuleName: System.Posix.Types}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:26-33
         }
        Just (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:27-32
           }
          Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
          (IEThingWith 
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:27-28
             }
            Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: Fd})) 
           [
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:30-31
              }
             Just (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: Fd}))]))]))))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1-59
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (10,1) [DComment (DP (2,1),DP (2,22)) "#ifdef mingw32_HOST_OS" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,19)) "Control.Concurrent" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,6)) "forkIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,12)) "newEmptyMVar" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,7)) "putMVar" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,8)) "takeMVar" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,18)) "Control.Exception" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,11)) "IOException" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,7)) "throwIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,3)) "try" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,23)) "Control.Exception.Base" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,5)) "mask_" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,16)) "Foreign.C.Error" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,19)) "throwErrnoIfMinus1_" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,16)) "Foreign.C.Types" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,4)) "CInt" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,4)) "CInt" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "System.IO" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,13)) "hWaitForInput" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,5)) "stdin" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,5)) "#else" Nothing] [((G AnnImport),DP (0,0)),((G AnnQualified),DP (0,1)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:18-25
       }
      Nothing{ModuleName: GHC.Conc}) 
     (Nothing) 
     (False) 
     (False) 
     (True) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:27-59
         }
        Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:28-41
           }
          Just (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:28-41
             }
            Just (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: threadWaitRead})))),
         ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:44-58
           }
          Just (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:44-58
             }
            Just (Ann (DP (0,0)) (ColDelta 44) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: threadWaitWrite}))))])))))] 
  [
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1-33
     }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (3,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1-14
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitRead}))] 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-33
        }
       Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-33
          }
         Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-24
            }
           Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Socket}))) 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:29-33
            }
           Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:29-30
              }
             Just (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:32-33
              }
             Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-14
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitRead})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-14
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitRead})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:16-48
              }
             Just (Ann (DP (0,-1)) (ColDelta 16) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-48
                }
               Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [])
               (OpApp 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-37
                  }
                 Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [])
                 (OpApp 
                  ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-32
                    }
                   Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: threadWaitRead_}))) 
                  ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:34
                    }
                   Just (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: .}))) 
                  (PlaceHolder) 
                  ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:36-37
                    }
                   Just (Ann (DP (0,1)) (ColDelta 36) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: Fd}))))) 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:39
                  }
                 Just (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: .}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:41-48
                  }
                 Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fdSocket})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1-34
     }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1-15
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitWrite}))] 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-34
        }
       Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-34
          }
         Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-25
            }
           Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Socket}))) 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:30-34
            }
           Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:30-31
              }
             Just (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:33-34
              }
             Just (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-15
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitWrite})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-15
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitWrite})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:17-50
              }
             Just (Ann (DP (0,-1)) (ColDelta 17) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-50
                }
               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])
               (OpApp 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-39
                  }
                 Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])
                 (OpApp 
                  ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-34
                    }
                   Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: threadWaitWrite_}))) 
                  ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:36
                    }
                   Just (Ann (DP (0,1)) (ColDelta 36) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: .}))) 
                  (PlaceHolder) 
                  ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:38-39
                    }
                   Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: Fd}))))) 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:41
                  }
                 Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: .}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:43-50
                  }
                 Just (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fdSocket})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1-30
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (2,1),DP (2,69)) "-- | Block the current thread until data is available to read on the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,66)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,69)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,49)) "-- that has been used with 'threadWaitRead', use" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1-15
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitRead_}))] 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-30
        }
       Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-30
          }
         Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-21
            }
           Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Fd}))) 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:26-30
            }
           Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:26-27
              }
             Just (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:29-30
              }
             Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:1-15
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitRead_})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,67)) "-- We have no IO manager implementing threadWaitRead on Windows." Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,63)) "-- fdReady does the right thing, but we have to call it in a" Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,71)) "-- separate thread, otherwise threadWaitRead won't be interruptible," Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,41)) "-- and this only works with -threaded." Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "case" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,7),DP (1,7)) "" Nothing),DP (1,7)),((AnnComment DComment (DP (0,0),DP (0,1)) "0" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,9),DP (1,61)) "-- hWaitForInput does work properly, but we can only" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,51)) "-- do this for stdin since we know its FD." Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,9)) "" Nothing),DP (1,9)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,14)) "hWaitForInput" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "stdin" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "-" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "1" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,9),DP (1,9)) "" Nothing),DP (1,9)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,7),DP (1,7)) "" Nothing),DP (1,7)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (1,9),DP (1,14)) "error" Nothing),DP (1,9)),((AnnComment DComment (DP (0,1),DP (0,79)) "\"threadWaitRead requires -threaded on Windows, or use System.IO.hWaitForInput\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (16,3))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:1-15
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitRead_})) 
            (False))) 
          [
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:17-18
             }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: fd})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:3-30
              }
             Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:5-30
                }
               Just (Ann (DP (0,2)) (ColDelta 5) DP (0,1) [DComment (DP (0,-1),DP (0,-1)) "" Nothing] [])
               (HsApp 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:5-27
                  }
                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Qual {ModuleName: GHC.Conc} {OccName: threadWaitRead}))) 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:29-30
                  }
                 Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fd})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1-31
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,63)) "-- | Block the current thread until data can be written to the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,66)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,69)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,50)) "-- that has been used with 'threadWaitWrite', use" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1-16
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitWrite_}))] 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-31
        }
       Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-31
          }
         Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-22
            }
           Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Fd}))) 
          ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:27-31
            }
           Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:27-28
              }
             Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:30-31
              }
             Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:1-16
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitWrite_})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,48)) "\"threadWaitWrite requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (5,3))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:1-16
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitWrite_})) 
            (False))) 
          [
           ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:18-19
             }
            Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: fd})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:3-31
              }
             Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:5-31
                }
               Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
               (HsApp 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:5-28
                  }
                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Qual {ModuleName: GHC.Conc} {OccName: threadWaitWrite}))) 
                ({ ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:30-31
                  }
                 Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fd})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      [])))] 
  (Nothing) 
  (Nothing)))
==============
[(AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:1:1 CN "HsModule" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,46)) "{-# LANGUAGE CPP, ForeignFunctionInterface #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,69)) "-- | Block until a read or write operation on a socket would succeed" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,70)) "-- On most platforms this uses 'Control.Concurrent.threadWaitRead' or" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,71)) "-- 'Conctrol.Concurrent.threadWaitWrite', but on Windows we need to do" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,24)) "-- something different." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,58)) "-- See <http://hackage.haskell.org/trac/ghc/ticket/5797>." Nothing),DP (1,1)),((G AnnModule),DP (8,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,8)) "foreign" Nothing),DP (1,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "unsafe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,26)) "\"rtsSupportsBoundThreads\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,2)) "::" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,5)) "Bool" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "m" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "mask_" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) ">>=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "putMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "x" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "takeMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "x" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,4)) "->" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,8)) "throwIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (2,1),DP (2,74)) "-- The last argument can be 1 (true) because this will only be applied to" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,11)) "-- sockets" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "Fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,24)) "throwErrnoIfMinus1_" Nothing),DP (1,5)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "fdReady" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,12)) "fromIntegral" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "iNFINITE" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,8)) "where" Nothing),DP (1,3)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "0xFFFFFFFF" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "-- urgh" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "safe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,10)) "fdReady" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,2)) "::" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "-- ^ fd" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "-- ^ write" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "-- ^ msecs" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "-- ^ isSock" Nothing),DP (0,1)),((AnnComment DComment (DP (1,10),DP (1,12)) "->" Nothing),DP (1,10)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((G AnnEofPos),DP (4,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(10,3)-(12,3) CN "(:)" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (1,3))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:10:5-18 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:10:5-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (1,3))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:11:5-19 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:11:5-19 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:1-38 CN "ImportDecl" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:22-38 CN "(:)" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 22) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:23-28 CN "IEThingAbs" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:23-28 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:30-37 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:30-37 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:1-33 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:26-33 CN "(:)" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:27-28 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:27-32 CN "IEThingWith" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:30-31 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1-59 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (10,1) [DComment (DP (2,1),DP (2,22)) "#ifdef mingw32_HOST_OS" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,19)) "Control.Concurrent" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,6)) "forkIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,12)) "newEmptyMVar" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,7)) "putMVar" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,8)) "takeMVar" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,18)) "Control.Exception" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,11)) "IOException" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,7)) "throwIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,3)) "try" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,23)) "Control.Exception.Base" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,5)) "mask_" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,16)) "Foreign.C.Error" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,19)) "throwErrnoIfMinus1_" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,16)) "Foreign.C.Types" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,4)) "CInt" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,4)) "CInt" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "System.IO" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,13)) "hWaitForInput" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,0),DP (0,5)) "stdin" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,5)) "#else" Nothing] [((G AnnImport),DP (0,0)),((G AnnQualified),DP (0,1)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:27-59 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:28-41 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:28-41 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:44-58 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:44-58 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 44) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1-33 CN "SigD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (3,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-33 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-33 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:29-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:29-33 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:32-33 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:16-48 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 16) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-32 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-37 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-48 CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:34 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:36-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 36) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:39 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:41-48 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1-34 CN "SigD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-25 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-34 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-34 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:30-31 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 30) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:30-34 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:33-34 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:17-50 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 17) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-34 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-39 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-50 CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:36 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 36) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:38-39 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:41 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:43-50 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1-30 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (2,1),DP (2,69)) "-- | Block the current thread until data is available to read on the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,66)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,69)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,49)) "-- that has been used with 'threadWaitRead', use" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-30 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-30 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:26-27 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:26-30 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:29-30 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,67)) "-- We have no IO manager implementing threadWaitRead on Windows." Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,63)) "-- fdReady does the right thing, but we have to call it in a" Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,71)) "-- separate thread, otherwise threadWaitRead won't be interruptible," Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,41)) "-- and this only works with -threaded." Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "case" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,7),DP (1,7)) "" Nothing),DP (1,7)),((AnnComment DComment (DP (0,0),DP (0,1)) "0" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,9),DP (1,61)) "-- hWaitForInput does work properly, but we can only" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,51)) "-- do this for stdin since we know its FD." Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,9)) "" Nothing),DP (1,9)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,14)) "hWaitForInput" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "stdin" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "-" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "1" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,9),DP (1,9)) "" Nothing),DP (1,9)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,7),DP (1,7)) "" Nothing),DP (1,7)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (1,9),DP (1,14)) "error" Nothing),DP (1,9)),((AnnComment DComment (DP (0,1),DP (0,79)) "\"threadWaitRead requires -threaded on Windows, or use System.IO.hWaitForInput\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (16,3))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:17-18 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:3-30 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:5-27 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:5-30 CN "HsApp" NotNeeded,
  (Ann (DP (0,2)) (ColDelta 5) DP (0,1) [DComment (DP (0,-1),DP (0,-1)) "" Nothing] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:29-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1-31 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,63)) "-- | Block the current thread until data can be written to the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,66)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,69)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,50)) "-- that has been used with 'threadWaitWrite', use" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-22 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-31 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-31 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:27-28 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:27-31 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:30-31 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:1-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,48)) "\"threadWaitWrite requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (5,3))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:18-19 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:3-31 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:5-28 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:5-31 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:30-31 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey <no location info> CN "EmptyLocalBinds" NotNeeded,
  (Ann (DP (-29,0)) (ColDelta 0) DP (-29,0) [] []))]
==============
([((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:1:1,
    AnnModule),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:9:1-6]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:1:1,
    AnnWhere),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:12:5-9]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(10,3)-(12,3),
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:12:3]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(10,3)-(12,3),
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:10:3]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:10:5-18,
    AnnComma),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:11:3]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:1-38,
    AnnImport),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:1-6]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:1-38,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:22-38,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:38]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:22-38,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:22]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:23-28,
    AnnComma),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:14:29]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:1-33,
    AnnImport),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:1-6]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:1-33,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:26-33,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:33]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:26-33,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:26]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:27-32,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:32]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:27-32,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:15:29]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1-59,
    AnnImport),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1-6]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1-59,
    AnnQualified),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:8-16]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:1-59,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:27-59,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:59]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:27-59,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:27]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:28-41,
    AnnComma),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:25:42]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1-33,
    AnnDcolon),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:16-17]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:1-33,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:19-33,
    AnnRarrow),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:26-27]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:32-33,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:33]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:32-33,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:28:32]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48,
    AnnEqual),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:16]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48,
    AnnFunId),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-14]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:1-48,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-37,
    AnnVal),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:34]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:18-48,
    AnnVal),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:29:39]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1-34,
    AnnDcolon),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:17-18]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:1-34,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:20-34,
    AnnRarrow),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:27-28]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:33-34,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:34]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:33-34,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:31:33]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50,
    AnnEqual),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:17]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50,
    AnnFunId),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-15]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:1-50,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-39,
    AnnVal),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:36]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:19-50,
    AnnVal),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:32:41]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1-30,
    AnnDcolon),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:17-18]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:1-30,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:20-30,
    AnnRarrow),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:23-24]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:29-30,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:30]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:29-30,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:41:29]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30),
    AnnEqual),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:58:3]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30),
    AnnFunId),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:42:1-15]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(42,1)-(58,30),
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1-31,
    AnnDcolon),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:18-19]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:1-31,
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:1]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:21-31,
    AnnRarrow),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:24-25]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:30-31,
    AnnCloseP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:31]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:30-31,
    AnnOpenP),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:67:30]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31),
    AnnEqual),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:73:3]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31),
    AnnFunId),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:68:1-16]),
  ((../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:(68,1)-(73,31),
    AnnSemi),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:77:1]),
  ((<no location info>, AnnEofPos),
   [../../hackage-packages/libssh2-0.2.0.3/src/Network/SSH/Client/LibSSH2/WaitSocket.hs:77:1])],
 [(<no location info>,
   [AnnLineComment "-- 'GHC.Conc.closeFdWith'.",
    AnnLineComment "-- that has been used with 'threadWaitWrite', use",
    AnnLineComment "-- while this thread was blocked.  To safely close a file descriptor",
    AnnLineComment "-- This will throw an 'IOError' if the file descriptor was closed",
    AnnLineComment "-- given file descriptor (GHC only).",
    AnnLineComment "-- | Block the current thread until data can be written to the",
    AnnLineComment "-- 'GHC.Conc.closeFdWith'.",
    AnnLineComment "-- that has been used with 'threadWaitRead', use",
    AnnLineComment "-- while this thread was blocked.  To safely close a file descriptor",
    AnnLineComment "-- This will throw an 'IOError' if the file descriptor was closed",
    AnnLineComment "--",
    AnnLineComment "-- given file descriptor (GHC only).",
    AnnLineComment "-- | Block the current thread until data is available to read on the",
    AnnLineComment "-- See <http://hackage.haskell.org/trac/ghc/ticket/5797>.",
    AnnLineComment "--", AnnLineComment "-- something different.",
    AnnLineComment "-- 'Conctrol.Concurrent.threadWaitWrite', but on Windows we need to do",
    AnnLineComment "-- On most platforms this uses 'Control.Concurrent.threadWaitRead' or",
    AnnLineComment "--",
    AnnLineComment "-- | Block until a read or write operation on a socket would succeed",
    AnnBlockComment "{-# LANGUAGE CPP, ForeignFunctionInterface #-}"])])