{-# LINE 1 "Haskell.hs.neat" #-}
-- Copyright 2014 Alvaro J. Genial [http://alva.ro]; see LICENSE file for more.

module Text.Neat.Output.Haskell (outputHS) where

import Text.Neat.Template
import Text.Neat.Output


instance Output File where
 output (File path (Block chunks)) = ( ++ (
  let _l = list (chunks) in
    if (not . null) _l
      then                             _l >>= \ @ (Chunk location element) -> ( ++ (

      case (element) ofText text) -> (( (location)) ++ ( (text)) ++)
    _ -> (( (chunk)) ++)) ++
    "")
      else []) ++)


instance Output Block where
 output (Block chunks) = ( ++ ( (nest $ join " ++ " $ chunks)) ++)

instance Output Chunk where
 output chunk @ (Chunk location element) = ( ++ (

    case (chunk) ofChunk _ (Define _ _)) -> (( (element)) ++)
  (Chunk _ (Text _)) -> (( (location)) ++ ( (element)) ++)
  _ -> ( ++ ( (location)) ++ ( (element)) ++)) ++
  "")


instance Output Case where
 output (Case pattern block) = (( (pattern)) ++ ++ ( (block)))

instance Output Location where
 output (Location file line) = ( ++ ( (line)) ++ ++ ( (quote $ file)) ++)



instance Output Function where
 output (Function _ name (Pattern _ pattern)) = (( (name)) ++ ( (pattern)))

instance Output Value where
 output (Value location pipeline) = ( ++ ( (join " $ " $ reverse $ pipeline)) ++)

instance Output Pattern where
 output (Pattern location pattern) = (( (location)) ++ ( (pattern)))

instance Output Element where
 output (Output value) = ( ++ ( (value)))
 output (Comment comment) = (( ('{')) ++ ++ ( (comment)) ++ ())
 output (Define function block) = (( (function)) ++ ++ ( (block)))
 output (Filter value block) = (( (value)) ++ ++ ())

 output (For (Binding pattern value) block other) = ( ++ ( (value)) ++ ++ (

  output (pattern)) ++ ++ ( (block)) ++ ++ (
  output (unless other "[]")) ++)


 output (If value block other) = ( ++ ( (value)) ++ ++ (
  output (block)) ++ ++ (
  output (unless other "[]")) ++)


 output (Switch value cases other) = ( ++ (
  output (value)) ++ ++ () ++ ( (not . zero) (other)
    then ( ++ (
    output (other)))
    else []) ++)


 output (With (Binding pattern value) block) = ( ++ (
  output (value)) ++ ++ ( (pattern)) ++ ())


 output (Text text) = (( (quote $ prune $ text)))


outputHS :: File -> String
outputHS = output

==============
../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs
==============
lengths:(2307,6677)

==============

({ Haskell.hs.neat:1:1 }
 Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,32)) "{-# LINE 1 \"Haskell.hs.neat\" #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,80)) "-- Copyright 2014 Alvaro J. Genial [http://alva.ro]; see LICENSE file for more." Nothing),DP (1,1)),((G AnnModule),DP (3,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((G AnnEofPos),DP (1,0))])
 (HsModule 
  (Just 
   ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:8-31
     }
    Nothing{ModuleName: Text.Neat.Output.Haskell})) 
  (Just 
   ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:33-42
     }
    Just (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
    [
     ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:34-41
       }
      Just (Ann (DP (0,0)) (ColDelta 34) DP (0,0) [] [])
      (IEVar 
       ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:34-41
         }
        Just (Ann (DP (0,0)) (ColDelta 34) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: outputHS}))))])) 
  [
   ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:6:1-25
     }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:6:8-25
       }
      Nothing{ModuleName: Text.Neat.Template}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:1-23
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:8-23
       }
      Nothing{ModuleName: Text.Neat.Output}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing)))] 
  [
   ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(10,1)-(16,5)
     }
    Just (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:10-20
         }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:10-20
           }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:10-15
             }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:17-20
             }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: File}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,2)-(16,5)
          }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:2-7
            }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,2)-(16,5)
              }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:2-7
                  }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:9-34
                 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:10-33
                   }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:10-13
                     }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: File})) 
                   (PrefixCon 
                    [
                     ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:15-18
                       }
                      Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: path}))),
                     ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:20-33
                       }
                      Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                      (ParPat 
                       ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:21-32
                         }
                        Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [])
                        (ConPatIn 
                         ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:21-25
                           }
                          Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])
                          (Unqual {OccName: Block})) 
                         (PrefixCon 
                          [
                           ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:27-32
                             }
                            Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (VarPat 
                             (Unqual {OccName: chunks})))])))))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,36)-(16,5)
                  }
                 Just (Ann (DP (0,-1)) (ColDelta 36) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,38)-(16,5)
                    }
                   Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:(10,3)-(16,14) }
                     Just (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:(10,3)-(16,14) }
                       Just (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:10:3-4 }
                         Just (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [((G AnnVal),DP (-1,3))])
                         (HsLit 
                          (HsString "\"\"" {FastString: ""}))) 
                        ({ Haskell.hs.neat:10:6-7 }
                         Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:(10,9)-(16,14) }
                         Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:(11,3)-(16,13) }
                           Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [((G AnnLet),DP (0,0)),((AnnList Haskell.hs.neat:11:7-24 NotNeeded),DP (0,0)),((G AnnIn),DP (0,1))])
                           (HsLet 
                            (HsValBinds 
                             (ValBindsIn {Bag(Located (HsBind RdrName)): 
                              [
                               ({ Haskell.hs.neat:11:7-24 }
                                Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                (FunBind 
                                 ({ Haskell.hs.neat:11:7-8 }
                                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                  (Unqual {OccName: _l})) 
                                 (False) 
                                 (MG 
                                  [
                                   ({ Haskell.hs.neat:11:7-24 }
                                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnEqual),DP (0,1))])
                                    (Match 
                                     (Just 
                                      ((,) 
                                       ({ Haskell.hs.neat:11:7-8 }
                                        Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                        (Unqual {OccName: _l})) 
                                       (False))) 
                                     [] 
                                     (Nothing) 
                                     (GRHSs 
                                      [
                                       ({ Haskell.hs.neat:11:10-24 }
                                        Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
                                        (GRHS 
                                         [] 
                                         ({ Haskell.hs.neat:11:12-24 }
                                          Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
                                          (HsApp 
                                           ({ Haskell.hs.neat:11:12-15 }
                                            Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (HsVar 
                                             (Unqual {OccName: list}))) 
                                           ({ Haskell.hs.neat:11:17-24 }
                                            Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                            (HsPar 
                                             ({ Haskell.hs.neat:11:18-23 }
                                              Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                              (HsVar 
                                               (Unqual {OccName: chunks})))))))))] 
                                      (EmptyLocalBinds))))] 
                                  [] 
                                  (PlaceHolder) 
                                  (FromSource)) 
                                 (WpHole) 
                                 (PlaceHolder) 
                                 []))]} 
                              [])) 
                            ({ Haskell.hs.neat:(12,5)-(16,13) }
                             Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnIf),DP (0,0)),((G AnnThen),DP (1,4)),((G AnnElse),DP (1,4))])
                             (HsIf 
                              (Just 
                               (HsLit 
                                (HsString "" {FastString: "noSyntaxExpr"}))) 
                              ({ Haskell.hs.neat:12:8-22 }
                               Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:12:8-19 }
                                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:12:9-18 }
                                   Just (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [])
                                   (OpApp 
                                    ({ Haskell.hs.neat:12:9-11 }
                                     Just (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: not}))) 
                                    ({ Haskell.hs.neat:12:13 }
                                     Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: .}))) 
                                    (PlaceHolder) 
                                    ({ Haskell.hs.neat:12:15-18 }
                                     Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: null}))))))) 
                                ({ Haskell.hs.neat:12:21-22 }
                                 Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: _l}))))) 
                              ({ Haskell.hs.neat:(11,39)-(15,7) }
                               Just (Ann (DP (-2,36)) (ColDelta 36) DP (-2,36) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:13:12-13 }
                                 Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: _l}))) 
                                ({ Haskell.hs.neat:13:15-17 }
                                 Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: >>=}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:(11,39)-(15,7) }
                                 Just (Ann (DP (-2,36)) (ColDelta 36) DP (-2,36) [] [((G AnnLam),DP (0,1)),((AnnList Haskell.hs.neat:(11,39)-(15,7) Ref "delta-1"),DP (0,0))])
                                 (HsLam 
                                  (MG 
                                   [
                                    ({ Haskell.hs.neat:(11,39)-(15,7) }
                                     Just (Ann (DP (-2,0)) (ColDelta 0) DP (-2,0) [] [((G AnnRarrow),DP (0,1))])
                                     (Match 
                                      (Nothing) 
                                      [
                                       ({ Haskell.hs.neat:11:3-34 }
                                        Just (Ann (DP (-2,-36)) (ColDelta -36) DP (-2,-36) [] [((G AnnAt),DP (0,1))])
                                        (AsPat 
                                         ({ Haskell.hs.neat:11:3-7 }
                                          Just (Ann (DP (-2,-36)) (ColDelta -36) DP (-2,-36) [] [((G AnnVal),DP (-2,-36))])
                                          (Unqual {OccName: chunk})) 
                                         ({ Haskell.hs.neat:11:11-34 }
                                          Just (Ann (DP (0,1)) (ColDelta -28) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                          (ParPat 
                                           ({ Haskell.hs.neat:11:12-33 }
                                            Just (Ann (DP (0,0)) (ColDelta -27) DP (0,0) [] [])
                                            (ConPatIn 
                                             ({ Haskell.hs.neat:11:12-16 }
                                              Just (Ann (DP (0,0)) (ColDelta -27) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                              (Unqual {OccName: Chunk})) 
                                             (PrefixCon 
                                              [
                                               ({ Haskell.hs.neat:11:18-25 }
                                                Just (Ann (DP (0,1)) (ColDelta -21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                (VarPat 
                                                 (Unqual {OccName: location}))),
                                               ({ Haskell.hs.neat:11:27-33 }
                                                Just (Ann (DP (0,1)) (ColDelta -12) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                (VarPat 
                                                 (Unqual {OccName: element})))])))))))] 
                                      (Nothing) 
                                      (GRHSs 
                                       [
                                        ({ Haskell.hs.neat:(11,39)-(15,7) }
                                         Just (Ann (DP (0,1)) (ColDelta 0) DP (0,1) [] [])
                                         (GRHS 
                                          [] 
                                          ({ Haskell.hs.neat:(11,39)-(15,7) }
                                           Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                           (HsPar 
                                            ({ Haskell.hs.neat:(11,5)-(15,6) }
                                             Just (Ann (DP (0,-35)) (ColDelta -34) DP (0,-35) [] [])
                                             (OpApp 
                                              ({ Haskell.hs.neat:(11,5)-(14,10) }
                                               Just (Ann (DP (0,-35)) (ColDelta -34) DP (0,-35) [] [])
                                               (OpApp 
                                                ({ Haskell.hs.neat:11:5-6 }
                                                 Just (Ann (DP (0,-35)) (ColDelta -34) DP (0,-35) [] [((G AnnVal),DP (0,-35))])
                                                 (HsLit 
                                                  (HsString "\"\"" {FastString: ""}))) 
                                                ({ Haskell.hs.neat:11:8-9 }
                                                 Just (Ann (DP (0,1)) (ColDelta -31) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                 (HsVar 
                                                  (Unqual {OccName: ++}))) 
                                                (PlaceHolder) 
                                                ({ Haskell.hs.neat:(11,11)-(14,10) }
                                                 Just (Ann (DP (0,1)) (ColDelta -28) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                 (HsPar 
                                                  ({ Haskell.hs.neat:(13,5)-(14,10) }
                                                   Just (Ann (DP (2,-34)) (ColDelta -34) DP (2,-34) [] [((G AnnCase),DP (0,2)),((G AnnOf),DP (0,1)),((AnnList Haskell.hs.neat:(13,5)-(14,10) Ref "delta-2"),DP (0,0))])
                                                   (HsCase 
                                                    ({ Haskell.hs.neat:13:12-20 }
                                                     Just (Ann (DP (0,1)) (ColDelta -27) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                     (HsPar 
                                                      ({ Haskell.hs.neat:13:13-19 }
                                                       Just (Ann (DP (0,0)) (ColDelta -26) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                       (HsVar 
                                                        (Unqual {OccName: element}))))) 
                                                    (MG 
                                                     [
                                                      ({ Haskell.hs.neat:13:5-20 }
                                                       Just (Ann (DP (0,-19)) (ColDelta 0) DP (0,-19) [] [])
                                                       (Match 
                                                        (Nothing) 
                                                        [
                                                         ({ Haskell.hs.neat:13:5-15 }
                                                          Just (Ann (DP (0,-19)) (ColDelta 0) DP (0,-19) [] [((G AnnOpenP),DP (0,-19)),((G AnnCloseP),DP (0,0))])
                                                          (ParPat 
                                                           ({ Haskell.hs.neat:13:6-14 }
                                                            Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])
                                                            (ConPatIn 
                                                             ({ Haskell.hs.neat:13:6-9 }
                                                              Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                              (Unqual {OccName: Text})) 
                                                             (PrefixCon 
                                                              [
                                                               ({ Haskell.hs.neat:13:11-14 }
                                                                Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                (VarPat 
                                                                 (Unqual {OccName: text})))])))))] 
                                                        (Nothing) 
                                                        (GRHSs 
                                                         [
                                                          ({ Haskell.hs.neat:13:9-20 }
                                                           Just (Ann (DP (0,-7)) (ColDelta 4) DP (0,-7) [] [((G AnnRarrow),DP (0,1))])
                                                           (GRHS 
                                                            [] 
                                                            ({ Haskell.hs.neat:13:9-20 }
                                                             Just (Ann (DP (0,-10)) (ColDelta 4) DP (0,-10) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                                             (HsPar 
                                                              ({ Haskell.hs.neat:13:7-29 }
                                                               Just (Ann (DP (0,-14)) (ColDelta 2) DP (0,-14) [] [])
                                                               (OpApp 
                                                                ({ Haskell.hs.neat:13:20-29 }
                                                                 Just (Ann (DP (0,-1)) (ColDelta 15) DP (0,-1) [] [])
                                                                 (OpApp 
                                                                  ({ Haskell.hs.neat:13:21-24 }
                                                                   Just (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                                   (HsPar 
                                                                    ({ Haskell.hs.neat:13:7-23 }
                                                                     Just (Ann (DP (0,-15)) (ColDelta 2) DP (0,-15) [] [])
                                                                     (HsApp 
                                                                      ({ Haskell.hs.neat:13:7-12 }
                                                                       Just (Ann (DP (0,-15)) (ColDelta 2) DP (0,-15) [] [((G AnnVal),DP (0,-15)),((G AnnVal),DP (0,-23))])
                                                                       (HsVar 
                                                                        (Unqual {OccName: output}))) 
                                                                      ({ Haskell.hs.neat:13:14-23 }
                                                                       Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                                       (HsPar 
                                                                        ({ Haskell.hs.neat:13:15-22 }
                                                                         Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                                         (HsVar 
                                                                          (Unqual {OccName: location}))))))))) 
                                                                  ({ Haskell.hs.neat:13:26-27 }
                                                                   Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                   (HsVar 
                                                                    (Unqual {OccName: ++}))) 
                                                                  (PlaceHolder) 
                                                                  ({ Haskell.hs.neat:13:20-29 }
                                                                   Just (Ann (DP (0,-8)) (ColDelta 15) DP (0,-8) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                                                   (HsPar 
                                                                    ({ Haskell.hs.neat:13:7-19 }
                                                                     Just (Ann (DP (0,-23)) (ColDelta 2) DP (0,-23) [] [])
                                                                     (HsApp 
                                                                      ({ Haskell.hs.neat:13:7-12 }
                                                                       Just (Ann (DP (0,-15)) (ColDelta 2) DP (0,-15) [] [((G AnnVal),DP (0,-15)),((G AnnVal),DP (0,-23))])
                                                                       (HsVar 
                                                                        (Unqual {OccName: output}))) 
                                                                      ({ Haskell.hs.neat:13:14-19 }
                                                                       Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                                       (HsPar 
                                                                        ({ Haskell.hs.neat:13:15-18 }
                                                                         Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                                         (HsVar 
                                                                          (Unqual {OccName: text}))))))))))) 
                                                                ({ Haskell.hs.neat:13:22-23 }
                                                                 Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                 (HsVar 
                                                                  (Unqual {OccName: ++}))) 
                                                                (PlaceHolder) 
                                                                ({ Haskell.hs.neat:13:7-8 }
                                                                 Just (Ann (DP (0,-17)) (ColDelta 2) DP (0,-17) [] [((G AnnVal),DP (0,-17))])
                                                                 (HsLit 
                                                                  (HsString "\"\"" {FastString: ""})))))))))] 
                                                         (EmptyLocalBinds)))),
                                                      ({ Haskell.hs.neat:14:5-10 }
                                                       Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                                                       (Match 
                                                        (Nothing) 
                                                        [
                                                         ({ Haskell.hs.neat:14:5 }
                                                          Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                          (WildPat 
                                                           (PlaceHolder)))] 
                                                        (Nothing) 
                                                        (GRHSs 
                                                         [
                                                          ({ Haskell.hs.neat:14:7-10 }
                                                           Just (Ann (DP (0,1)) (ColDelta 2) DP (0,1) [] [((G AnnRarrow),DP (0,0))])
                                                           (GRHS 
                                                            [] 
                                                            ({ Haskell.hs.neat:14:9-10 }
                                                             Just (Ann (DP (0,0)) (ColDelta 4) DP (0,0) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                                             (HsPar 
                                                              ({ Haskell.hs.neat:14:7-21 }
                                                               Just (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])
                                                               (OpApp 
                                                                ({ Haskell.hs.neat:14:11-21 }
                                                                 Just (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                                 (HsPar 
                                                                  ({ Haskell.hs.neat:14:7-20 }
                                                                   Just (Ann (DP (0,-5)) (ColDelta 2) DP (0,-5) [] [])
                                                                   (HsApp 
                                                                    ({ Haskell.hs.neat:14:7-12 }
                                                                     Just (Ann (DP (0,-5)) (ColDelta 2) DP (0,-5) [] [((G AnnVal),DP (0,-5))])
                                                                     (HsVar 
                                                                      (Unqual {OccName: output}))) 
                                                                    ({ Haskell.hs.neat:14:14-20 }
                                                                     Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                                     (HsPar 
                                                                      ({ Haskell.hs.neat:14:15-19 }
                                                                       Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                                       (HsVar 
                                                                        (Unqual {OccName: chunk}))))))))) 
                                                                ({ Haskell.hs.neat:14:23-24 }
                                                                 Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                 (HsVar 
                                                                  (Unqual {OccName: ++}))) 
                                                                (PlaceHolder) 
                                                                ({ Haskell.hs.neat:14:7-8 }
                                                                 Just (Ann (DP (0,-18)) (ColDelta 2) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                                                                 (HsLit 
                                                                  (HsString "\"\"" {FastString: ""})))))))))] 
                                                         (EmptyLocalBinds))))] 
                                                     [] 
                                                     (PlaceHolder) 
                                                     (FromSource)))))))) 
                                              ({ Haskell.hs.neat:14:12-13 }
                                               Just (Ann (DP (0,1)) (ColDelta -27) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                               (HsVar 
                                                (Unqual {OccName: ++}))) 
                                              (PlaceHolder) 
                                              ({ Haskell.hs.neat:15:5-6 }
                                               Just (Ann (DP (1,-34)) (ColDelta -34) DP (1,-34) [] [((G AnnVal),DP (0,0))])
                                               (HsLit 
                                                (HsString "\"\"" {FastString: ""})))))))))] 
                                       (EmptyLocalBinds))))] 
                                   [] 
                                   (PlaceHolder) 
                                   (FromSource)))))) 
                              ({ Haskell.hs.neat:16:12-13 }
                               Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenS),DP (0,0)),((G AnnCloseS),DP (0,0))])
                               (HsVar 
                                (Exact {Name: []}))))))))))) 
                      ({ Haskell.hs.neat:16:16-17 }
                       Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:16:3-4 }
                       Just (Ann (DP (0,-15)) (ColDelta 3) DP (0,-15) [] [((G AnnVal),DP (0,-15))])
                       (HsLit 
                        (HsString "\"\"" {FastString: ""})))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(19,1)-(20,26) }
    Just (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:19:10-21 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:19:10-21 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:19:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:19:17-21 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Block}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:20:2-26 }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:20:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:20:2-26 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:20:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:20:9-22 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:20:10-21 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:20:10-14 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Block})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:20:16-21 }
                      Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: chunks})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:20:6-26 }
                 Just (Ann (DP (0,-19)) (ColDelta 6) DP (0,-19) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:20:6-26 }
                   Just (Ann (DP (0,-19)) (ColDelta 6) DP (0,-19) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:20:3-39 }
                     Just (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:20:3-39 }
                       Just (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:20:3-5 }
                         Just (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [((G AnnVal),DP (0,-24)),((G AnnVal),DP (0,-40))])
                         (HsLit 
                          (HsString "\"(\"" {FastString: "("}))) 
                        ({ Haskell.hs.neat:20:7-8 }
                         Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:20:10-39 }
                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:20:3-38 }
                           Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:20:3-8 }
                             Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [((G AnnVal),DP (0,-8))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:20:10-38 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:20:11-37 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:20:11-28 }
                                 Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                 (OpApp 
                                  ({ Haskell.hs.neat:20:11-14 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: nest}))) 
                                  ({ Haskell.hs.neat:20:16 }
                                   Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: $}))) 
                                  (PlaceHolder) 
                                  ({ Haskell.hs.neat:20:18-28 }
                                   Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:20:18-21 }
                                     Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: join}))) 
                                    ({ Haskell.hs.neat:20:23-28 }
                                     Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (HsLit 
                                      (HsString "\" ++ \"" {FastString: " ++ "}))))))) 
                                ({ Haskell.hs.neat:20:30 }
                                 Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: $}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:20:32-37 }
                                 Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: chunks}))))))))))))) 
                      ({ Haskell.hs.neat:20:41-42 }
                       Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:20:3-5 }
                       Just (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [((G AnnVal),DP (0,-24)),((G AnnVal),DP (0,-40))])
                       (HsLit 
                        (HsString "\")\"" {FastString: ")"})))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(22,1)-(28,5) }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:22:10-21 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:22:10-21 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:22:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:22:17-21 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Chunk}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:(23,2)-(28,5) }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:23:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:(23,2)-(28,5) }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:23:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:23:9-40 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnAt),DP (0,1))])
                (AsPat 
                 ({ Haskell.hs.neat:23:9-13 }
                  Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (Unqual {OccName: chunk})) 
                 ({ Haskell.hs.neat:23:17-40 }
                  Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                  (ParPat 
                   ({ Haskell.hs.neat:23:18-39 }
                    Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [])
                    (ConPatIn 
                     ({ Haskell.hs.neat:23:18-22 }
                      Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])
                      (Unqual {OccName: Chunk})) 
                     (PrefixCon 
                      [
                       ({ Haskell.hs.neat:23:24-31 }
                        Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                        (VarPat 
                         (Unqual {OccName: location}))),
                       ({ Haskell.hs.neat:23:33-39 }
                        Just (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnVal),DP (0,0))])
                        (VarPat 
                         (Unqual {OccName: element})))])))))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:(23,42)-(28,5) }
                 Just (Ann (DP (0,-1)) (ColDelta 42) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:(23,44)-(28,5) }
                   Just (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:(23,3)-(28,4) }
                     Just (Ann (DP (0,-42)) (ColDelta 3) DP (0,-42) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:(23,3)-(27,9) }
                       Just (Ann (DP (0,-42)) (ColDelta 3) DP (0,-42) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:23:3-4 }
                         Just (Ann (DP (0,-42)) (ColDelta 3) DP (0,-42) [] [((G AnnVal),DP (0,-42))])
                         (HsLit 
                          (HsString "\"\"" {FastString: ""}))) 
                        ({ Haskell.hs.neat:23:6-7 }
                         Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:(23,9)-(27,9) }
                         Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:(25,3)-(27,8) }
                           Just (Ann (DP (2,3)) (ColDelta 3) DP (2,3) [] [((G AnnCase),DP (0,2)),((G AnnOf),DP (0,1)),((AnnList Haskell.hs.neat:(25,3)-(27,8) Ref "delta-3"),DP (0,0))])
                           (HsCase 
                            ({ Haskell.hs.neat:25:10-16 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:25:11-15 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: chunk}))))) 
                            (MG 
                             [
                              ({ Haskell.hs.neat:25:3-29 }
                               Just (Ann (DP (0,-17)) (ColDelta 0) DP (0,-17) [] [])
                               (Match 
                                (Nothing) 
                                [
                                 ({ Haskell.hs.neat:25:3-24 }
                                  Just (Ann (DP (0,-17)) (ColDelta 0) DP (0,-17) [] [((G AnnOpenP),DP (0,-17)),((G AnnCloseP),DP (0,0))])
                                  (ParPat 
                                   ({ Haskell.hs.neat:25:4-23 }
                                    Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])
                                    (ConPatIn 
                                     ({ Haskell.hs.neat:25:4-8 }
                                      Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                      (Unqual {OccName: Chunk})) 
                                     (PrefixCon 
                                      [
                                       ({ Haskell.hs.neat:25:10 }
                                        Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                        (WildPat 
                                         (PlaceHolder))),
                                       ({ Haskell.hs.neat:25:12-23 }
                                        Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                        (ParPat 
                                         ({ Haskell.hs.neat:25:13-22 }
                                          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                                          (ConPatIn 
                                           ({ Haskell.hs.neat:25:13-18 }
                                            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (Unqual {OccName: Define})) 
                                           (PrefixCon 
                                            [
                                             ({ Haskell.hs.neat:25:20 }
                                              Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                              (WildPat 
                                               (PlaceHolder))),
                                             ({ Haskell.hs.neat:25:22 }
                                              Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                              (WildPat 
                                               (PlaceHolder)))])))))])))))] 
                                (Nothing) 
                                (GRHSs 
                                 [
                                  ({ Haskell.hs.neat:25:7-29 }
                                   Just (Ann (DP (0,-18)) (ColDelta 4) DP (0,-18) [] [((G AnnRarrow),DP (0,1))])
                                   (GRHS 
                                    [] 
                                    ({ Haskell.hs.neat:25:7-29 }
                                     Just (Ann (DP (0,-21)) (ColDelta 4) DP (0,-21) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:25:5-30 }
                                       Just (Ann (DP (0,-25)) (ColDelta 2) DP (0,-25) [] [])
                                       (OpApp 
                                        ({ Haskell.hs.neat:25:21-30 }
                                         Just (Ann (DP (0,-9)) (ColDelta 18) DP (0,-9) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                         (HsPar 
                                          ({ Haskell.hs.neat:25:5-20 }
                                           Just (Ann (DP (0,-26)) (ColDelta 2) DP (0,-26) [] [])
                                           (HsApp 
                                            ({ Haskell.hs.neat:25:5-10 }
                                             Just (Ann (DP (0,-26)) (ColDelta 2) DP (0,-26) [] [((G AnnVal),DP (0,-26))])
                                             (HsVar 
                                              (Unqual {OccName: output}))) 
                                            ({ Haskell.hs.neat:25:12-20 }
                                             Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                             (HsPar 
                                              ({ Haskell.hs.neat:25:13-19 }
                                               Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                               (HsVar 
                                                (Unqual {OccName: element}))))))))) 
                                        ({ Haskell.hs.neat:25:23-24 }
                                         Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                         (HsVar 
                                          (Unqual {OccName: ++}))) 
                                        (PlaceHolder) 
                                        ({ Haskell.hs.neat:25:5-6 }
                                         Just (Ann (DP (0,-20)) (ColDelta 2) DP (0,-20) [] [((G AnnVal),DP (0,-20))])
                                         (HsLit 
                                          (HsString "\"\"" {FastString: ""})))))))))] 
                                 (EmptyLocalBinds)))),
                              ({ Haskell.hs.neat:26:3-25 }
                               Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                               (Match 
                                (Nothing) 
                                [
                                 ({ Haskell.hs.neat:26:3-20 }
                                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                  (ParPat 
                                   ({ Haskell.hs.neat:26:4-19 }
                                    Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])
                                    (ConPatIn 
                                     ({ Haskell.hs.neat:26:4-8 }
                                      Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                      (Unqual {OccName: Chunk})) 
                                     (PrefixCon 
                                      [
                                       ({ Haskell.hs.neat:26:10 }
                                        Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                        (WildPat 
                                         (PlaceHolder))),
                                       ({ Haskell.hs.neat:26:12-19 }
                                        Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                        (ParPat 
                                         ({ Haskell.hs.neat:26:13-18 }
                                          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                                          (ConPatIn 
                                           ({ Haskell.hs.neat:26:13-16 }
                                            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (Unqual {OccName: Text})) 
                                           (PrefixCon 
                                            [
                                             ({ Haskell.hs.neat:26:18 }
                                              Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                              (WildPat 
                                               (PlaceHolder)))])))))])))))] 
                                (Nothing) 
                                (GRHSs 
                                 [
                                  ({ Haskell.hs.neat:26:7-25 }
                                   Just (Ann (DP (0,-14)) (ColDelta 4) DP (0,-14) [] [((G AnnRarrow),DP (0,1))])
                                   (GRHS 
                                    [] 
                                    ({ Haskell.hs.neat:26:7-25 }
                                     Just (Ann (DP (0,-17)) (ColDelta 4) DP (0,-17) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:26:5-27 }
                                       Just (Ann (DP (0,-21)) (ColDelta 2) DP (0,-21) [] [])
                                       (OpApp 
                                        ({ Haskell.hs.neat:26:21-27 }
                                         Just (Ann (DP (0,-5)) (ColDelta 18) DP (0,-5) [] [])
                                         (OpApp 
                                          ({ Haskell.hs.neat:26:22-26 }
                                           Just (Ann (DP (0,-4)) (ColDelta 19) DP (0,-4) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                           (HsPar 
                                            ({ Haskell.hs.neat:26:5-21 }
                                             Just (Ann (DP (0,-22)) (ColDelta 2) DP (0,-22) [] [])
                                             (HsApp 
                                              ({ Haskell.hs.neat:26:5-10 }
                                               Just (Ann (DP (0,-22)) (ColDelta 2) DP (0,-22) [] [((G AnnVal),DP (0,-22)),((G AnnVal),DP (0,-23))])
                                               (HsVar 
                                                (Unqual {OccName: output}))) 
                                              ({ Haskell.hs.neat:26:12-21 }
                                               Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                               (HsPar 
                                                ({ Haskell.hs.neat:26:13-20 }
                                                 Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                 (HsVar 
                                                  (Unqual {OccName: location}))))))))) 
                                          ({ Haskell.hs.neat:26:24-25 }
                                           Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                           (HsVar 
                                            (Unqual {OccName: ++}))) 
                                          (PlaceHolder) 
                                          ({ Haskell.hs.neat:26:21-27 }
                                           Just (Ann (DP (0,-5)) (ColDelta 18) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                           (HsPar 
                                            ({ Haskell.hs.neat:26:5-20 }
                                             Just (Ann (DP (0,-23)) (ColDelta 2) DP (0,-23) [] [])
                                             (HsApp 
                                              ({ Haskell.hs.neat:26:5-10 }
                                               Just (Ann (DP (0,-22)) (ColDelta 2) DP (0,-22) [] [((G AnnVal),DP (0,-22)),((G AnnVal),DP (0,-23))])
                                               (HsVar 
                                                (Unqual {OccName: output}))) 
                                              ({ Haskell.hs.neat:26:12-20 }
                                               Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                               (HsPar 
                                                ({ Haskell.hs.neat:26:13-19 }
                                                 Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                 (HsVar 
                                                  (Unqual {OccName: element}))))))))))) 
                                        ({ Haskell.hs.neat:26:23-24 }
                                         Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                         (HsVar 
                                          (Unqual {OccName: ++}))) 
                                        (PlaceHolder) 
                                        ({ Haskell.hs.neat:26:5-6 }
                                         Just (Ann (DP (0,-20)) (ColDelta 2) DP (0,-20) [] [((G AnnVal),DP (0,-20))])
                                         (HsLit 
                                          (HsString "\"\"" {FastString: ""})))))))))] 
                                 (EmptyLocalBinds)))),
                              ({ Haskell.hs.neat:27:3-8 }
                               Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                               (Match 
                                (Nothing) 
                                [
                                 ({ Haskell.hs.neat:27:3 }
                                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                  (WildPat 
                                   (PlaceHolder)))] 
                                (Nothing) 
                                (GRHSs 
                                 [
                                  ({ Haskell.hs.neat:27:5-8 }
                                   Just (Ann (DP (0,1)) (ColDelta 2) DP (0,1) [] [((G AnnRarrow),DP (0,0))])
                                   (GRHS 
                                    [] 
                                    ({ Haskell.hs.neat:27:8 }
                                     Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:27:5-27 }
                                       Just (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])
                                       (OpApp 
                                        ({ Haskell.hs.neat:27:5-27 }
                                         Just (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])
                                         (OpApp 
                                          ({ Haskell.hs.neat:27:5-22 }
                                           Just (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])
                                           (OpApp 
                                            ({ Haskell.hs.neat:27:5-7 }
                                             Just (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [((G AnnVal),DP (0,-4)),((G AnnVal),DP (0,-20))])
                                             (HsLit 
                                              (HsString "\"(\"" {FastString: "("}))) 
                                            ({ Haskell.hs.neat:27:9-10 }
                                             Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                             (HsVar 
                                              (Unqual {OccName: ++}))) 
                                            (PlaceHolder) 
                                            ({ Haskell.hs.neat:27:12-22 }
                                             Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                             (HsPar 
                                              ({ Haskell.hs.neat:27:5-21 }
                                               Just (Ann (DP (0,-8)) (ColDelta 2) DP (0,-8) [] [])
                                               (HsApp 
                                                ({ Haskell.hs.neat:27:5-10 }
                                                 Just (Ann (DP (0,-8)) (ColDelta 2) DP (0,-8) [] [((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-23))])
                                                 (HsVar 
                                                  (Unqual {OccName: output}))) 
                                                ({ Haskell.hs.neat:27:12-21 }
                                                 Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                 (HsPar 
                                                  ({ Haskell.hs.neat:27:13-20 }
                                                   Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                   (HsVar 
                                                    (Unqual {OccName: location}))))))))))) 
                                          ({ Haskell.hs.neat:27:24-25 }
                                           Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                           (HsVar 
                                            (Unqual {OccName: ++}))) 
                                          (PlaceHolder) 
                                          ({ Haskell.hs.neat:27:21-27 }
                                           Just (Ann (DP (0,-5)) (ColDelta 18) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                           (HsPar 
                                            ({ Haskell.hs.neat:27:5-20 }
                                             Just (Ann (DP (0,-23)) (ColDelta 2) DP (0,-23) [] [])
                                             (HsApp 
                                              ({ Haskell.hs.neat:27:5-10 }
                                               Just (Ann (DP (0,-8)) (ColDelta 2) DP (0,-8) [] [((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-23))])
                                               (HsVar 
                                                (Unqual {OccName: output}))) 
                                              ({ Haskell.hs.neat:27:12-20 }
                                               Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                               (HsPar 
                                                ({ Haskell.hs.neat:27:13-19 }
                                                 Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                 (HsVar 
                                                  (Unqual {OccName: element}))))))))))) 
                                        ({ Haskell.hs.neat:27:23-24 }
                                         Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                         (HsVar 
                                          (Unqual {OccName: ++}))) 
                                        (PlaceHolder) 
                                        ({ Haskell.hs.neat:27:5-7 }
                                         Just (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [((G AnnVal),DP (0,-4)),((G AnnVal),DP (0,-20))])
                                         (HsLit 
                                          (HsString "\")\"" {FastString: ")"})))))))))] 
                                 (EmptyLocalBinds))))] 
                             [] 
                             (PlaceHolder) 
                             (FromSource)))))))) 
                      ({ Haskell.hs.neat:27:11-12 }
                       Just (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:28:3-4 }
                       Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [((G AnnVal),DP (0,0))])
                       (HsLit 
                        (HsString "\"\"" {FastString: ""})))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(31,1)-(32,32) }
    Just (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:31:10-20 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:31:10-20 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:31:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:31:17-20 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Case}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:32:2-32 }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:32:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:32:2-32 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:32:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:32:9-28 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:32:10-27 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:32:10-13 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Case})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:32:15-21 }
                      Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: pattern}))),
                     ({ Haskell.hs.neat:32:23-27 }
                      Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: block})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:32:18-32 }
                 Just (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:32:18-32 }
                   Just (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:32:3-33 }
                     Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:32:3-33 }
                       Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:32:19-33 }
                         Just (Ann (DP (0,-14)) (ColDelta 19) DP (0,-14) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:32:3-18 }
                           Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:32:3-8 }
                             Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [((G AnnVal),DP (0,-31)),((G AnnVal),DP (0,-11))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:32:10-18 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:32:11-17 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: pattern}))))))))) 
                        ({ Haskell.hs.neat:32:21-22 }
                         Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:32:3-8 }
                         Just (Ann (DP (0,-20)) (ColDelta 3) DP (0,-20) [] [((G AnnVal),DP (0,-20))])
                         (HsLit 
                          (HsString "\" -> \"" {FastString: " -> "}))))) 
                      ({ Haskell.hs.neat:32:10-11 }
                       Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:32:13-17 }
                       Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:32:3-16 }
                         Just (Ann (DP (0,-11)) (ColDelta 3) DP (0,-11) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:32:3-8 }
                           Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [((G AnnVal),DP (0,-31)),((G AnnVal),DP (0,-11))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:32:10-16 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:32:11-15 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: block})))))))))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(34,1)-(35,32) }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:34:10-24 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:34:10-24 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:34:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:34:17-24 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Location}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:35:2-32 }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:35:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:35:2-32 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:35:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:35:9-28 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:35:10-27 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:35:10-17 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Location})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:35:19-22 }
                      Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: file}))),
                     ({ Haskell.hs.neat:35:24-27 }
                      Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: line})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:35:11-32 }
                 Just (Ann (DP (0,-20)) (ColDelta 11) DP (0,-20) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:35:11-32 }
                   Just (Ann (DP (0,-20)) (ColDelta 11) DP (0,-20) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:35:3-24 }
                     Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:35:3-24 }
                       Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:35:3-18 }
                         Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                         (OpApp 
                          ({ Haskell.hs.neat:35:3-18 }
                           Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:35:3-13 }
                             Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [((G AnnVal),DP (0,-30))])
                             (HsLit 
                              (HsString "\"{-# LINE \"" {FastString: "{-# LINE "}))) 
                            ({ Haskell.hs.neat:35:15-16 }
                             Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: ++}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:35:16-18 }
                             Just (Ann (DP (0,-1)) (ColDelta 16) DP (0,-1) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:35:3-15 }
                               Just (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:35:3-8 }
                                 Just (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [((G AnnVal),DP (0,-16)),((G AnnVal),DP (0,-8))])
                                 (HsVar 
                                  (Unqual {OccName: output}))) 
                                ({ Haskell.hs.neat:35:10-15 }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:35:11-14 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: line}))))))))))) 
                          ({ Haskell.hs.neat:35:18-19 }
                           Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: ++}))) 
                          (PlaceHolder) 
                          ({ Haskell.hs.neat:35:3-5 }
                           Just (Ann (DP (0,-17)) (ColDelta 3) DP (0,-17) [] [((G AnnVal),DP (0,-17))])
                           (HsLit 
                            (HsString "\" \"" {FastString: " "}))))) 
                        ({ Haskell.hs.neat:35:7-8 }
                         Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:35:10-24 }
                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:35:3-23 }
                           Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:35:3-8 }
                             Just (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [((G AnnVal),DP (0,-16)),((G AnnVal),DP (0,-8))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:35:10-23 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:35:11-22 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:35:11-15 }
                                 Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: quote}))) 
                                ({ Haskell.hs.neat:35:17 }
                                 Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: $}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:35:19-22 }
                                 Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: file}))))))))))))) 
                      ({ Haskell.hs.neat:35:26-27 }
                       Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:35:3-10 }
                       Just (Ann (DP (0,-25)) (ColDelta 3) DP (0,-25) [] [((G AnnVal),DP (0,-25))])
                       (HsLit 
                        (HsString "\" #-}\\n\"" {FastString: " #-}\n"})))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(39,1)-(40,49) }
    Just (Ann (DP (4,1)) (ColDelta 1) DP (4,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:39:10-24 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:39:10-24 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:39:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:39:17-24 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Function}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:40:2-49 }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:40:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:40:2-49 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:40:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:40:9-45 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:40:10-44 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:40:10-17 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Function})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:40:19 }
                      Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (WildPat 
                       (PlaceHolder))),
                     ({ Haskell.hs.neat:40:21-24 }
                      Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: name}))),
                     ({ Haskell.hs.neat:40:26-44 }
                      Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                      (ParPat 
                       ({ Haskell.hs.neat:40:27-43 }
                        Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [])
                        (ConPatIn 
                         ({ Haskell.hs.neat:40:27-33 }
                          Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])
                          (Unqual {OccName: Pattern})) 
                         (PrefixCon 
                          [
                           ({ Haskell.hs.neat:40:35 }
                            Just (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (WildPat 
                             (PlaceHolder))),
                           ({ Haskell.hs.neat:40:37-43 }
                            Just (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (VarPat 
                             (Unqual {OccName: pattern})))])))))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:40:20-49 }
                 Just (Ann (DP (0,-28)) (ColDelta 20) DP (0,-28) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:40:20-49 }
                   Just (Ann (DP (0,-28)) (ColDelta 20) DP (0,-28) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:40:16-50 }
                     Just (Ann (DP (0,-34)) (ColDelta 16) DP (0,-34) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:40:16-50 }
                       Just (Ann (DP (0,-34)) (ColDelta 16) DP (0,-34) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:40:3-15 }
                         Just (Ann (DP (0,-48)) (ColDelta 3) DP (0,-48) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:40:3-8 }
                           Just (Ann (DP (0,-48)) (ColDelta 3) DP (0,-48) [] [((G AnnVal),DP (0,-48)),((G AnnVal),DP (0,-19))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:40:10-15 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:40:11-14 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: name}))))))))) 
                      ({ Haskell.hs.neat:40:18-19 }
                       Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:40:19-21 }
                       Just (Ann (DP (0,-1)) (ColDelta 19) DP (0,-1) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:40:3-18 }
                         Just (Ann (DP (0,-19)) (ColDelta 3) DP (0,-19) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:40:3-8 }
                           Just (Ann (DP (0,-48)) (ColDelta 3) DP (0,-48) [] [((G AnnVal),DP (0,-48)),((G AnnVal),DP (0,-19))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:40:10-18 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:40:11-17 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: pattern})))))))))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(42,1)-(43,37) }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:42:10-21 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:42:10-21 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:42:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:42:17-21 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Value}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:43:2-37 }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:43:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:43:2-37 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:43:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:43:9-33 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:43:10-32 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:43:10-14 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Value})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:43:16-23 }
                      Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: location}))),
                     ({ Haskell.hs.neat:43:25-32 }
                      Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: pipeline})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:43:6-37 }
                 Just (Ann (DP (0,-30)) (ColDelta 6) DP (0,-30) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:43:6-37 }
                   Just (Ann (DP (0,-30)) (ColDelta 6) DP (0,-30) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:43:3-43 }
                     Just (Ann (DP (0,-35)) (ColDelta 3) DP (0,-35) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:43:3-43 }
                       Just (Ann (DP (0,-35)) (ColDelta 3) DP (0,-35) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:43:3-5 }
                         Just (Ann (DP (0,-35)) (ColDelta 3) DP (0,-35) [] [((G AnnVal),DP (0,-35)),((G AnnVal),DP (0,-44))])
                         (HsLit 
                          (HsString "\"(\"" {FastString: "("}))) 
                        ({ Haskell.hs.neat:43:7-8 }
                         Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:43:10-43 }
                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:43:3-42 }
                           Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:43:3-8 }
                             Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [((G AnnVal),DP (0,-8))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:43:10-42 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:43:11-41 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:43:11-30 }
                                 Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                 (OpApp 
                                  ({ Haskell.hs.neat:43:11-20 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:43:11-14 }
                                     Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: join}))) 
                                    ({ Haskell.hs.neat:43:16-20 }
                                     Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (HsLit 
                                      (HsString "\" $ \"" {FastString: " $ "}))))) 
                                  ({ Haskell.hs.neat:43:22 }
                                   Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: $}))) 
                                  (PlaceHolder) 
                                  ({ Haskell.hs.neat:43:24-30 }
                                   Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: reverse}))))) 
                                ({ Haskell.hs.neat:43:32 }
                                 Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: $}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:43:34-41 }
                                 Just (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: pipeline}))))))))))))) 
                      ({ Haskell.hs.neat:43:45-46 }
                       Just (Ann (DP (0,1)) (ColDelta 45) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:43:3-5 }
                       Just (Ann (DP (0,-35)) (ColDelta 3) DP (0,-35) [] [((G AnnVal),DP (0,-35)),((G AnnVal),DP (0,-44))])
                       (HsLit 
                        (HsString "\")\"" {FastString: ")"})))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(45,1)-(46,38) }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:45:10-23 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:45:10-23 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:45:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:45:17-23 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Pattern}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:46:2-38 }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:46:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:46:2-38 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:46:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:46:9-34 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:46:10-33 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:46:10-16 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Pattern})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:46:18-25 }
                      Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: location}))),
                     ({ Haskell.hs.neat:46:27-33 }
                      Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: pattern})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:46:20-38 }
                 Just (Ann (DP (0,-17)) (ColDelta 20) DP (0,-17) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:46:20-38 }
                   Just (Ann (DP (0,-17)) (ColDelta 20) DP (0,-17) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:46:19-39 }
                     Just (Ann (DP (0,-20)) (ColDelta 19) DP (0,-20) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:46:20-39 }
                       Just (Ann (DP (0,-19)) (ColDelta 20) DP (0,-19) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:46:3-19 }
                         Just (Ann (DP (0,-37)) (ColDelta 3) DP (0,-37) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:46:3-8 }
                           Just (Ann (DP (0,-37)) (ColDelta 3) DP (0,-37) [] [((G AnnVal),DP (0,-37)),((G AnnVal),DP (0,-23))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:46:10-19 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:46:11-18 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: location}))))))))) 
                      ({ Haskell.hs.neat:46:22-23 }
                       Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:46:19-25 }
                       Just (Ann (DP (0,-5)) (ColDelta 19) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:46:3-18 }
                         Just (Ann (DP (0,-23)) (ColDelta 3) DP (0,-23) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:46:3-8 }
                           Just (Ann (DP (0,-37)) (ColDelta 3) DP (0,-37) [] [((G AnnVal),DP (0,-37)),((G AnnVal),DP (0,-23))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:46:10-18 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:46:11-17 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: pattern})))))))))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:(48,1)-(74,33) }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])
    (InstD 
     (ClsInstD 
      (ClsInstDecl 
       ({ Haskell.hs.neat:48:10-23 }
        Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
        (HsForAllTy 
         (Implicit) 
         (Nothing) 
         (HsQTvs 
          [] 
          []) 
         ({ <no location info> }
          Nothing
          []) 
         ({ Haskell.hs.neat:48:10-23 }
          Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
          (HsAppTy 
           ({ Haskell.hs.neat:48:10-15 }
            Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Output}))) 
           ({ Haskell.hs.neat:48:17-23 }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (HsTyVar 
             (Unqual {OccName: Element}))))))) {Bag(Located (HsBind RdrName)): 
       [
        ({ Haskell.hs.neat:(49,2)-(74,33) }
         Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])
         (FunBind 
          ({ Haskell.hs.neat:49:2-7 }
           Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (Unqual {OccName: output})) 
          (False) 
          (MG 
           [
            ({ Haskell.hs.neat:49:2-26 }
             Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:49:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:49:9-22 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:49:10-21 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:49:10-15 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Output})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:49:17-21 }
                      Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: value})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:49:18-26 }
                 Just (Ann (DP (0,-7)) (ColDelta 18) DP (0,-7) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:49:18-26 }
                   Just (Ann (DP (0,-7)) (ColDelta 18) DP (0,-7) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:49:3-17 }
                     Just (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:49:3-11 }
                       Just (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [((G AnnVal),DP (0,-24))])
                       (HsLit 
                        (HsString "\"output \"" {FastString: "output "}))) 
                      ({ Haskell.hs.neat:49:13-14 }
                       Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:49:16-17 }
                       Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:49:3-16 }
                         Just (Ann (DP (0,-14)) (ColDelta 3) DP (0,-14) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:49:3-8 }
                           Just (Ann (DP (0,-14)) (ColDelta 3) DP (0,-14) [] [((G AnnVal),DP (0,-14))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:49:10-16 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:49:11-15 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: value})))))))))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:50:2-29 }
             Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:50:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:50:9-25 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:50:10-24 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:50:10-16 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Comment})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:50:18-24 }
                      Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: comment})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:50:16-29 }
                 Just (Ann (DP (0,-12)) (ColDelta 16) DP (0,-12) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:50:16-29 }
                   Just (Ann (DP (0,-12)) (ColDelta 16) DP (0,-12) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:50:3-30 }
                     Just (Ann (DP (0,-27)) (ColDelta 3) DP (0,-27) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:50:3-30 }
                       Just (Ann (DP (0,-27)) (ColDelta 3) DP (0,-27) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:50:3-30 }
                         Just (Ann (DP (0,-27)) (ColDelta 3) DP (0,-27) [] [])
                         (OpApp 
                          ({ Haskell.hs.neat:50:3-30 }
                           Just (Ann (DP (0,-27)) (ColDelta 3) DP (0,-27) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:50:15-30 }
                             Just (Ann (DP (0,-15)) (ColDelta 15) DP (0,-15) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:50:3-14 }
                               Just (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:50:3-8 }
                                 Just (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [((G AnnVal),DP (0,-28)),((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-8))])
                                 (HsVar 
                                  (Unqual {OccName: output}))) 
                                ({ Haskell.hs.neat:50:10-14 }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:50:11-13 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                                   (HsLit 
                                    (HsChar "'{'" 
                                     ('{')))))))))) 
                            ({ Haskell.hs.neat:50:17-18 }
                             Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: ++}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:50:3-5 }
                             Just (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [((G AnnVal),DP (0,-16)),((G AnnVal),DP (0,-20))])
                             (HsLit 
                              (HsString "\"#\"" {FastString: "#"}))))) 
                          ({ Haskell.hs.neat:50:7-8 }
                           Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: ++}))) 
                          (PlaceHolder) 
                          ({ Haskell.hs.neat:50:10-19 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:50:3-18 }
                             Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])
                             (HsApp 
                              ({ Haskell.hs.neat:50:3-8 }
                               Just (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [((G AnnVal),DP (0,-28)),((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-8))])
                               (HsVar 
                                (Unqual {OccName: output}))) 
                              ({ Haskell.hs.neat:50:10-18 }
                               Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                               (HsPar 
                                ({ Haskell.hs.neat:50:11-17 }
                                 Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: comment}))))))))))) 
                        ({ Haskell.hs.neat:50:21-22 }
                         Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:50:3-5 }
                         Just (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [((G AnnVal),DP (0,-16)),((G AnnVal),DP (0,-20))])
                         (HsLit 
                          (HsString "\"#\"" {FastString: "#"}))))) 
                      ({ Haskell.hs.neat:50:7-8 }
                       Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:50:10-15 }
                       Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:50:3-14 }
                         Just (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:50:3-8 }
                           Just (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [((G AnnVal),DP (0,-28)),((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-8))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:50:10-14 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:50:11-13 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                             (HsLit 
                              (HsChar "'}'" 
                               ('}'))))))))))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:51:2-35 }
             Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:51:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:51:9-31 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:51:10-30 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:51:10-15 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Define})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:51:17-24 }
                      Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: function}))),
                     ({ Haskell.hs.neat:51:26-30 }
                      Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: block})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:51:18-35 }
                 Just (Ann (DP (0,-16)) (ColDelta 18) DP (0,-16) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:51:18-35 }
                   Just (Ann (DP (0,-16)) (ColDelta 18) DP (0,-16) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:51:3-36 }
                     Just (Ann (DP (0,-33)) (ColDelta 3) DP (0,-33) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:51:3-36 }
                       Just (Ann (DP (0,-33)) (ColDelta 3) DP (0,-33) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:51:20-36 }
                         Just (Ann (DP (0,-16)) (ColDelta 20) DP (0,-16) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:51:3-19 }
                           Just (Ann (DP (0,-34)) (ColDelta 3) DP (0,-34) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:51:3-8 }
                             Just (Ann (DP (0,-34)) (ColDelta 3) DP (0,-34) [] [((G AnnVal),DP (0,-34)),((G AnnVal),DP (0,-10))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:51:10-19 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:51:11-18 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: function}))))))))) 
                        ({ Haskell.hs.neat:51:22-23 }
                         Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:51:3-7 }
                         Just (Ann (DP (0,-21)) (ColDelta 3) DP (0,-21) [] [((G AnnVal),DP (0,-21))])
                         (HsLit 
                          (HsString "\" = \"" {FastString: " = "}))))) 
                      ({ Haskell.hs.neat:51:9-10 }
                       Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:51:12-17 }
                       Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:51:3-16 }
                         Just (Ann (DP (0,-10)) (ColDelta 3) DP (0,-10) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:51:3-8 }
                           Just (Ann (DP (0,-34)) (ColDelta 3) DP (0,-34) [] [((G AnnVal),DP (0,-34)),((G AnnVal),DP (0,-10))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:51:10-16 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:51:11-15 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: block})))))))))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:52:2-32 }
             Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:52:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:52:9-28 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:52:10-27 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:52:10-15 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Filter})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:52:17-21 }
                      Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: value}))),
                     ({ Haskell.hs.neat:52:23-27 }
                      Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: block})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:52:18-32 }
                 Just (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:52:18-32 }
                   Just (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:52:3-33 }
                     Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:52:3-33 }
                       Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:52:17-33 }
                         Just (Ann (DP (0,-16)) (ColDelta 17) DP (0,-16) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:52:3-16 }
                           Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:52:3-8 }
                             Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [((G AnnVal),DP (0,-31)),((G AnnVal),DP (0,-8))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:52:10-16 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:52:11-15 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: value}))))))))) 
                        ({ Haskell.hs.neat:52:19-20 }
                         Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:52:3-5 }
                         Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                         (HsLit 
                          (HsString "\" \"" {FastString: " "}))))) 
                      ({ Haskell.hs.neat:52:7-8 }
                       Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:52:10-17 }
                       Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                       (HsPar 
                        ({ Haskell.hs.neat:52:3-16 }
                         Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [])
                         (HsApp 
                          ({ Haskell.hs.neat:52:3-8 }
                           Just (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [((G AnnVal),DP (0,-31)),((G AnnVal),DP (0,-8))])
                           (HsVar 
                            (Unqual {OccName: output}))) 
                          ({ Haskell.hs.neat:52:10-16 }
                           Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                           (HsPar 
                            ({ Haskell.hs.neat:52:11-15 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: block})))))))))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:(54,2)-(57,5) }
             Just (Ann (DP (2,2)) (ColDelta 2) DP (2,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:54:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:54:9-49 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:54:10-48 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:54:10-12 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: For})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:54:14-36 }
                      Just (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                      (ParPat 
                       ({ Haskell.hs.neat:54:15-35 }
                        Just (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [])
                        (ConPatIn 
                         ({ Haskell.hs.neat:54:15-21 }
                          Just (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [((G AnnVal),DP (0,0))])
                          (Unqual {OccName: Binding})) 
                         (PrefixCon 
                          [
                           ({ Haskell.hs.neat:54:23-29 }
                            Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (VarPat 
                             (Unqual {OccName: pattern}))),
                           ({ Haskell.hs.neat:54:31-35 }
                            Just (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (VarPat 
                             (Unqual {OccName: value})))]))))),
                     ({ Haskell.hs.neat:54:38-42 }
                      Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: block}))),
                     ({ Haskell.hs.neat:54:44-48 }
                      Just (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: other})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:(54,51)-(57,5) }
                 Just (Ann (DP (0,-1)) (ColDelta 51) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:(54,53)-(57,5) }
                   Just (Ann (DP (0,1)) (ColDelta 53) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:(54,3)-(57,29) }
                     Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:(54,3)-(57,29) }
                       Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:(54,3)-(56,19) }
                         Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                         (OpApp 
                          ({ Haskell.hs.neat:(54,3)-(56,19) }
                           Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:(54,3)-(56,19) }
                             Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                             (OpApp 
                              ({ Haskell.hs.neat:(54,3)-(56,19) }
                               Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:54:3-49 }
                                 Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                                 (OpApp 
                                  ({ Haskell.hs.neat:54:3-23 }
                                   Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])
                                   (OpApp 
                                    ({ Haskell.hs.neat:54:3-18 }
                                     Just (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [((G AnnVal),DP (0,-51))])
                                     (HsLit 
                                      (HsString "\"let _l = list \"" {FastString: "let _l = list "}))) 
                                    ({ Haskell.hs.neat:54:20-21 }
                                     Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: ++}))) 
                                    (PlaceHolder) 
                                    ({ Haskell.hs.neat:54:17-23 }
                                     Just (Ann (DP (0,-5)) (ColDelta 17) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:54:3-16 }
                                       Just (Ann (DP (0,-21)) (ColDelta 3) DP (0,-21) [] [])
                                       (HsApp 
                                        ({ Haskell.hs.neat:54:3-8 }
                                         Just (Ann (DP (0,-21)) (ColDelta 3) DP (0,-21) [] [((G AnnVal),DP (0,-21))])
                                         (HsVar 
                                          (Unqual {OccName: output}))) 
                                        ({ Haskell.hs.neat:54:10-16 }
                                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                         (HsPar 
                                          ({ Haskell.hs.neat:54:11-15 }
                                           Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                           (HsVar 
                                            (Unqual {OccName: value}))))))))))) 
                                  ({ Haskell.hs.neat:54:19-20 }
                                   Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: ++}))) 
                                  (PlaceHolder) 
                                  ({ Haskell.hs.neat:54:3-49 }
                                   Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                                   (HsLit 
                                    (HsString "\" in\\n  if (not . null) _l\\n    then _l >>= \\\\\"" {FastString: " in\n  if (not . null) _l\n    then _l >>= \\"}))))) 
                                ({ Haskell.hs.neat:54:51-52 }
                                 Just (Ann (DP (0,1)) (ColDelta 51) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: ++}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:(54,54)-(56,19) }
                                 Just (Ann (DP (0,1)) (ColDelta 54) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:56:3-18 }
                                   Just (Ann (DP (2,3)) (ColDelta 3) DP (2,3) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:56:3-8 }
                                     Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11))])
                                     (HsVar 
                                      (Unqual {OccName: output}))) 
                                    ({ Haskell.hs.neat:56:10-18 }
                                     Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:56:11-17 }
                                       Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                       (HsVar 
                                        (Unqual {OccName: pattern}))))))))))) 
                              ({ Haskell.hs.neat:56:21-22 }
                               Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: ++}))) 
                              (PlaceHolder) 
                              ({ Haskell.hs.neat:56:3-8 }
                               Just (Ann (DP (0,-20)) (ColDelta 3) DP (0,-20) [] [((G AnnVal),DP (0,-20))])
                               (HsLit 
                                (HsString "\" -> \"" {FastString: " -> "}))))) 
                            ({ Haskell.hs.neat:56:10-11 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: ++}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:56:13-17 }
                             Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:56:3-16 }
                               Just (Ann (DP (0,-11)) (ColDelta 3) DP (0,-11) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:56:3-8 }
                                 Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11))])
                                 (HsVar 
                                  (Unqual {OccName: output}))) 
                                ({ Haskell.hs.neat:56:10-16 }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:56:11-15 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: block}))))))))))) 
                          ({ Haskell.hs.neat:56:19-20 }
                           Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: ++}))) 
                          (PlaceHolder) 
                          ({ Haskell.hs.neat:56:3-15 }
                           Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                           (HsLit 
                            (HsString "\"\\n    else \"" {FastString: "\n    else "}))))) 
                        ({ Haskell.hs.neat:56:17-18 }
                         Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:(56,20)-(57,29) }
                         Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:57:3-28 }
                           Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:57:3-8 }
                             Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:57:10-28 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:57:11-27 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:57:11-22 }
                                 Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                 (HsApp 
                                  ({ Haskell.hs.neat:57:11-16 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: unless}))) 
                                  ({ Haskell.hs.neat:57:18-22 }
                                   Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: other}))))) 
                                ({ Haskell.hs.neat:57:24-27 }
                                 Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsLit 
                                  (HsString "\"[]\"" {FastString: "[]"}))))))))))))) 
                      ({ Haskell.hs.neat:57:31-32 }
                       Just (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:57:3-4 }
                       Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [((G AnnVal),DP (0,-30))])
                       (HsLit 
                        (HsString "\"\"" {FastString: ""})))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:(60,2)-(62,5) }
             Just (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:60:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:60:9-30 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:60:10-29 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:60:10-11 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: If})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:60:13-17 }
                      Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: value}))),
                     ({ Haskell.hs.neat:60:19-23 }
                      Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: block}))),
                     ({ Haskell.hs.neat:60:25-29 }
                      Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: other})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:(60,32)-(62,5) }
                 Just (Ann (DP (0,-1)) (ColDelta 32) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:(60,34)-(62,5) }
                   Just (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:(60,3)-(62,29) }
                     Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:(60,3)-(62,29) }
                       Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:(60,3)-(61,17) }
                         Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])
                         (OpApp 
                          ({ Haskell.hs.neat:(60,3)-(61,17) }
                           Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:60:3-25 }
                             Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])
                             (OpApp 
                              ({ Haskell.hs.neat:60:3-25 }
                               Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:60:3-20 }
                                 Just (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [((G AnnVal),DP (0,-32))])
                                 (HsLit 
                                  (HsString "\"if (not . zero) \"" {FastString: "if (not . zero) "}))) 
                                ({ Haskell.hs.neat:60:22-23 }
                                 Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: ++}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:60:17-25 }
                                 Just (Ann (DP (0,-7)) (ColDelta 17) DP (0,-7) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:60:3-16 }
                                   Just (Ann (DP (0,-23)) (ColDelta 3) DP (0,-23) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:60:3-8 }
                                     Just (Ann (DP (0,-23)) (ColDelta 3) DP (0,-23) [] [((G AnnVal),DP (0,-23))])
                                     (HsVar 
                                      (Unqual {OccName: output}))) 
                                    ({ Haskell.hs.neat:60:10-16 }
                                     Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:60:11-15 }
                                       Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                       (HsVar 
                                        (Unqual {OccName: value}))))))))))) 
                              ({ Haskell.hs.neat:60:19-20 }
                               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: ++}))) 
                              (PlaceHolder) 
                              ({ Haskell.hs.neat:60:3-13 }
                               Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                               (HsLit 
                                (HsString "\"\\n  then \"" {FastString: "\n  then "}))))) 
                            ({ Haskell.hs.neat:60:15-16 }
                             Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: ++}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:(60,18)-(61,17) }
                             Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:61:3-16 }
                               Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:61:3-8 }
                                 Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: output}))) 
                                ({ Haskell.hs.neat:61:10-16 }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:61:11-15 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: block}))))))))))) 
                          ({ Haskell.hs.neat:61:19-20 }
                           Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: ++}))) 
                          (PlaceHolder) 
                          ({ Haskell.hs.neat:61:3-13 }
                           Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                           (HsLit 
                            (HsString "\"\\n  else \"" {FastString: "\n  else "}))))) 
                        ({ Haskell.hs.neat:61:15-16 }
                         Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:(61,18)-(62,29) }
                         Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:62:3-28 }
                           Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:62:3-8 }
                             Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:62:10-28 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:62:11-27 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:62:11-22 }
                                 Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                 (HsApp 
                                  ({ Haskell.hs.neat:62:11-16 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: unless}))) 
                                  ({ Haskell.hs.neat:62:18-22 }
                                   Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: other}))))) 
                                ({ Haskell.hs.neat:62:24-27 }
                                 Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsLit 
                                  (HsString "\"[]\"" {FastString: "[]"}))))))))))))) 
                      ({ Haskell.hs.neat:62:31-32 }
                       Just (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:62:3-4 }
                       Just (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [((G AnnVal),DP (0,-30))])
                       (HsLit 
                        (HsString "\"\"" {FastString: ""})))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:(65,2)-(67,5) }
             Just (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:65:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:65:9-34 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:65:10-33 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:65:10-15 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Switch})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:65:17-21 }
                      Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: value}))),
                     ({ Haskell.hs.neat:65:23-27 }
                      Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: cases}))),
                     ({ Haskell.hs.neat:65:29-33 }
                      Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: other})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:(65,36)-(67,5) }
                 Just (Ann (DP (0,-1)) (ColDelta 36) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:(65,38)-(67,5) }
                   Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:(65,3)-(68,12) }
                     Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:(65,3)-(68,12) }
                       Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:(65,3)-(66,17) }
                         Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])
                         (OpApp 
                          ({ Haskell.hs.neat:(65,3)-(66,17) }
                           Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:(65,3)-(66,17) }
                             Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])
                             (OpApp 
                              ({ Haskell.hs.neat:(65,3)-(66,17) }
                               Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:65:3-13 }
                                 Just (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [((G AnnVal),DP (0,-36))])
                                 (HsLit 
                                  (HsString "\"\\n  case \"" {FastString: "\n  case "}))) 
                                ({ Haskell.hs.neat:65:15-16 }
                                 Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: ++}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:(65,18)-(66,17) }
                                 Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:66:3-16 }
                                   Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:66:3-8 }
                                     Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11))])
                                     (HsVar 
                                      (Unqual {OccName: output}))) 
                                    ({ Haskell.hs.neat:66:10-16 }
                                     Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:66:11-15 }
                                       Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                                       (HsVar 
                                        (Unqual {OccName: value}))))))))))) 
                              ({ Haskell.hs.neat:66:19-20 }
                               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: ++}))) 
                              (PlaceHolder) 
                              ({ Haskell.hs.neat:66:3-8 }
                               Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                               (HsLit 
                                (HsString "\" of \"" {FastString: " of "}))))) 
                            ({ Haskell.hs.neat:66:10-11 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: ++}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:66:13-17 }
                             Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:66:3-16 }
                               Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:66:3-8 }
                                 Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11))])
                                 (HsVar 
                                  (Unqual {OccName: output}))) 
                                ({ Haskell.hs.neat:66:10-16 }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:66:11-15 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: cases}))))))))))) 
                          ({ Haskell.hs.neat:66:19-20 }
                           Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: ++}))) 
                          (PlaceHolder) 
                          ({ Haskell.hs.neat:66:3-5 }
                           Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                           (HsLit 
                            (HsString "\" \"" {FastString: " "}))))) 
                        ({ Haskell.hs.neat:66:7-8 }
                         Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:(66,10)-(68,12) }
                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:(66,3)-(68,11) }
                           Just (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [((G AnnIf),DP (0,-8)),((G AnnThen),DP (1,5)),((G AnnElse),DP (1,5))])
                           (HsIf 
                            (Just 
                             (HsLit 
                              (HsString "" {FastString: "noSyntaxExpr"}))) 
                            ({ Haskell.hs.neat:66:6-25 }
                             Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [])
                             (HsApp 
                              ({ Haskell.hs.neat:66:6-17 }
                               Just (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                               (HsPar 
                                ({ Haskell.hs.neat:66:7-16 }
                                 Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [])
                                 (OpApp 
                                  ({ Haskell.hs.neat:66:7-9 }
                                   Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: not}))) 
                                  ({ Haskell.hs.neat:66:11 }
                                   Just (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: .}))) 
                                  (PlaceHolder) 
                                  ({ Haskell.hs.neat:66:13-16 }
                                   Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: zero}))))))) 
                              ({ Haskell.hs.neat:66:19-25 }
                               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                               (HsPar 
                                ({ Haskell.hs.neat:66:20-24 }
                                 Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: other}))))))) 
                            ({ Haskell.hs.neat:67:10-20 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:(66,5)-(67,19) }
                               Just (Ann (DP (-1,5)) (ColDelta 5) DP (-1,5) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:66:5-13 }
                                 Just (Ann (DP (-1,5)) (ColDelta 5) DP (-1,5) [] [((G AnnVal),DP (-1,5))])
                                 (HsLit 
                                  (HsString "\"\\n_ -> \"" {FastString: "\n_ -> "}))) 
                                ({ Haskell.hs.neat:66:15-16 }
                                 Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: ++}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:(66,18)-(67,19) }
                                 Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:67:5-18 }
                                   Just (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:67:5-10 }
                                     Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: output}))) 
                                    ({ Haskell.hs.neat:67:12-18 }
                                     Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:67:13-17 }
                                       Just (Ann (DP (0,0)) (ColDelta 13) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                       (HsVar 
                                        (Unqual {OccName: other}))))))))))))) 
                            ({ Haskell.hs.neat:68:10-11 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenS),DP (0,0)),((G AnnCloseS),DP (0,0))])
                             (HsVar 
                              (Exact {Name: []}))))))))) 
                      ({ Haskell.hs.neat:68:14-15 }
                       Just (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:67:3-4 }
                       Just (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [((G AnnVal),DP (-1,3))])
                       (HsLit 
                        (HsString "\"\"" {FastString: ""})))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:(70,2)-(71,5) }
             Just (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:70:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:70:9-44 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:70:10-43 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:70:10-13 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: With})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:70:15-37 }
                      Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                      (ParPat 
                       ({ Haskell.hs.neat:70:16-36 }
                        Just (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [])
                        (ConPatIn 
                         ({ Haskell.hs.neat:70:16-22 }
                          Just (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnVal),DP (0,0))])
                          (Unqual {OccName: Binding})) 
                         (PrefixCon 
                          [
                           ({ Haskell.hs.neat:70:24-30 }
                            Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (VarPat 
                             (Unqual {OccName: pattern}))),
                           ({ Haskell.hs.neat:70:32-36 }
                            Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (VarPat 
                             (Unqual {OccName: value})))]))))),
                     ({ Haskell.hs.neat:70:39-43 }
                      Just (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: block})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:(70,46)-(71,5) }
                 Just (Ann (DP (0,-1)) (ColDelta 46) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:(70,48)-(71,5) }
                   Just (Ann (DP (0,1)) (ColDelta 48) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:(70,3)-(71,19) }
                     Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])
                     (OpApp 
                      ({ Haskell.hs.neat:(70,3)-(71,19) }
                       Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])
                       (OpApp 
                        ({ Haskell.hs.neat:(70,3)-(71,19) }
                         Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])
                         (OpApp 
                          ({ Haskell.hs.neat:(70,3)-(71,19) }
                           Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:(70,3)-(71,17) }
                             Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])
                             (OpApp 
                              ({ Haskell.hs.neat:(70,3)-(71,17) }
                               Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])
                               (OpApp 
                                ({ Haskell.hs.neat:70:3-13 }
                                 Just (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [((G AnnVal),DP (0,-46))])
                                 (HsLit 
                                  (HsString "\"\\n  case \"" {FastString: "\n  case "}))) 
                                ({ Haskell.hs.neat:70:15-16 }
                                 Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: ++}))) 
                                (PlaceHolder) 
                                ({ Haskell.hs.neat:(70,18)-(71,17) }
                                 Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:71:3-16 }
                                   Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                                   (HsApp 
                                    ({ Haskell.hs.neat:71:3-8 }
                                     Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11)),((G AnnVal),DP (0,-11))])
                                     (HsVar 
                                      (Unqual {OccName: output}))) 
                                    ({ Haskell.hs.neat:71:10-16 }
                                     Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                     (HsPar 
                                      ({ Haskell.hs.neat:71:11-15 }
                                       Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                                       (HsVar 
                                        (Unqual {OccName: value}))))))))))) 
                              ({ Haskell.hs.neat:71:19-20 }
                               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: ++}))) 
                              (PlaceHolder) 
                              ({ Haskell.hs.neat:71:3-8 }
                               Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18)),((G AnnVal),DP (0,-20))])
                               (HsLit 
                                (HsString "\" of \"" {FastString: " of "}))))) 
                            ({ Haskell.hs.neat:71:10-11 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: ++}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:71:13-19 }
                             Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:71:3-18 }
                               Just (Ann (DP (0,-11)) (ColDelta 3) DP (0,-11) [] [])
                               (HsApp 
                                ({ Haskell.hs.neat:71:3-8 }
                                 Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11)),((G AnnVal),DP (0,-11))])
                                 (HsVar 
                                  (Unqual {OccName: output}))) 
                                ({ Haskell.hs.neat:71:10-18 }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ Haskell.hs.neat:71:11-17 }
                                   Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: pattern}))))))))))) 
                          ({ Haskell.hs.neat:71:21-22 }
                           Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: ++}))) 
                          (PlaceHolder) 
                          ({ Haskell.hs.neat:71:3-8 }
                           Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18)),((G AnnVal),DP (0,-20))])
                           (HsLit 
                            (HsString "\" -> \"" {FastString: " -> "}))))) 
                        ({ Haskell.hs.neat:71:10-11 }
                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                         (HsVar 
                          (Unqual {OccName: ++}))) 
                        (PlaceHolder) 
                        ({ Haskell.hs.neat:71:13-17 }
                         Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:71:3-16 }
                           Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
                           (HsApp 
                            ({ Haskell.hs.neat:71:3-8 }
                             Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11)),((G AnnVal),DP (0,-11))])
                             (HsVar 
                              (Unqual {OccName: output}))) 
                            ({ Haskell.hs.neat:71:10-16 }
                             Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                             (HsPar 
                              ({ Haskell.hs.neat:71:11-15 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: block}))))))))))) 
                      ({ Haskell.hs.neat:71:19-20 }
                       Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])
                       (HsVar 
                        (Unqual {OccName: ++}))) 
                      (PlaceHolder) 
                      ({ Haskell.hs.neat:71:3-4 }
                       Just (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])
                       (HsLit 
                        (HsString "\"\"" {FastString: ""})))))))))] 
               (EmptyLocalBinds)))),
            ({ Haskell.hs.neat:74:2-33 }
             Just (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])
             (Match 
              (Just 
               ((,) 
                ({ Haskell.hs.neat:74:2-7 }
                 Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (Unqual {OccName: output})) 
                (False))) 
              [
               ({ Haskell.hs.neat:74:9-19 }
                Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                (ParPat 
                 ({ Haskell.hs.neat:74:10-18 }
                  Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])
                  (ConPatIn 
                   ({ Haskell.hs.neat:74:10-13 }
                    Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (Unqual {OccName: Text})) 
                   (PrefixCon 
                    [
                     ({ Haskell.hs.neat:74:15-18 }
                      Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (VarPat 
                       (Unqual {OccName: text})))])))))] 
              (Nothing) 
              (GRHSs 
               [
                ({ Haskell.hs.neat:74:21-33 }
                 Just (Ann (DP (0,-1)) (ColDelta 21) DP (0,-1) [] [])
                 (GRHS 
                  [] 
                  ({ Haskell.hs.neat:74:23-33 }
                   Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsPar 
                    ({ Haskell.hs.neat:74:24-32 }
                     Just (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                     (HsPar 
                      ({ Haskell.hs.neat:74:3-31 }
                       Just (Ann (DP (0,-22)) (ColDelta 3) DP (0,-22) [] [])
                       (HsApp 
                        ({ Haskell.hs.neat:74:3-8 }
                         Just (Ann (DP (0,-22)) (ColDelta 3) DP (0,-22) [] [((G AnnVal),DP (0,-22))])
                         (HsVar 
                          (Unqual {OccName: output}))) 
                        ({ Haskell.hs.neat:74:10-31 }
                         Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                         (HsPar 
                          ({ Haskell.hs.neat:74:11-30 }
                           Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                           (OpApp 
                            ({ Haskell.hs.neat:74:11-23 }
                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                             (OpApp 
                              ({ Haskell.hs.neat:74:11-15 }
                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: quote}))) 
                              ({ Haskell.hs.neat:74:17 }
                               Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: $}))) 
                              (PlaceHolder) 
                              ({ Haskell.hs.neat:74:19-23 }
                               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: prune}))))) 
                            ({ Haskell.hs.neat:74:25 }
                             Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: $}))) 
                            (PlaceHolder) 
                            ({ Haskell.hs.neat:74:27-30 }
                             Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: text})))))))))))))))] 
               (EmptyLocalBinds))))] 
           [] 
           (PlaceHolder) 
           (FromSource)) 
          (WpHole) 
          (PlaceHolder) 
          []))]} 
       [] 
       [] 
       [] 
       (Nothing))))),
   ({ Haskell.hs.neat:77:1-26 }
    Just (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ Haskell.hs.neat:77:1-8 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: outputHS}))] 
      ({ Haskell.hs.neat:77:13-26 }
       Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ Haskell.hs.neat:77:13-26 }
         Just (Ann (DP (0,0)) (ColDelta 13) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ Haskell.hs.neat:77:13-16 }
           Just (Ann (DP (0,0)) (ColDelta 13) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: File}))) 
          ({ Haskell.hs.neat:77:21-26 }
           Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: String}))))))) 
      (PlaceHolder)))),
   ({ Haskell.hs.neat:78:1-17 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ Haskell.hs.neat:78:1-8 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: outputHS})) 
      (False) 
      (MG 
       [
        ({ Haskell.hs.neat:78:1-17 }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ Haskell.hs.neat:78:1-8 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: outputHS})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ Haskell.hs.neat:78:10-17 }
             Just (Ann (DP (0,-1)) (ColDelta 10) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ Haskell.hs.neat:78:12-17 }
               Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsVar 
                (Unqual {OccName: output})))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      [])))] 
  (Nothing) 
  (Nothing)))
==============
[(AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:33-42 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:34-41 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 34) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:34-41 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 34) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:6:1-25 CN "ImportDecl" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:1-23 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(10,1)-(16,5) CN "InstD" NotNeeded,
  (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:10-20 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:10-20 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:17-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,2)-(16,5) CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,2)-(16,5) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:9-34 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:10-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:10-33 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:15-18 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:20-33 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:21-25 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:21-32 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:27-32 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,36)-(16,5) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 36) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,38)-(16,5) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:1:1 CN "HsModule" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,32)) "{-# LINE 1 \"Haskell.hs.neat\" #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,80)) "-- Copyright 2014 Alvaro J. Genial [http://alva.ro]; see LICENSE file for more." Nothing),DP (1,1)),((G AnnModule),DP (3,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((G AnnEofPos),DP (1,0))])),
 (AnnKey Haskell.hs.neat:10:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [((G AnnVal),DP (-1,3))])),
 (AnnKey Haskell.hs.neat:(10,3)-(16,14) CN "OpApp" NotNeeded,
  (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [])),
 (AnnKey Haskell.hs.neat:10:6-7 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(10,9)-(16,14) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:3-7 CN "Unqual" NotNeeded,
  (Ann (DP (-2,-36)) (ColDelta -36) DP (-2,-36) [] [((G AnnVal),DP (-2,-36))])),
 (AnnKey Haskell.hs.neat:11:3-34 CN "AsPat" NotNeeded,
  (Ann (DP (-2,-36)) (ColDelta -36) DP (-2,-36) [] [((G AnnAt),DP (0,1))])),
 (AnnKey Haskell.hs.neat:(11,3)-(16,13) CN "HsLet" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [((G AnnLet),DP (0,0)),((AnnList Haskell.hs.neat:11:7-24 NotNeeded),DP (0,0)),((G AnnIn),DP (0,1))])),
 (AnnKey Haskell.hs.neat:11:5-6 CN "HsLit" NotNeeded,
  (Ann (DP (0,-35)) (ColDelta -34) DP (0,-35) [] [((G AnnVal),DP (0,-35))])),
 (AnnKey Haskell.hs.neat:(11,5)-(14,10) CN "OpApp" NotNeeded,
  (Ann (DP (0,-35)) (ColDelta -34) DP (0,-35) [] [])),
 (AnnKey Haskell.hs.neat:(11,5)-(15,6) CN "OpApp" NotNeeded,
  (Ann (DP (0,-35)) (ColDelta -34) DP (0,-35) [] [])),
 (AnnKey Haskell.hs.neat:11:7-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:7-24 CN "FunBind" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:11:7-24 CN "HsValBinds" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 4) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:11:7-24 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:11:8-9 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -31) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:10-24 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:11:11-34 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -28) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(11,11)-(14,10) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -28) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:12-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:12-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -27) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:12-24 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:11:12-33 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -27) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:11:17-24 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:18-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:18-25 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:11:27-33 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -12) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(11,39)-(15,7) CN "(:)" Ref "delta-1",
  (Ann (DP (-2,0)) (ColDelta 36) DP (-2,0) [] [])),
 (AnnKey Haskell.hs.neat:(11,39)-(15,7) CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 0) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:(11,39)-(15,7) CN "HsLam" NotNeeded,
  (Ann (DP (-2,36)) (ColDelta 36) DP (-2,36) [] [((G AnnLam),DP (0,1)),((AnnList Haskell.hs.neat:(11,39)-(15,7) Ref "delta-1"),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(11,39)-(15,7) CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(11,39)-(15,7) CN "Match" NotNeeded,
  (Ann (DP (-2,0)) (ColDelta 0) DP (-2,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey Haskell.hs.neat:(11,39)-(15,7) CN "OpApp" NotNeeded,
  (Ann (DP (-2,36)) (ColDelta 36) DP (-2,36) [] [])),
 (AnnKey Haskell.hs.neat:(12,5)-(16,13) CN "HsIf" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnIf),DP (0,0)),((G AnnThen),DP (1,4)),((G AnnElse),DP (1,4))])),
 (AnnKey Haskell.hs.neat:12:8-19 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:12:8-22 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:12:9-11 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:12:9-18 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:12:13 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:12:15-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:12:21-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:5-15 CN "ParPat" NotNeeded,
  (Ann (DP (0,-19)) (ColDelta 0) DP (0,-19) [] [((G AnnOpenP),DP (0,-19)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:5-20 CN "Match" NotNeeded,
  (Ann (DP (0,-19)) (ColDelta 0) DP (0,-19) [] [])),
 (AnnKey Haskell.hs.neat:(13,5)-(14,10) CN "(:)" Ref "delta-2",
  (Ann (DP (0,-19)) (ColDelta -34) DP (0,-19) [] [])),
 (AnnKey Haskell.hs.neat:(13,5)-(14,10) CN "HsCase" NotNeeded,
  (Ann (DP (2,-34)) (ColDelta -34) DP (2,-34) [] [((G AnnCase),DP (0,2)),((G AnnOf),DP (0,1)),((AnnList Haskell.hs.neat:(13,5)-(14,10) Ref "delta-2"),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:6-9 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:6-14 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:13:7-8 CN "HsLit" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 2) DP (0,-17) [] [((G AnnVal),DP (0,-17))])),
 (AnnKey Haskell.hs.neat:13:7-12 CN "HsVar" NotNeeded,
  (Ann (DP (0,-15)) (ColDelta 2) DP (0,-15) [] [((G AnnVal),DP (0,-15)),((G AnnVal),DP (0,-23))])),
 (AnnKey Haskell.hs.neat:13:7-19 CN "HsApp" NotNeeded,
  (Ann (DP (0,-23)) (ColDelta 2) DP (0,-23) [] [])),
 (AnnKey Haskell.hs.neat:13:7-23 CN "HsApp" NotNeeded,
  (Ann (DP (0,-15)) (ColDelta 2) DP (0,-15) [] [])),
 (AnnKey Haskell.hs.neat:13:7-29 CN "OpApp" NotNeeded,
  (Ann (DP (0,-14)) (ColDelta 2) DP (0,-14) [] [])),
 (AnnKey Haskell.hs.neat:13:9-20 CN "GRHS" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 4) DP (0,-7) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey Haskell.hs.neat:13:9-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,-10)) (ColDelta 4) DP (0,-10) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:11-14 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:12-13 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:12-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -27) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:13-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -26) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:14-19 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:14-23 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:15-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:15-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:15-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:20-29 CN "HsPar" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 15) DP (0,-8) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:20-29 CN "OpApp" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 15) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:13:21-24 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:22-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:13:26-27 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:5 CN "WildPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:5-10 CN "Match" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey Haskell.hs.neat:14:7-8 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 2) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:14:7-10 CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 2) DP (0,1) [] [((G AnnRarrow),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:7-12 CN "HsVar" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 2) DP (0,-5) [] [((G AnnVal),DP (0,-5))])),
 (AnnKey Haskell.hs.neat:14:7-20 CN "HsApp" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 2) DP (0,-5) [] [])),
 (AnnKey Haskell.hs.neat:14:7-21 CN "OpApp" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])),
 (AnnKey Haskell.hs.neat:14:9-10 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 4) DP (0,0) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:11-21 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:12-13 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -27) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:14-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:15-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:14:23-24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:15:5-6 CN "HsLit" NotNeeded,
  (Ann (DP (1,-34)) (ColDelta -34) DP (1,-34) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:16:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (0,-15)) (ColDelta 3) DP (0,-15) [] [((G AnnVal),DP (0,-15))])),
 (AnnKey Haskell.hs.neat:16:12-13 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenS),DP (0,0)),((G AnnCloseS),DP (0,0))])),
 (AnnKey Haskell.hs.neat:16:16-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(19,1)-(20,26) CN "InstD" NotNeeded,
  (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:19:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:19:10-21 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:19:10-21 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:19:17-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:2-26 CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:20:2-26 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:20:3-5 CN "HsLit" NotNeeded,
  (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [((G AnnVal),DP (0,-24)),((G AnnVal),DP (0,-40))])),
 (AnnKey Haskell.hs.neat:20:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [((G AnnVal),DP (0,-8))])),
 (AnnKey Haskell.hs.neat:20:3-38 CN "HsApp" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])),
 (AnnKey Haskell.hs.neat:20:3-39 CN "OpApp" NotNeeded,
  (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [])),
 (AnnKey Haskell.hs.neat:20:6-26 CN "GRHS" NotNeeded,
  (Ann (DP (0,-19)) (ColDelta 6) DP (0,-19) [] [])),
 (AnnKey Haskell.hs.neat:20:6-26 CN "HsPar" NotNeeded,
  (Ann (DP (0,-19)) (ColDelta 6) DP (0,-19) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:7-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:9-22 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:10-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:10-21 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:20:10-38 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:10-39 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:11-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:11-28 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:20:11-37 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:20:16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:16-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:18-21 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:18-28 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:20:23-28 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:30 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:32-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:20:41-42 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(22,1)-(28,5) CN "InstD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:22:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:22:10-21 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:22:10-21 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:22:17-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(23,2)-(28,5) CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:(23,2)-(28,5) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:23:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (0,-42)) (ColDelta 3) DP (0,-42) [] [((G AnnVal),DP (0,-42))])),
 (AnnKey Haskell.hs.neat:(23,3)-(27,9) CN "OpApp" NotNeeded,
  (Ann (DP (0,-42)) (ColDelta 3) DP (0,-42) [] [])),
 (AnnKey Haskell.hs.neat:(23,3)-(28,4) CN "OpApp" NotNeeded,
  (Ann (DP (0,-42)) (ColDelta 3) DP (0,-42) [] [])),
 (AnnKey Haskell.hs.neat:23:6-7 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:9-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:9-40 CN "AsPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnAt),DP (0,1))])),
 (AnnKey Haskell.hs.neat:(23,9)-(27,9) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:17-40 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:18-22 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:18-39 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:23:24-31 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:23:33-39 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(23,42)-(28,5) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 42) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:(23,44)-(28,5) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:3-24 CN "ParPat" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 0) DP (0,-17) [] [((G AnnOpenP),DP (0,-17)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:3-29 CN "Match" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 0) DP (0,-17) [] [])),
 (AnnKey Haskell.hs.neat:(25,3)-(27,8) CN "(:)" Ref "delta-3",
  (Ann (DP (0,-17)) (ColDelta 3) DP (0,-17) [] [])),
 (AnnKey Haskell.hs.neat:(25,3)-(27,8) CN "HsCase" NotNeeded,
  (Ann (DP (2,3)) (ColDelta 3) DP (2,3) [] [((G AnnCase),DP (0,2)),((G AnnOf),DP (0,1)),((AnnList Haskell.hs.neat:(25,3)-(27,8) Ref "delta-3"),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:4-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:4-23 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:25:5-6 CN "HsLit" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 2) DP (0,-20) [] [((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:25:5-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,-26)) (ColDelta 2) DP (0,-26) [] [((G AnnVal),DP (0,-26))])),
 (AnnKey Haskell.hs.neat:25:5-20 CN "HsApp" NotNeeded,
  (Ann (DP (0,-26)) (ColDelta 2) DP (0,-26) [] [])),
 (AnnKey Haskell.hs.neat:25:5-30 CN "OpApp" NotNeeded,
  (Ann (DP (0,-25)) (ColDelta 2) DP (0,-25) [] [])),
 (AnnKey Haskell.hs.neat:25:7-29 CN "GRHS" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 4) DP (0,-18) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey Haskell.hs.neat:25:7-29 CN "HsPar" NotNeeded,
  (Ann (DP (0,-21)) (ColDelta 4) DP (0,-21) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:10 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:12-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:12-23 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:13-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:13-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:13-22 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:25:20 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:21-30 CN "HsPar" NotNeeded,
  (Ann (DP (0,-9)) (ColDelta 18) DP (0,-9) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:22 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:25:23-24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:3-20 CN "ParPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:3-25 CN "Match" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey Haskell.hs.neat:26:4-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:4-19 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:26:5-6 CN "HsLit" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 2) DP (0,-20) [] [((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:26:5-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,-22)) (ColDelta 2) DP (0,-22) [] [((G AnnVal),DP (0,-22)),((G AnnVal),DP (0,-23))])),
 (AnnKey Haskell.hs.neat:26:5-20 CN "HsApp" NotNeeded,
  (Ann (DP (0,-23)) (ColDelta 2) DP (0,-23) [] [])),
 (AnnKey Haskell.hs.neat:26:5-21 CN "HsApp" NotNeeded,
  (Ann (DP (0,-22)) (ColDelta 2) DP (0,-22) [] [])),
 (AnnKey Haskell.hs.neat:26:5-27 CN "OpApp" NotNeeded,
  (Ann (DP (0,-21)) (ColDelta 2) DP (0,-21) [] [])),
 (AnnKey Haskell.hs.neat:26:7-25 CN "GRHS" NotNeeded,
  (Ann (DP (0,-14)) (ColDelta 4) DP (0,-14) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey Haskell.hs.neat:26:7-25 CN "HsPar" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 4) DP (0,-17) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:10 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:12-19 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:12-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:12-21 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:13-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:13-18 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:26:13-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:13-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:18 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:21-27 CN "HsPar" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 18) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:21-27 CN "OpApp" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 18) DP (0,-5) [] [])),
 (AnnKey Haskell.hs.neat:26:22-26 CN "HsPar" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 19) DP (0,-4) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:23-24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:26:24-25 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:3 CN "WildPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:3-8 CN "Match" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey Haskell.hs.neat:27:5-7 CN "HsLit" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [((G AnnVal),DP (0,-4)),((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:27:5-8 CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 2) DP (0,1) [] [((G AnnRarrow),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:5-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 2) DP (0,-8) [] [((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-23))])),
 (AnnKey Haskell.hs.neat:27:5-20 CN "HsApp" NotNeeded,
  (Ann (DP (0,-23)) (ColDelta 2) DP (0,-23) [] [])),
 (AnnKey Haskell.hs.neat:27:5-21 CN "HsApp" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 2) DP (0,-8) [] [])),
 (AnnKey Haskell.hs.neat:27:5-22 CN "OpApp" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])),
 (AnnKey Haskell.hs.neat:27:5-27 CN "OpApp" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 2) DP (0,-4) [] [])),
 (AnnKey Haskell.hs.neat:27:8 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:9-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:11-12 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:12-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:12-21 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:12-22 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:13-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:13-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:21-27 CN "HsPar" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 18) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:23-24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:27:24-25 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:28:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(31,1)-(32,32) CN "InstD" NotNeeded,
  (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:31:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:31:10-20 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:31:10-20 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:31:17-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:2-32 CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:32:2-32 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:32:3-8 CN "HsLit" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 3) DP (0,-20) [] [((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:32:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [((G AnnVal),DP (0,-31)),((G AnnVal),DP (0,-11))])),
 (AnnKey Haskell.hs.neat:32:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-11)) (ColDelta 3) DP (0,-11) [] [])),
 (AnnKey Haskell.hs.neat:32:3-18 CN "HsApp" NotNeeded,
  (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [])),
 (AnnKey Haskell.hs.neat:32:3-33 CN "OpApp" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])),
 (AnnKey Haskell.hs.neat:32:9-28 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:10-11 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:10-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:10-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:10-27 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:32:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:11-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:13-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:15-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:18-32 CN "GRHS" NotNeeded,
  (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [])),
 (AnnKey Haskell.hs.neat:32:18-32 CN "HsPar" NotNeeded,
  (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:19-33 CN "HsPar" NotNeeded,
  (Ann (DP (0,-14)) (ColDelta 19) DP (0,-14) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:21-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:32:23-27 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(34,1)-(35,32) CN "InstD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:34:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:34:10-24 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:34:10-24 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:34:17-24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:2-32 CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:35:2-32 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:35:3-5 CN "HsLit" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 3) DP (0,-17) [] [((G AnnVal),DP (0,-17))])),
 (AnnKey Haskell.hs.neat:35:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [((G AnnVal),DP (0,-16)),((G AnnVal),DP (0,-8))])),
 (AnnKey Haskell.hs.neat:35:3-10 CN "HsLit" NotNeeded,
  (Ann (DP (0,-25)) (ColDelta 3) DP (0,-25) [] [((G AnnVal),DP (0,-25))])),
 (AnnKey Haskell.hs.neat:35:3-13 CN "HsLit" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [((G AnnVal),DP (0,-30))])),
 (AnnKey Haskell.hs.neat:35:3-15 CN "HsApp" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [])),
 (AnnKey Haskell.hs.neat:35:3-18 CN "OpApp" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])),
 (AnnKey Haskell.hs.neat:35:3-23 CN "HsApp" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])),
 (AnnKey Haskell.hs.neat:35:3-24 CN "OpApp" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])),
 (AnnKey Haskell.hs.neat:35:7-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:9-28 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:10-15 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:10-17 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:10-23 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:10-24 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:10-27 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:35:11-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:11-22 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:35:11-32 CN "GRHS" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 11) DP (0,-20) [] [])),
 (AnnKey Haskell.hs.neat:35:11-32 CN "HsPar" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 11) DP (0,-20) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:15-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:16-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 16) DP (0,-1) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:17 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:18-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:19-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:19-22 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:24-27 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:35:26-27 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(39,1)-(40,49) CN "InstD" NotNeeded,
  (Ann (DP (4,1)) (ColDelta 1) DP (4,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:39:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:39:10-24 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:39:10-24 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:39:17-24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:2-49 CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:40:2-49 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:40:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-48)) (ColDelta 3) DP (0,-48) [] [((G AnnVal),DP (0,-48)),((G AnnVal),DP (0,-19))])),
 (AnnKey Haskell.hs.neat:40:3-15 CN "HsApp" NotNeeded,
  (Ann (DP (0,-48)) (ColDelta 3) DP (0,-48) [] [])),
 (AnnKey Haskell.hs.neat:40:3-18 CN "HsApp" NotNeeded,
  (Ann (DP (0,-19)) (ColDelta 3) DP (0,-19) [] [])),
 (AnnKey Haskell.hs.neat:40:9-45 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:10-15 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:10-17 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:10-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:10-44 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:40:11-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:11-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:16-50 CN "HsPar" NotNeeded,
  (Ann (DP (0,-34)) (ColDelta 16) DP (0,-34) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:16-50 CN "OpApp" NotNeeded,
  (Ann (DP (0,-34)) (ColDelta 16) DP (0,-34) [] [])),
 (AnnKey Haskell.hs.neat:40:18-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:19 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:19-21 CN "HsPar" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 19) DP (0,-1) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:20-49 CN "GRHS" NotNeeded,
  (Ann (DP (0,-28)) (ColDelta 20) DP (0,-28) [] [])),
 (AnnKey Haskell.hs.neat:40:20-49 CN "HsPar" NotNeeded,
  (Ann (DP (0,-28)) (ColDelta 20) DP (0,-28) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:21-24 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:26-44 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:27-33 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:27-43 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:40:35 CN "WildPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:40:37-43 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(42,1)-(43,37) CN "InstD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:42:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:42:10-21 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:42:10-21 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:42:17-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:2-37 CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:43:2-37 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:43:3-5 CN "HsLit" NotNeeded,
  (Ann (DP (0,-35)) (ColDelta 3) DP (0,-35) [] [((G AnnVal),DP (0,-35)),((G AnnVal),DP (0,-44))])),
 (AnnKey Haskell.hs.neat:43:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [((G AnnVal),DP (0,-8))])),
 (AnnKey Haskell.hs.neat:43:3-42 CN "HsApp" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])),
 (AnnKey Haskell.hs.neat:43:3-43 CN "OpApp" NotNeeded,
  (Ann (DP (0,-35)) (ColDelta 3) DP (0,-35) [] [])),
 (AnnKey Haskell.hs.neat:43:6-37 CN "GRHS" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 6) DP (0,-30) [] [])),
 (AnnKey Haskell.hs.neat:43:6-37 CN "HsPar" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 6) DP (0,-30) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:7-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:9-33 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:10-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:10-32 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:43:10-42 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:10-43 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:11-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:11-20 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:43:11-30 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:43:11-41 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:43:16-20 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:16-23 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:24-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:25-32 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:32 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:34-41 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:43:45-46 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 45) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(45,1)-(46,38) CN "InstD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:45:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:45:10-23 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:45:10-23 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:45:17-23 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:2-38 CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:46:2-38 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:46:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-37)) (ColDelta 3) DP (0,-37) [] [((G AnnVal),DP (0,-37)),((G AnnVal),DP (0,-23))])),
 (AnnKey Haskell.hs.neat:46:3-18 CN "HsApp" NotNeeded,
  (Ann (DP (0,-23)) (ColDelta 3) DP (0,-23) [] [])),
 (AnnKey Haskell.hs.neat:46:3-19 CN "HsApp" NotNeeded,
  (Ann (DP (0,-37)) (ColDelta 3) DP (0,-37) [] [])),
 (AnnKey Haskell.hs.neat:46:9-34 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:10-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:10-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:10-19 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:10-33 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:46:11-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:11-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:18-25 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:19-25 CN "HsPar" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 19) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:19-39 CN "OpApp" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 19) DP (0,-20) [] [])),
 (AnnKey Haskell.hs.neat:46:20-38 CN "GRHS" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 20) DP (0,-17) [] [])),
 (AnnKey Haskell.hs.neat:46:20-38 CN "HsPar" NotNeeded,
  (Ann (DP (0,-17)) (ColDelta 20) DP (0,-17) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:20-39 CN "HsPar" NotNeeded,
  (Ann (DP (0,-19)) (ColDelta 20) DP (0,-19) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:22-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:46:27-33 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(48,1)-(74,33) CN "InstD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnInstance),DP (0,0)),((G AnnWhere),DP (0,1))])),
 (AnnKey Haskell.hs.neat:48:10-15 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:48:10-23 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:48:10-23 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:48:17-23 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:2-26 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:(49,2)-(74,33) CN "FunBind" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [])),
 (AnnKey Haskell.hs.neat:49:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-14)) (ColDelta 3) DP (0,-14) [] [((G AnnVal),DP (0,-14))])),
 (AnnKey Haskell.hs.neat:49:3-11 CN "HsLit" NotNeeded,
  (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [((G AnnVal),DP (0,-24))])),
 (AnnKey Haskell.hs.neat:49:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-14)) (ColDelta 3) DP (0,-14) [] [])),
 (AnnKey Haskell.hs.neat:49:3-17 CN "OpApp" NotNeeded,
  (Ann (DP (0,-24)) (ColDelta 3) DP (0,-24) [] [])),
 (AnnKey Haskell.hs.neat:49:9-22 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:10-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:10-21 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:49:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:13-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:16-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:17-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:49:18-26 CN "GRHS" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 18) DP (0,-7) [] [])),
 (AnnKey Haskell.hs.neat:49:18-26 CN "HsPar" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 18) DP (0,-7) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:2-29 CN "Match" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:50:3-5 CN "HsLit" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 3) DP (0,-16) [] [((G AnnVal),DP (0,-16)),((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:50:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [((G AnnVal),DP (0,-28)),((G AnnVal),DP (0,-8)),((G AnnVal),DP (0,-8))])),
 (AnnKey Haskell.hs.neat:50:3-14 CN "HsApp" NotNeeded,
  (Ann (DP (0,-28)) (ColDelta 3) DP (0,-28) [] [])),
 (AnnKey Haskell.hs.neat:50:3-18 CN "HsApp" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [])),
 (AnnKey Haskell.hs.neat:50:3-30 CN "OpApp" NotNeeded,
  (Ann (DP (0,-27)) (ColDelta 3) DP (0,-27) [] [])),
 (AnnKey Haskell.hs.neat:50:7-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:9-25 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:10-14 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:10-15 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:10-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:10-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:10-19 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:10-24 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:50:11-13 CN "HsLit" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:11-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:15-30 CN "HsPar" NotNeeded,
  (Ann (DP (0,-15)) (ColDelta 15) DP (0,-15) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:16-29 CN "GRHS" NotNeeded,
  (Ann (DP (0,-12)) (ColDelta 16) DP (0,-12) [] [])),
 (AnnKey Haskell.hs.neat:50:16-29 CN "HsPar" NotNeeded,
  (Ann (DP (0,-12)) (ColDelta 16) DP (0,-12) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:17-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:18-24 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:50:21-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:2-35 CN "Match" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:51:3-7 CN "HsLit" NotNeeded,
  (Ann (DP (0,-21)) (ColDelta 3) DP (0,-21) [] [((G AnnVal),DP (0,-21))])),
 (AnnKey Haskell.hs.neat:51:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-34)) (ColDelta 3) DP (0,-34) [] [((G AnnVal),DP (0,-34)),((G AnnVal),DP (0,-10))])),
 (AnnKey Haskell.hs.neat:51:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-10)) (ColDelta 3) DP (0,-10) [] [])),
 (AnnKey Haskell.hs.neat:51:3-19 CN "HsApp" NotNeeded,
  (Ann (DP (0,-34)) (ColDelta 3) DP (0,-34) [] [])),
 (AnnKey Haskell.hs.neat:51:3-36 CN "OpApp" NotNeeded,
  (Ann (DP (0,-33)) (ColDelta 3) DP (0,-33) [] [])),
 (AnnKey Haskell.hs.neat:51:9-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:9-31 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:10-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:10-19 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:10-30 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:51:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:11-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:12-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:17-24 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:18-35 CN "GRHS" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 18) DP (0,-16) [] [])),
 (AnnKey Haskell.hs.neat:51:18-35 CN "HsPar" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 18) DP (0,-16) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:20-36 CN "HsPar" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 20) DP (0,-16) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:22-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:51:26-30 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:2-32 CN "Match" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:52:3-5 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:52:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [((G AnnVal),DP (0,-31)),((G AnnVal),DP (0,-8))])),
 (AnnKey Haskell.hs.neat:52:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-31)) (ColDelta 3) DP (0,-31) [] [])),
 (AnnKey Haskell.hs.neat:52:3-33 CN "OpApp" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [])),
 (AnnKey Haskell.hs.neat:52:7-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:9-28 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:10-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:10-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:10-27 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:52:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:17-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:17-33 CN "HsPar" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 17) DP (0,-16) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:18-32 CN "GRHS" NotNeeded,
  (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [])),
 (AnnKey Haskell.hs.neat:52:18-32 CN "HsPar" NotNeeded,
  (Ann (DP (0,-13)) (ColDelta 18) DP (0,-13) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:52:23-27 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(54,2)-(57,5) CN "Match" NotNeeded,
  (Ann (DP (2,2)) (ColDelta 2) DP (2,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:54:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-21)) (ColDelta 3) DP (0,-21) [] [((G AnnVal),DP (0,-21))])),
 (AnnKey Haskell.hs.neat:54:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-21)) (ColDelta 3) DP (0,-21) [] [])),
 (AnnKey Haskell.hs.neat:54:3-18 CN "HsLit" NotNeeded,
  (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [((G AnnVal),DP (0,-51))])),
 (AnnKey Haskell.hs.neat:54:3-23 CN "OpApp" NotNeeded,
  (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])),
 (AnnKey Haskell.hs.neat:54:3-49 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:54:3-49 CN "OpApp" NotNeeded,
  (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])),
 (AnnKey Haskell.hs.neat:(54,3)-(56,19) CN "OpApp" NotNeeded,
  (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])),
 (AnnKey Haskell.hs.neat:(54,3)-(57,29) CN "OpApp" NotNeeded,
  (Ann (DP (0,-51)) (ColDelta 3) DP (0,-51) [] [])),
 (AnnKey Haskell.hs.neat:54:9-49 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:10-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:10-48 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:54:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:14-36 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:15-21 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:15-35 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:54:17-23 CN "HsPar" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 17) DP (0,-5) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:20-21 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:23-29 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:31-35 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:38-42 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:44-48 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:54:51-52 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 51) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(54,51)-(57,5) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 51) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:(54,53)-(57,5) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 53) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(54,54)-(56,19) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 54) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:3-8 CN "HsLit" NotNeeded,
  (Ann (DP (0,-20)) (ColDelta 3) DP (0,-20) [] [((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:56:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11))])),
 (AnnKey Haskell.hs.neat:56:3-15 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:56:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-11)) (ColDelta 3) DP (0,-11) [] [])),
 (AnnKey Haskell.hs.neat:56:3-18 CN "HsApp" NotNeeded,
  (Ann (DP (2,3)) (ColDelta 3) DP (2,3) [] [])),
 (AnnKey Haskell.hs.neat:56:10-11 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:10-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:11-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:13-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:17-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(56,20)-(57,29) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:56:21-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:57:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [((G AnnVal),DP (0,-30))])),
 (AnnKey Haskell.hs.neat:57:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:57:3-28 CN "HsApp" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey Haskell.hs.neat:57:10-28 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:57:11-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:57:11-22 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:57:11-27 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:57:18-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:57:24-27 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:57:31-32 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(60,2)-(62,5) CN "Match" NotNeeded,
  (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:60:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-23)) (ColDelta 3) DP (0,-23) [] [((G AnnVal),DP (0,-23))])),
 (AnnKey Haskell.hs.neat:60:3-13 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:60:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (0,-23)) (ColDelta 3) DP (0,-23) [] [])),
 (AnnKey Haskell.hs.neat:60:3-20 CN "HsLit" NotNeeded,
  (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [((G AnnVal),DP (0,-32))])),
 (AnnKey Haskell.hs.neat:60:3-25 CN "OpApp" NotNeeded,
  (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])),
 (AnnKey Haskell.hs.neat:(60,3)-(61,17) CN "OpApp" NotNeeded,
  (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])),
 (AnnKey Haskell.hs.neat:(60,3)-(62,29) CN "OpApp" NotNeeded,
  (Ann (DP (0,-32)) (ColDelta 3) DP (0,-32) [] [])),
 (AnnKey Haskell.hs.neat:60:9-30 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:10-11 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:10-29 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:60:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:13-17 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:15-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:17-25 CN "HsPar" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 17) DP (0,-7) [] [((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(60,18)-(61,17) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:19-23 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:22-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:60:25-29 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(60,32)-(62,5) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 32) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:(60,34)-(62,5) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:61:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:61:3-13 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:61:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey Haskell.hs.neat:61:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:61:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:61:15-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(61,18)-(62,29) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:61:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:62:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (0,-30)) (ColDelta 3) DP (0,-30) [] [((G AnnVal),DP (0,-30))])),
 (AnnKey Haskell.hs.neat:62:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:62:3-28 CN "HsApp" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey Haskell.hs.neat:62:10-28 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:62:11-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:62:11-22 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:62:11-27 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:62:18-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:62:24-27 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:62:31-32 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:65:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(65,2)-(67,5) CN "Match" NotNeeded,
  (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:65:3-13 CN "HsLit" NotNeeded,
  (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [((G AnnVal),DP (0,-36))])),
 (AnnKey Haskell.hs.neat:(65,3)-(66,17) CN "OpApp" NotNeeded,
  (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])),
 (AnnKey Haskell.hs.neat:(65,3)-(68,12) CN "OpApp" NotNeeded,
  (Ann (DP (0,-36)) (ColDelta 3) DP (0,-36) [] [])),
 (AnnKey Haskell.hs.neat:65:9-34 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:65:10-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:65:10-33 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:65:15-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:65:17-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(65,18)-(66,17) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:65:23-27 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:65:29-33 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(65,36)-(67,5) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 36) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:(65,38)-(67,5) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:3-5 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:66:3-8 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:66:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11))])),
 (AnnKey Haskell.hs.neat:66:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey Haskell.hs.neat:(66,3)-(68,11) CN "HsIf" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 3) DP (0,-8) [] [((G AnnIf),DP (0,-8)),((G AnnThen),DP (1,5)),((G AnnElse),DP (1,5))])),
 (AnnKey Haskell.hs.neat:66:5-13 CN "HsLit" NotNeeded,
  (Ann (DP (-1,5)) (ColDelta 5) DP (-1,5) [] [((G AnnVal),DP (-1,5))])),
 (AnnKey Haskell.hs.neat:(66,5)-(67,19) CN "OpApp" NotNeeded,
  (Ann (DP (-1,5)) (ColDelta 5) DP (-1,5) [] [])),
 (AnnKey Haskell.hs.neat:66:6-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:6-25 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:66:7-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:7-9 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:7-16 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:66:10-11 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(66,10)-(68,12) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:11 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:13-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:13-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:15-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(66,18)-(67,19) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:19-25 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:66:20-24 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:67:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (-1,3)) (ColDelta 3) DP (-1,3) [] [((G AnnVal),DP (-1,3))])),
 (AnnKey Haskell.hs.neat:67:5-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:67:5-18 CN "HsApp" NotNeeded,
  (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [] [])),
 (AnnKey Haskell.hs.neat:67:10-20 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:67:12-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:67:13-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 13) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:68:10-11 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenS),DP (0,0)),((G AnnCloseS),DP (0,0))])),
 (AnnKey Haskell.hs.neat:68:14-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(70,2)-(71,5) CN "Match" NotNeeded,
  (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:70:3-13 CN "HsLit" NotNeeded,
  (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [((G AnnVal),DP (0,-46))])),
 (AnnKey Haskell.hs.neat:(70,3)-(71,17) CN "OpApp" NotNeeded,
  (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])),
 (AnnKey Haskell.hs.neat:(70,3)-(71,19) CN "OpApp" NotNeeded,
  (Ann (DP (0,-46)) (ColDelta 3) DP (0,-46) [] [])),
 (AnnKey Haskell.hs.neat:70:9-44 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:10-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:10-43 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:70:15-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:15-37 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:16-22 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:16-36 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:(70,18)-(71,17) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:24-30 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:32-36 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:70:39-43 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:(70,46)-(71,5) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 46) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:(70,48)-(71,5) CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 48) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:3-4 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18))])),
 (AnnKey Haskell.hs.neat:71:3-8 CN "HsLit" NotNeeded,
  (Ann (DP (0,-18)) (ColDelta 3) DP (0,-18) [] [((G AnnVal),DP (0,-18)),((G AnnVal),DP (0,-20))])),
 (AnnKey Haskell.hs.neat:71:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,-11)),((G AnnVal),DP (0,-11))])),
 (AnnKey Haskell.hs.neat:71:3-16 CN "HsApp" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey Haskell.hs.neat:71:3-18 CN "HsApp" NotNeeded,
  (Ann (DP (0,-11)) (ColDelta 3) DP (0,-11) [] [])),
 (AnnKey Haskell.hs.neat:71:10-11 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:10-16 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:10-18 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:11-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:13-17 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:13-19 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:71:21-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:2-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:2-33 CN "Match" NotNeeded,
  (Ann (DP (3,2)) (ColDelta 2) DP (3,2) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:74:3-8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-22)) (ColDelta 3) DP (0,-22) [] [((G AnnVal),DP (0,-22))])),
 (AnnKey Haskell.hs.neat:74:3-31 CN "HsApp" NotNeeded,
  (Ann (DP (0,-22)) (ColDelta 3) DP (0,-22) [] [])),
 (AnnKey Haskell.hs.neat:74:9-19 CN "ParPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:10-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:10-18 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:74:10-31 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:11-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:11-23 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:74:11-30 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey Haskell.hs.neat:74:15-18 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:17 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:19-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:21-33 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 21) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:74:23-33 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:24-32 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:25 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:74:27-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:77:1-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:77:1-26 CN "SigD" NotNeeded,
  (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnDcolon),DP (0,1))])),
 (AnnKey Haskell.hs.neat:77:13-16 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 13) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:77:13-26 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [])),
 (AnnKey Haskell.hs.neat:77:13-26 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 13) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey Haskell.hs.neat:77:21-26 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:78:1-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey Haskell.hs.neat:78:1-17 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey Haskell.hs.neat:78:1-17 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey Haskell.hs.neat:78:10-17 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 10) DP (0,-1) [] [])),
 (AnnKey Haskell.hs.neat:78:12-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey <no location info> CN "EmptyLocalBinds" NotNeeded,
  (Ann (DP (-11,0)) (ColDelta -7) DP (-11,0) [] []))]
==============
([((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:33-42,
    AnnCloseP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:42]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:33-42,
    AnnOpenP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:33]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:6:1-25,
    AnnImport),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:6:1-6]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:6:1-25,
    AnnSemi),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:1]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:1-23,
    AnnImport),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:1-6]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:7:1-23,
    AnnSemi),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:1]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(10,1)-(16,5),
    AnnInstance),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:1-8]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(10,1)-(16,5),
    AnnSemi),
   [Haskell.hs.neat:19:1]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(10,1)-(16,5),
    AnnWhere),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:10:22-26]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,2)-(16,5),
    AnnEqual),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:36]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,2)-(16,5),
    AnnFunId),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:2-7]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:9-34,
    AnnCloseP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:34]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:9-34,
    AnnOpenP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:9]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:20-33,
    AnnCloseP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:33]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:20-33,
    AnnOpenP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:20]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,38)-(16,5),
    AnnCloseP),
   [Haskell.hs.neat:16:5]),
  ((../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:(11,38)-(16,5),
    AnnOpenP),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:11:38]),
  ((Haskell.hs.neat:1:1, AnnModule),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:1-6]),
  ((Haskell.hs.neat:1:1, AnnWhere),
   [../../hackage-packages/neat-0.1.0/Text/Neat/Output/Haskell.hs:4:44-48]),
  ((Haskell.hs.neat:(10,3)-(16,14), AnnVal),
   [Haskell.hs.neat:10:6-7, Haskell.hs.neat:16:16-17]),
  ((Haskell.hs.neat:(10,9)-(16,14), AnnCloseP),
   [Haskell.hs.neat:16:14]),
  ((Haskell.hs.neat:(10,9)-(16,14), AnnOpenP),
   [Haskell.hs.neat:10:9]),
  ((Haskell.hs.neat:11:3-34, AnnAt), [Haskell.hs.neat:11:9]),
  ((Haskell.hs.neat:(11,3)-(16,13), AnnIn),
   [Haskell.hs.neat:11:26-27]),
  ((Haskell.hs.neat:(11,3)-(16,13), AnnLet),
   [Haskell.hs.neat:11:3-5]),
  ((Haskell.hs.neat:(11,5)-(14,10), AnnVal),
   [Haskell.hs.neat:11:8-9]),
  ((Haskell.hs.neat:(11,5)-(15,6), AnnVal),
   [Haskell.hs.neat:14:12-13]),
  ((Haskell.hs.neat:11:7-24, AnnEqual), [Haskell.hs.neat:11:10]),
  ((Haskell.hs.neat:11:7-24, AnnFunId), [Haskell.hs.neat:11:7-8]),
  ((Haskell.hs.neat:11:11-34, AnnCloseP), [Haskell.hs.neat:11:34]),
  ((Haskell.hs.neat:11:11-34, AnnOpenP), [Haskell.hs.neat:11:11]),
  ((Haskell.hs.neat:(11,11)-(14,10), AnnCloseP),
   [Haskell.hs.neat:14:10]),
  ((Haskell.hs.neat:(11,11)-(14,10), AnnOpenP),
   [Haskell.hs.neat:11:11]),
  ((Haskell.hs.neat:11:17-24, AnnCloseP), [Haskell.hs.neat:11:24]),
  ((Haskell.hs.neat:11:17-24, AnnOpenP), [Haskell.hs.neat:11:17]),
  ((Haskell.hs.neat:(11,39)-(15,7), AnnCloseP),
   [Haskell.hs.neat:15:7]),
  ((Haskell.hs.neat:(11,39)-(15,7), AnnLam),
   [Haskell.hs.neat:13:19]),
  ((Haskell.hs.neat:(11,39)-(15,7), AnnOpenP),
   [Haskell.hs.neat:11:39]),
  ((Haskell.hs.neat:(11,39)-(15,7), AnnRarrow),
   [Haskell.hs.neat:11:36-37]),
  ((Haskell.hs.neat:(11,39)-(15,7), AnnVal),
   [Haskell.hs.neat:13:15-17]),
  ((Haskell.hs.neat:(12,5)-(16,13), AnnElse),
   [Haskell.hs.neat:16:7-10]),
  ((Haskell.hs.neat:(12,5)-(16,13), AnnIf),
   [Haskell.hs.neat:12:5-6]),
  ((Haskell.hs.neat:(12,5)-(16,13), AnnThen),
   [Haskell.hs.neat:13:7-10]),
  ((Haskell.hs.neat:12:8-19, AnnCloseP), [Haskell.hs.neat:12:19]),
  ((Haskell.hs.neat:12:8-19, AnnOpenP), [Haskell.hs.neat:12:8]),
  ((Haskell.hs.neat:12:9-18, AnnVal), [Haskell.hs.neat:12:13]),
  ((Haskell.hs.neat:13:5-15, AnnCloseP), [Haskell.hs.neat:13:15]),
  ((Haskell.hs.neat:13:5-15, AnnOpenP), [Haskell.hs.neat:13:5]),
  ((Haskell.hs.neat:13:5-20, AnnSemi), [Haskell.hs.neat:14:5]),
  ((Haskell.hs.neat:(13,5)-(14,10), AnnCase),
   [Haskell.hs.neat:13:7-10]),
  ((Haskell.hs.neat:(13,5)-(14,10), AnnOf),
   [Haskell.hs.neat:13:22-23]),
  ((Haskell.hs.neat:13:7-29, AnnVal), [Haskell.hs.neat:13:22-23]),
  ((Haskell.hs.neat:13:9-20, AnnCloseP), [Haskell.hs.neat:13:9]),
  ((Haskell.hs.neat:13:9-20, AnnOpenP), [Haskell.hs.neat:13:20]),
  ((Haskell.hs.neat:13:9-20, AnnRarrow), [Haskell.hs.neat:13:17-18]),
  ((Haskell.hs.neat:13:12-20, AnnCloseP), [Haskell.hs.neat:13:20]),
  ((Haskell.hs.neat:13:12-20, AnnOpenP), [Haskell.hs.neat:13:12]),
  ((Haskell.hs.neat:13:14-19, AnnCloseP), [Haskell.hs.neat:13:19]),
  ((Haskell.hs.neat:13:14-19, AnnOpenP), [Haskell.hs.neat:13:14]),
  ((Haskell.hs.neat:13:14-23, AnnCloseP), [Haskell.hs.neat:13:23]),
  ((Haskell.hs.neat:13:14-23, AnnOpenP), [Haskell.hs.neat:13:14]),
  ((Haskell.hs.neat:13:20-29, AnnCloseP), [Haskell.hs.neat:13:20]),
  ((Haskell.hs.neat:13:20-29, AnnOpenP), [Haskell.hs.neat:13:29]),
  ((Haskell.hs.neat:13:20-29, AnnVal), [Haskell.hs.neat:13:26-27]),
  ((Haskell.hs.neat:13:21-24, AnnCloseP), [Haskell.hs.neat:13:24]),
  ((Haskell.hs.neat:13:21-24, AnnOpenP), [Haskell.hs.neat:13:21]),
  ((Haskell.hs.neat:14:7-10, AnnRarrow), [Haskell.hs.neat:14:7-8]),
  ((Haskell.hs.neat:14:7-21, AnnVal), [Haskell.hs.neat:14:23-24]),
  ((Haskell.hs.neat:14:9-10, AnnCloseP), [Haskell.hs.neat:14:9]),
  ((Haskell.hs.neat:14:9-10, AnnOpenP), [Haskell.hs.neat:14:10]),
  ((Haskell.hs.neat:14:11-21, AnnCloseP), [Haskell.hs.neat:14:21]),
  ((Haskell.hs.neat:14:11-21, AnnOpenP), [Haskell.hs.neat:14:11]),
  ((Haskell.hs.neat:14:14-20, AnnCloseP), [Haskell.hs.neat:14:20]),
  ((Haskell.hs.neat:14:14-20, AnnOpenP), [Haskell.hs.neat:14:14]),
  ((Haskell.hs.neat:16:12-13, AnnCloseS), [Haskell.hs.neat:16:13]),
  ((Haskell.hs.neat:16:12-13, AnnOpenS), [Haskell.hs.neat:16:12]),
  ((Haskell.hs.neat:(19,1)-(20,26), AnnInstance),
   [Haskell.hs.neat:19:1-8]),
  ((Haskell.hs.neat:(19,1)-(20,26), AnnSemi),
   [Haskell.hs.neat:22:1]),
  ((Haskell.hs.neat:(19,1)-(20,26), AnnWhere),
   [Haskell.hs.neat:19:23-27]),
  ((Haskell.hs.neat:20:2-26, AnnEqual), [Haskell.hs.neat:20:24]),
  ((Haskell.hs.neat:20:2-26, AnnFunId), [Haskell.hs.neat:20:2-7]),
  ((Haskell.hs.neat:20:3-39, AnnVal),
   [Haskell.hs.neat:20:7-8, Haskell.hs.neat:20:41-42]),
  ((Haskell.hs.neat:20:6-26, AnnCloseP), [Haskell.hs.neat:20:6]),
  ((Haskell.hs.neat:20:6-26, AnnOpenP), [Haskell.hs.neat:20:26]),
  ((Haskell.hs.neat:20:9-22, AnnCloseP), [Haskell.hs.neat:20:22]),
  ((Haskell.hs.neat:20:9-22, AnnOpenP), [Haskell.hs.neat:20:9]),
  ((Haskell.hs.neat:20:10-38, AnnCloseP), [Haskell.hs.neat:20:38]),
  ((Haskell.hs.neat:20:10-38, AnnOpenP), [Haskell.hs.neat:20:10]),
  ((Haskell.hs.neat:20:10-39, AnnCloseP), [Haskell.hs.neat:20:39]),
  ((Haskell.hs.neat:20:10-39, AnnOpenP), [Haskell.hs.neat:20:10]),
  ((Haskell.hs.neat:20:11-28, AnnVal), [Haskell.hs.neat:20:16]),
  ((Haskell.hs.neat:20:11-37, AnnVal), [Haskell.hs.neat:20:30]),
  ((Haskell.hs.neat:(22,1)-(28,5), AnnInstance),
   [Haskell.hs.neat:22:1-8]),
  ((Haskell.hs.neat:(22,1)-(28,5), AnnSemi), [Haskell.hs.neat:31:1]),
  ((Haskell.hs.neat:(22,1)-(28,5), AnnWhere),
   [Haskell.hs.neat:22:23-27]),
  ((Haskell.hs.neat:(23,2)-(28,5), AnnEqual),
   [Haskell.hs.neat:23:42]),
  ((Haskell.hs.neat:(23,2)-(28,5), AnnFunId),
   [Haskell.hs.neat:23:2-7]),
  ((Haskell.hs.neat:(23,3)-(27,9), AnnVal),
   [Haskell.hs.neat:23:6-7]),
  ((Haskell.hs.neat:(23,3)-(28,4), AnnVal),
   [Haskell.hs.neat:27:11-12]),
  ((Haskell.hs.neat:23:9-40, AnnAt), [Haskell.hs.neat:23:15]),
  ((Haskell.hs.neat:(23,9)-(27,9), AnnCloseP),
   [Haskell.hs.neat:27:9]),
  ((Haskell.hs.neat:(23,9)-(27,9), AnnOpenP),
   [Haskell.hs.neat:23:9]),
  ((Haskell.hs.neat:23:17-40, AnnCloseP), [Haskell.hs.neat:23:40]),
  ((Haskell.hs.neat:23:17-40, AnnOpenP), [Haskell.hs.neat:23:17]),
  ((Haskell.hs.neat:(23,44)-(28,5), AnnCloseP),
   [Haskell.hs.neat:28:5]),
  ((Haskell.hs.neat:(23,44)-(28,5), AnnOpenP),
   [Haskell.hs.neat:23:44]),
  ((Haskell.hs.neat:25:3-24, AnnCloseP), [Haskell.hs.neat:25:24]),
  ((Haskell.hs.neat:25:3-24, AnnOpenP), [Haskell.hs.neat:25:3]),
  ((Haskell.hs.neat:25:3-29, AnnSemi), [Haskell.hs.neat:26:3]),
  ((Haskell.hs.neat:(25,3)-(27,8), AnnCase),
   [Haskell.hs.neat:25:5-8]),
  ((Haskell.hs.neat:(25,3)-(27,8), AnnOf),
   [Haskell.hs.neat:25:18-19]),
  ((Haskell.hs.neat:25:5-30, AnnVal), [Haskell.hs.neat:25:23-24]),
  ((Haskell.hs.neat:25:7-29, AnnCloseP), [Haskell.hs.neat:25:7]),
  ((Haskell.hs.neat:25:7-29, AnnOpenP), [Haskell.hs.neat:25:29]),
  ((Haskell.hs.neat:25:7-29, AnnRarrow), [Haskell.hs.neat:25:26-27]),
  ((Haskell.hs.neat:25:10-16, AnnCloseP), [Haskell.hs.neat:25:16]),
  ((Haskell.hs.neat:25:10-16, AnnOpenP), [Haskell.hs.neat:25:10]),
  ((Haskell.hs.neat:25:12-20, AnnCloseP), [Haskell.hs.neat:25:20]),
  ((Haskell.hs.neat:25:12-20, AnnOpenP), [Haskell.hs.neat:25:12]),
  ((Haskell.hs.neat:25:12-23, AnnCloseP), [Haskell.hs.neat:25:23]),
  ((Haskell.hs.neat:25:12-23, AnnOpenP), [Haskell.hs.neat:25:12]),
  ((Haskell.hs.neat:25:21-30, AnnCloseP), [Haskell.hs.neat:25:21]),
  ((Haskell.hs.neat:25:21-30, AnnOpenP), [Haskell.hs.neat:25:30]),
  ((Haskell.hs.neat:26:3-20, AnnCloseP), [Haskell.hs.neat:26:20]),
  ((Haskell.hs.neat:26:3-20, AnnOpenP), [Haskell.hs.neat:26:3]),
  ((Haskell.hs.neat:26:3-25, AnnSemi), [Haskell.hs.neat:27:3]),
  ((Haskell.hs.neat:26:5-27, AnnVal), [Haskell.hs.neat:26:23-24]),
  ((Haskell.hs.neat:26:7-25, AnnCloseP), [Haskell.hs.neat:26:7]),
  ((Haskell.hs.neat:26:7-25, AnnOpenP), [Haskell.hs.neat:26:25]),
  ((Haskell.hs.neat:26:7-25, AnnRarrow), [Haskell.hs.neat:26:22-23]),
  ((Haskell.hs.neat:26:12-19, AnnCloseP), [Haskell.hs.neat:26:19]),
  ((Haskell.hs.neat:26:12-19, AnnOpenP), [Haskell.hs.neat:26:12]),
  ((Haskell.hs.neat:26:12-20, AnnCloseP), [Haskell.hs.neat:26:20]),
  ((Haskell.hs.neat:26:12-20, AnnOpenP), [Haskell.hs.neat:26:12]),
  ((Haskell.hs.neat:26:12-21, AnnCloseP), [Haskell.hs.neat:26:21]),
  ((Haskell.hs.neat:26:12-21, AnnOpenP), [Haskell.hs.neat:26:12]),
  ((Haskell.hs.neat:26:21-27, AnnCloseP), [Haskell.hs.neat:26:21]),
  ((Haskell.hs.neat:26:21-27, AnnOpenP), [Haskell.hs.neat:26:27]),
  ((Haskell.hs.neat:26:21-27, AnnVal), [Haskell.hs.neat:26:24-25]),
  ((Haskell.hs.neat:26:22-26, AnnCloseP), [Haskell.hs.neat:26:22]),
  ((Haskell.hs.neat:26:22-26, AnnOpenP), [Haskell.hs.neat:26:26]),
  ((Haskell.hs.neat:27:5-8, AnnRarrow), [Haskell.hs.neat:27:5-6]),
  ((Haskell.hs.neat:27:5-22, AnnVal), [Haskell.hs.neat:27:9-10]),
  ((Haskell.hs.neat:27:5-27, AnnVal),
   [Haskell.hs.neat:27:24-25, Haskell.hs.neat:27:23-24]),
  ((Haskell.hs.neat:27:8, AnnCloseP), [Haskell.hs.neat:27:8]),
  ((Haskell.hs.neat:27:8, AnnOpenP), [Haskell.hs.neat:27:8]),
  ((Haskell.hs.neat:27:12-20, AnnCloseP), [Haskell.hs.neat:27:20]),
  ((Haskell.hs.neat:27:12-20, AnnOpenP), [Haskell.hs.neat:27:12]),
  ((Haskell.hs.neat:27:12-21, AnnCloseP), [Haskell.hs.neat:27:21]),
  ((Haskell.hs.neat:27:12-21, AnnOpenP), [Haskell.hs.neat:27:12]),
  ((Haskell.hs.neat:27:12-22, AnnCloseP), [Haskell.hs.neat:27:22]),
  ((Haskell.hs.neat:27:12-22, AnnOpenP), [Haskell.hs.neat:27:12]),
  ((Haskell.hs.neat:27:21-27, AnnCloseP), [Haskell.hs.neat:27:21]),
  ((Haskell.hs.neat:27:21-27, AnnOpenP), [Haskell.hs.neat:27:27]),
  ((Haskell.hs.neat:(31,1)-(32,32), AnnInstance),
   [Haskell.hs.neat:31:1-8]),
  ((Haskell.hs.neat:(31,1)-(32,32), AnnSemi),
   [Haskell.hs.neat:34:1]),
  ((Haskell.hs.neat:(31,1)-(32,32), AnnWhere),
   [Haskell.hs.neat:31:22-26]),
  ((Haskell.hs.neat:32:2-32, AnnEqual), [Haskell.hs.neat:32:30]),
  ((Haskell.hs.neat:32:2-32, AnnFunId), [Haskell.hs.neat:32:2-7]),
  ((Haskell.hs.neat:32:3-33, AnnVal),
   [Haskell.hs.neat:32:21-22, Haskell.hs.neat:32:10-11]),
  ((Haskell.hs.neat:32:9-28, AnnCloseP), [Haskell.hs.neat:32:28]),
  ((Haskell.hs.neat:32:9-28, AnnOpenP), [Haskell.hs.neat:32:9]),
  ((Haskell.hs.neat:32:10-16, AnnCloseP), [Haskell.hs.neat:32:16]),
  ((Haskell.hs.neat:32:10-16, AnnOpenP), [Haskell.hs.neat:32:10]),
  ((Haskell.hs.neat:32:10-18, AnnCloseP), [Haskell.hs.neat:32:18]),
  ((Haskell.hs.neat:32:10-18, AnnOpenP), [Haskell.hs.neat:32:10]),
  ((Haskell.hs.neat:32:13-17, AnnCloseP), [Haskell.hs.neat:32:17]),
  ((Haskell.hs.neat:32:13-17, AnnOpenP), [Haskell.hs.neat:32:13]),
  ((Haskell.hs.neat:32:18-32, AnnCloseP), [Haskell.hs.neat:32:18]),
  ((Haskell.hs.neat:32:18-32, AnnOpenP), [Haskell.hs.neat:32:32]),
  ((Haskell.hs.neat:32:19-33, AnnCloseP), [Haskell.hs.neat:32:19]),
  ((Haskell.hs.neat:32:19-33, AnnOpenP), [Haskell.hs.neat:32:33]),
  ((Haskell.hs.neat:(34,1)-(35,32), AnnInstance),
   [Haskell.hs.neat:34:1-8]),
  ((Haskell.hs.neat:(34,1)-(35,32), AnnSemi),
   [Haskell.hs.neat:39:1]),
  ((Haskell.hs.neat:(34,1)-(35,32), AnnWhere),
   [Haskell.hs.neat:34:26-30]),
  ((Haskell.hs.neat:35:2-32, AnnEqual), [Haskell.hs.neat:35:30]),
  ((Haskell.hs.neat:35:2-32, AnnFunId), [Haskell.hs.neat:35:2-7]),
  ((Haskell.hs.neat:35:3-18, AnnVal),
   [Haskell.hs.neat:35:15-16, Haskell.hs.neat:35:18-19]),
  ((Haskell.hs.neat:35:3-24, AnnVal),
   [Haskell.hs.neat:35:7-8, Haskell.hs.neat:35:26-27]),
  ((Haskell.hs.neat:35:9-28, AnnCloseP), [Haskell.hs.neat:35:28]),
  ((Haskell.hs.neat:35:9-28, AnnOpenP), [Haskell.hs.neat:35:9]),
  ((Haskell.hs.neat:35:10-15, AnnCloseP), [Haskell.hs.neat:35:15]),
  ((Haskell.hs.neat:35:10-15, AnnOpenP), [Haskell.hs.neat:35:10]),
  ((Haskell.hs.neat:35:10-23, AnnCloseP), [Haskell.hs.neat:35:23]),
  ((Haskell.hs.neat:35:10-23, AnnOpenP), [Haskell.hs.neat:35:10]),
  ((Haskell.hs.neat:35:10-24, AnnCloseP), [Haskell.hs.neat:35:24]),
  ((Haskell.hs.neat:35:10-24, AnnOpenP), [Haskell.hs.neat:35:10]),
  ((Haskell.hs.neat:35:11-22, AnnVal), [Haskell.hs.neat:35:17]),
  ((Haskell.hs.neat:35:11-32, AnnCloseP), [Haskell.hs.neat:35:11]),
  ((Haskell.hs.neat:35:11-32, AnnOpenP), [Haskell.hs.neat:35:32]),
  ((Haskell.hs.neat:35:16-18, AnnCloseP), [Haskell.hs.neat:35:16]),
  ((Haskell.hs.neat:35:16-18, AnnOpenP), [Haskell.hs.neat:35:18]),
  ((Haskell.hs.neat:(39,1)-(40,49), AnnInstance),
   [Haskell.hs.neat:39:1-8]),
  ((Haskell.hs.neat:(39,1)-(40,49), AnnSemi),
   [Haskell.hs.neat:42:1]),
  ((Haskell.hs.neat:(39,1)-(40,49), AnnWhere),
   [Haskell.hs.neat:39:26-30]),
  ((Haskell.hs.neat:40:2-49, AnnEqual), [Haskell.hs.neat:40:47]),
  ((Haskell.hs.neat:40:2-49, AnnFunId), [Haskell.hs.neat:40:2-7]),
  ((Haskell.hs.neat:40:9-45, AnnCloseP), [Haskell.hs.neat:40:45]),
  ((Haskell.hs.neat:40:9-45, AnnOpenP), [Haskell.hs.neat:40:9]),
  ((Haskell.hs.neat:40:10-15, AnnCloseP), [Haskell.hs.neat:40:15]),
  ((Haskell.hs.neat:40:10-15, AnnOpenP), [Haskell.hs.neat:40:10]),
  ((Haskell.hs.neat:40:10-18, AnnCloseP), [Haskell.hs.neat:40:18]),
  ((Haskell.hs.neat:40:10-18, AnnOpenP), [Haskell.hs.neat:40:10]),
  ((Haskell.hs.neat:40:16-50, AnnCloseP), [Haskell.hs.neat:40:16]),
  ((Haskell.hs.neat:40:16-50, AnnOpenP), [Haskell.hs.neat:40:50]),
  ((Haskell.hs.neat:40:16-50, AnnVal), [Haskell.hs.neat:40:18-19]),
  ((Haskell.hs.neat:40:19-21, AnnCloseP), [Haskell.hs.neat:40:19]),
  ((Haskell.hs.neat:40:19-21, AnnOpenP), [Haskell.hs.neat:40:21]),
  ((Haskell.hs.neat:40:20-49, AnnCloseP), [Haskell.hs.neat:40:20]),
  ((Haskell.hs.neat:40:20-49, AnnOpenP), [Haskell.hs.neat:40:49]),
  ((Haskell.hs.neat:40:26-44, AnnCloseP), [Haskell.hs.neat:40:44]),
  ((Haskell.hs.neat:40:26-44, AnnOpenP), [Haskell.hs.neat:40:26]),
  ((Haskell.hs.neat:(42,1)-(43,37), AnnInstance),
   [Haskell.hs.neat:42:1-8]),
  ((Haskell.hs.neat:(42,1)-(43,37), AnnSemi),
   [Haskell.hs.neat:45:1]),
  ((Haskell.hs.neat:(42,1)-(43,37), AnnWhere),
   [Haskell.hs.neat:42:23-27]),
  ((Haskell.hs.neat:43:2-37, AnnEqual), [Haskell.hs.neat:43:35]),
  ((Haskell.hs.neat:43:2-37, AnnFunId), [Haskell.hs.neat:43:2-7]),
  ((Haskell.hs.neat:43:3-43, AnnVal),
   [Haskell.hs.neat:43:7-8, Haskell.hs.neat:43:45-46]),
  ((Haskell.hs.neat:43:6-37, AnnCloseP), [Haskell.hs.neat:43:6]),
  ((Haskell.hs.neat:43:6-37, AnnOpenP), [Haskell.hs.neat:43:37]),
  ((Haskell.hs.neat:43:9-33, AnnCloseP), [Haskell.hs.neat:43:33]),
  ((Haskell.hs.neat:43:9-33, AnnOpenP), [Haskell.hs.neat:43:9]),
  ((Haskell.hs.neat:43:10-42, AnnCloseP), [Haskell.hs.neat:43:42]),
  ((Haskell.hs.neat:43:10-42, AnnOpenP), [Haskell.hs.neat:43:10]),
  ((Haskell.hs.neat:43:10-43, AnnCloseP), [Haskell.hs.neat:43:43]),
  ((Haskell.hs.neat:43:10-43, AnnOpenP), [Haskell.hs.neat:43:10]),
  ((Haskell.hs.neat:43:11-30, AnnVal), [Haskell.hs.neat:43:22]),
  ((Haskell.hs.neat:43:11-41, AnnVal), [Haskell.hs.neat:43:32]),
  ((Haskell.hs.neat:(45,1)-(46,38), AnnInstance),
   [Haskell.hs.neat:45:1-8]),
  ((Haskell.hs.neat:(45,1)-(46,38), AnnSemi),
   [Haskell.hs.neat:48:1]),
  ((Haskell.hs.neat:(45,1)-(46,38), AnnWhere),
   [Haskell.hs.neat:45:25-29]),
  ((Haskell.hs.neat:46:2-38, AnnEqual), [Haskell.hs.neat:46:36]),
  ((Haskell.hs.neat:46:2-38, AnnFunId), [Haskell.hs.neat:46:2-7]),
  ((Haskell.hs.neat:46:9-34, AnnCloseP), [Haskell.hs.neat:46:34]),
  ((Haskell.hs.neat:46:9-34, AnnOpenP), [Haskell.hs.neat:46:9]),
  ((Haskell.hs.neat:46:10-18, AnnCloseP), [Haskell.hs.neat:46:18]),
  ((Haskell.hs.neat:46:10-18, AnnOpenP), [Haskell.hs.neat:46:10]),
  ((Haskell.hs.neat:46:10-19, AnnCloseP), [Haskell.hs.neat:46:19]),
  ((Haskell.hs.neat:46:10-19, AnnOpenP), [Haskell.hs.neat:46:10]),
  ((Haskell.hs.neat:46:19-25, AnnCloseP), [Haskell.hs.neat:46:19]),
  ((Haskell.hs.neat:46:19-25, AnnOpenP), [Haskell.hs.neat:46:25]),
  ((Haskell.hs.neat:46:19-39, AnnVal), [Haskell.hs.neat:46:22-23]),
  ((Haskell.hs.neat:46:20-38, AnnCloseP), [Haskell.hs.neat:46:20]),
  ((Haskell.hs.neat:46:20-38, AnnOpenP), [Haskell.hs.neat:46:38]),
  ((Haskell.hs.neat:46:20-39, AnnCloseP), [Haskell.hs.neat:46:20]),
  ((Haskell.hs.neat:46:20-39, AnnOpenP), [Haskell.hs.neat:46:39]),
  ((Haskell.hs.neat:(48,1)-(74,33), AnnInstance),
   [Haskell.hs.neat:48:1-8]),
  ((Haskell.hs.neat:(48,1)-(74,33), AnnSemi),
   [Haskell.hs.neat:77:1]),
  ((Haskell.hs.neat:(48,1)-(74,33), AnnWhere),
   [Haskell.hs.neat:48:25-29]),
  ((Haskell.hs.neat:49:2-26, AnnEqual), [Haskell.hs.neat:49:24]),
  ((Haskell.hs.neat:49:2-26, AnnFunId), [Haskell.hs.neat:49:2-7]),
  ((Haskell.hs.neat:49:2-26, AnnSemi), [Haskell.hs.neat:50:2]),
  ((Haskell.hs.neat:49:3-17, AnnVal), [Haskell.hs.neat:49:13-14]),
  ((Haskell.hs.neat:49:9-22, AnnCloseP), [Haskell.hs.neat:49:22]),
  ((Haskell.hs.neat:49:9-22, AnnOpenP), [Haskell.hs.neat:49:9]),
  ((Haskell.hs.neat:49:10-16, AnnCloseP), [Haskell.hs.neat:49:16]),
  ((Haskell.hs.neat:49:10-16, AnnOpenP), [Haskell.hs.neat:49:10]),
  ((Haskell.hs.neat:49:16-17, AnnCloseP), [Haskell.hs.neat:49:17]),
  ((Haskell.hs.neat:49:16-17, AnnOpenP), [Haskell.hs.neat:49:16]),
  ((Haskell.hs.neat:49:18-26, AnnCloseP), [Haskell.hs.neat:49:18]),
  ((Haskell.hs.neat:49:18-26, AnnOpenP), [Haskell.hs.neat:49:26]),
  ((Haskell.hs.neat:50:2-29, AnnEqual), [Haskell.hs.neat:50:27]),
  ((Haskell.hs.neat:50:2-29, AnnFunId), [Haskell.hs.neat:50:2-7]),
  ((Haskell.hs.neat:50:2-29, AnnSemi), [Haskell.hs.neat:51:2]),
  ((Haskell.hs.neat:50:3-30, AnnVal),
   [Haskell.hs.neat:50:17-18, Haskell.hs.neat:50:7-8,
    Haskell.hs.neat:50:21-22, Haskell.hs.neat:50:7-8]),
  ((Haskell.hs.neat:50:9-25, AnnCloseP), [Haskell.hs.neat:50:25]),
  ((Haskell.hs.neat:50:9-25, AnnOpenP), [Haskell.hs.neat:50:9]),
  ((Haskell.hs.neat:50:10-14, AnnCloseP),
   [Haskell.hs.neat:50:14, Haskell.hs.neat:50:14]),
  ((Haskell.hs.neat:50:10-14, AnnOpenP),
   [Haskell.hs.neat:50:10, Haskell.hs.neat:50:10]),
  ((Haskell.hs.neat:50:10-15, AnnCloseP), [Haskell.hs.neat:50:15]),
  ((Haskell.hs.neat:50:10-15, AnnOpenP), [Haskell.hs.neat:50:10]),
  ((Haskell.hs.neat:50:10-18, AnnCloseP), [Haskell.hs.neat:50:18]),
  ((Haskell.hs.neat:50:10-18, AnnOpenP), [Haskell.hs.neat:50:10]),
  ((Haskell.hs.neat:50:10-19, AnnCloseP), [Haskell.hs.neat:50:19]),
  ((Haskell.hs.neat:50:10-19, AnnOpenP), [Haskell.hs.neat:50:10]),
  ((Haskell.hs.neat:50:15-30, AnnCloseP), [Haskell.hs.neat:50:15]),
  ((Haskell.hs.neat:50:15-30, AnnOpenP), [Haskell.hs.neat:50:30]),
  ((Haskell.hs.neat:50:16-29, AnnCloseP), [Haskell.hs.neat:50:16]),
  ((Haskell.hs.neat:50:16-29, AnnOpenP), [Haskell.hs.neat:50:29]),
  ((Haskell.hs.neat:51:2-35, AnnEqual), [Haskell.hs.neat:51:33]),
  ((Haskell.hs.neat:51:2-35, AnnFunId), [Haskell.hs.neat:51:2-7]),
  ((Haskell.hs.neat:51:2-35, AnnSemi), [Haskell.hs.neat:52:2]),
  ((Haskell.hs.neat:51:3-36, AnnVal),
   [Haskell.hs.neat:51:22-23, Haskell.hs.neat:51:9-10]),
  ((Haskell.hs.neat:51:9-31, AnnCloseP), [Haskell.hs.neat:51:31]),
  ((Haskell.hs.neat:51:9-31, AnnOpenP), [Haskell.hs.neat:51:9]),
  ((Haskell.hs.neat:51:10-16, AnnCloseP), [Haskell.hs.neat:51:16]),
  ((Haskell.hs.neat:51:10-16, AnnOpenP), [Haskell.hs.neat:51:10]),
  ((Haskell.hs.neat:51:10-19, AnnCloseP), [Haskell.hs.neat:51:19]),
  ((Haskell.hs.neat:51:10-19, AnnOpenP), [Haskell.hs.neat:51:10]),
  ((Haskell.hs.neat:51:12-17, AnnCloseP), [Haskell.hs.neat:51:17]),
  ((Haskell.hs.neat:51:12-17, AnnOpenP), [Haskell.hs.neat:51:12]),
  ((Haskell.hs.neat:51:18-35, AnnCloseP), [Haskell.hs.neat:51:18]),
  ((Haskell.hs.neat:51:18-35, AnnOpenP), [Haskell.hs.neat:51:35]),
  ((Haskell.hs.neat:51:20-36, AnnCloseP), [Haskell.hs.neat:51:20]),
  ((Haskell.hs.neat:51:20-36, AnnOpenP), [Haskell.hs.neat:51:36]),
  ((Haskell.hs.neat:52:2-32, AnnEqual), [Haskell.hs.neat:52:30]),
  ((Haskell.hs.neat:52:2-32, AnnFunId), [Haskell.hs.neat:52:2-7]),
  ((Haskell.hs.neat:52:2-32, AnnSemi), [Haskell.hs.neat:54:2]),
  ((Haskell.hs.neat:52:3-33, AnnVal),
   [Haskell.hs.neat:52:19-20, Haskell.hs.neat:52:7-8]),
  ((Haskell.hs.neat:52:9-28, AnnCloseP), [Haskell.hs.neat:52:28]),
  ((Haskell.hs.neat:52:9-28, AnnOpenP), [Haskell.hs.neat:52:9]),
  ((Haskell.hs.neat:52:10-16, AnnCloseP),
   [Haskell.hs.neat:52:16, Haskell.hs.neat:52:16]),
  ((Haskell.hs.neat:52:10-16, AnnOpenP),
   [Haskell.hs.neat:52:10, Haskell.hs.neat:52:10]),
  ((Haskell.hs.neat:52:10-17, AnnCloseP), [Haskell.hs.neat:52:17]),
  ((Haskell.hs.neat:52:10-17, AnnOpenP), [Haskell.hs.neat:52:10]),
  ((Haskell.hs.neat:52:17-33, AnnCloseP), [Haskell.hs.neat:52:17]),
  ((Haskell.hs.neat:52:17-33, AnnOpenP), [Haskell.hs.neat:52:33]),
  ((Haskell.hs.neat:52:18-32, AnnCloseP), [Haskell.hs.neat:52:18]),
  ((Haskell.hs.neat:52:18-32, AnnOpenP), [Haskell.hs.neat:52:32]),
  ((Haskell.hs.neat:(54,2)-(57,5), AnnEqual),
   [Haskell.hs.neat:54:51]),
  ((Haskell.hs.neat:(54,2)-(57,5), AnnFunId),
   [Haskell.hs.neat:54:2-7]),
  ((Haskell.hs.neat:(54,2)-(57,5), AnnSemi), [Haskell.hs.neat:60:2]),
  ((Haskell.hs.neat:54:3-23, AnnVal), [Haskell.hs.neat:54:20-21]),
  ((Haskell.hs.neat:54:3-49, AnnVal), [Haskell.hs.neat:54:19-20]),
  ((Haskell.hs.neat:(54,3)-(56,19), AnnVal),
   [Haskell.hs.neat:54:51-52, Haskell.hs.neat:56:21-22,
    Haskell.hs.neat:56:10-11, Haskell.hs.neat:56:19-20]),
  ((Haskell.hs.neat:(54,3)-(57,29), AnnVal),
   [Haskell.hs.neat:56:17-18, Haskell.hs.neat:57:31-32]),
  ((Haskell.hs.neat:54:9-49, AnnCloseP), [Haskell.hs.neat:54:49]),
  ((Haskell.hs.neat:54:9-49, AnnOpenP), [Haskell.hs.neat:54:9]),
  ((Haskell.hs.neat:54:10-16, AnnCloseP), [Haskell.hs.neat:54:16]),
  ((Haskell.hs.neat:54:10-16, AnnOpenP), [Haskell.hs.neat:54:10]),
  ((Haskell.hs.neat:54:14-36, AnnCloseP), [Haskell.hs.neat:54:36]),
  ((Haskell.hs.neat:54:14-36, AnnOpenP), [Haskell.hs.neat:54:14]),
  ((Haskell.hs.neat:54:17-23, AnnCloseP), [Haskell.hs.neat:54:17]),
  ((Haskell.hs.neat:54:17-23, AnnOpenP), [Haskell.hs.neat:54:23]),
  ((Haskell.hs.neat:(54,53)-(57,5), AnnCloseP),
   [Haskell.hs.neat:57:5]),
  ((Haskell.hs.neat:(54,53)-(57,5), AnnOpenP),
   [Haskell.hs.neat:54:53]),
  ((Haskell.hs.neat:(54,54)-(56,19), AnnCloseP),
   [Haskell.hs.neat:56:19]),
  ((Haskell.hs.neat:(54,54)-(56,19), AnnOpenP),
   [Haskell.hs.neat:54:54]),
  ((Haskell.hs.neat:56:10-16, AnnCloseP), [Haskell.hs.neat:56:16]),
  ((Haskell.hs.neat:56:10-16, AnnOpenP), [Haskell.hs.neat:56:10]),
  ((Haskell.hs.neat:56:10-18, AnnCloseP), [Haskell.hs.neat:56:18]),
  ((Haskell.hs.neat:56:10-18, AnnOpenP), [Haskell.hs.neat:56:10]),
  ((Haskell.hs.neat:56:13-17, AnnCloseP), [Haskell.hs.neat:56:17]),
  ((Haskell.hs.neat:56:13-17, AnnOpenP), [Haskell.hs.neat:56:13]),
  ((Haskell.hs.neat:(56,20)-(57,29), AnnCloseP),
   [Haskell.hs.neat:57:29]),
  ((Haskell.hs.neat:(56,20)-(57,29), AnnOpenP),
   [Haskell.hs.neat:56:20]),
  ((Haskell.hs.neat:57:10-28, AnnCloseP), [Haskell.hs.neat:57:28]),
  ((Haskell.hs.neat:57:10-28, AnnOpenP), [Haskell.hs.neat:57:10]),
  ((Haskell.hs.neat:(60,2)-(62,5), AnnEqual),
   [Haskell.hs.neat:60:32]),
  ((Haskell.hs.neat:(60,2)-(62,5), AnnFunId),
   [Haskell.hs.neat:60:2-7]),
  ((Haskell.hs.neat:(60,2)-(62,5), AnnSemi), [Haskell.hs.neat:65:2]),
  ((Haskell.hs.neat:60:3-25, AnnVal),
   [Haskell.hs.neat:60:22-23, Haskell.hs.neat:60:19-20]),
  ((Haskell.hs.neat:(60,3)-(61,17), AnnVal),
   [Haskell.hs.neat:60:15-16, Haskell.hs.neat:61:19-20]),
  ((Haskell.hs.neat:(60,3)-(62,29), AnnVal),
   [Haskell.hs.neat:61:15-16, Haskell.hs.neat:62:31-32]),
  ((Haskell.hs.neat:60:9-30, AnnCloseP), [Haskell.hs.neat:60:30]),
  ((Haskell.hs.neat:60:9-30, AnnOpenP), [Haskell.hs.neat:60:9]),
  ((Haskell.hs.neat:60:10-16, AnnCloseP), [Haskell.hs.neat:60:16]),
  ((Haskell.hs.neat:60:10-16, AnnOpenP), [Haskell.hs.neat:60:10]),
  ((Haskell.hs.neat:60:17-25, AnnCloseP), [Haskell.hs.neat:60:17]),
  ((Haskell.hs.neat:60:17-25, AnnOpenP), [Haskell.hs.neat:60:25]),
  ((Haskell.hs.neat:(60,18)-(61,17), AnnCloseP),
   [Haskell.hs.neat:61:17]),
  ((Haskell.hs.neat:(60,18)-(61,17), AnnOpenP),
   [Haskell.hs.neat:60:18]),
  ((Haskell.hs.neat:(60,34)-(62,5), AnnCloseP),
   [Haskell.hs.neat:62:5]),
  ((Haskell.hs.neat:(60,34)-(62,5), AnnOpenP),
   [Haskell.hs.neat:60:34]),
  ((Haskell.hs.neat:61:10-16, AnnCloseP), [Haskell.hs.neat:61:16]),
  ((Haskell.hs.neat:61:10-16, AnnOpenP), [Haskell.hs.neat:61:10]),
  ((Haskell.hs.neat:(61,18)-(62,29), AnnCloseP),
   [Haskell.hs.neat:62:29]),
  ((Haskell.hs.neat:(61,18)-(62,29), AnnOpenP),
   [Haskell.hs.neat:61:18]),
  ((Haskell.hs.neat:62:10-28, AnnCloseP), [Haskell.hs.neat:62:28]),
  ((Haskell.hs.neat:62:10-28, AnnOpenP), [Haskell.hs.neat:62:10]),
  ((Haskell.hs.neat:(65,2)-(67,5), AnnEqual),
   [Haskell.hs.neat:65:36]),
  ((Haskell.hs.neat:(65,2)-(67,5), AnnFunId),
   [Haskell.hs.neat:65:2-7]),
  ((Haskell.hs.neat:(65,2)-(67,5), AnnSemi), [Haskell.hs.neat:70:2]),
  ((Haskell.hs.neat:(65,3)-(66,17), AnnVal),
   [Haskell.hs.neat:65:15-16, Haskell.hs.neat:66:19-20,
    Haskell.hs.neat:66:10-11, Haskell.hs.neat:66:19-20]),
  ((Haskell.hs.neat:(65,3)-(68,12), AnnVal),
   [Haskell.hs.neat:66:7-8, Haskell.hs.neat:68:14-15]),
  ((Haskell.hs.neat:65:9-34, AnnCloseP), [Haskell.hs.neat:65:34]),
  ((Haskell.hs.neat:65:9-34, AnnOpenP), [Haskell.hs.neat:65:9]),
  ((Haskell.hs.neat:(65,18)-(66,17), AnnCloseP),
   [Haskell.hs.neat:66:17]),
  ((Haskell.hs.neat:(65,18)-(66,17), AnnOpenP),
   [Haskell.hs.neat:65:18]),
  ((Haskell.hs.neat:(65,38)-(67,5), AnnCloseP),
   [Haskell.hs.neat:67:5]),
  ((Haskell.hs.neat:(65,38)-(67,5), AnnOpenP),
   [Haskell.hs.neat:65:38]),
  ((Haskell.hs.neat:(66,3)-(68,11), AnnElse),
   [Haskell.hs.neat:68:5-8]),
  ((Haskell.hs.neat:(66,3)-(68,11), AnnIf),
   [Haskell.hs.neat:66:3-4]),
  ((Haskell.hs.neat:(66,3)-(68,11), AnnThen),
   [Haskell.hs.neat:67:5-8]),
  ((Haskell.hs.neat:(66,5)-(67,19), AnnVal),
   [Haskell.hs.neat:66:15-16]),
  ((Haskell.hs.neat:66:6-17, AnnCloseP), [Haskell.hs.neat:66:17]),
  ((Haskell.hs.neat:66:6-17, AnnOpenP), [Haskell.hs.neat:66:6]),
  ((Haskell.hs.neat:66:7-16, AnnVal), [Haskell.hs.neat:66:11]),
  ((Haskell.hs.neat:66:10-16, AnnCloseP),
   [Haskell.hs.neat:66:16, Haskell.hs.neat:66:16]),
  ((Haskell.hs.neat:66:10-16, AnnOpenP),
   [Haskell.hs.neat:66:10, Haskell.hs.neat:66:10]),
  ((Haskell.hs.neat:(66,10)-(68,12), AnnCloseP),
   [Haskell.hs.neat:68:12]),
  ((Haskell.hs.neat:(66,10)-(68,12), AnnOpenP),
   [Haskell.hs.neat:66:10]),
  ((Haskell.hs.neat:66:13-17, AnnCloseP), [Haskell.hs.neat:66:17]),
  ((Haskell.hs.neat:66:13-17, AnnOpenP), [Haskell.hs.neat:66:13]),
  ((Haskell.hs.neat:(66,18)-(67,19), AnnCloseP),
   [Haskell.hs.neat:67:19]),
  ((Haskell.hs.neat:(66,18)-(67,19), AnnOpenP),
   [Haskell.hs.neat:66:18]),
  ((Haskell.hs.neat:66:19-25, AnnCloseP), [Haskell.hs.neat:66:25]),
  ((Haskell.hs.neat:66:19-25, AnnOpenP), [Haskell.hs.neat:66:19]),
  ((Haskell.hs.neat:67:10-20, AnnCloseP), [Haskell.hs.neat:67:20]),
  ((Haskell.hs.neat:67:10-20, AnnOpenP), [Haskell.hs.neat:67:10]),
  ((Haskell.hs.neat:67:12-18, AnnCloseP), [Haskell.hs.neat:67:18]),
  ((Haskell.hs.neat:67:12-18, AnnOpenP), [Haskell.hs.neat:67:12]),
  ((Haskell.hs.neat:68:10-11, AnnCloseS), [Haskell.hs.neat:68:11]),
  ((Haskell.hs.neat:68:10-11, AnnOpenS), [Haskell.hs.neat:68:10]),
  ((Haskell.hs.neat:(70,2)-(71,5), AnnEqual),
   [Haskell.hs.neat:70:46]),
  ((Haskell.hs.neat:(70,2)-(71,5), AnnFunId),
   [Haskell.hs.neat:70:2-7]),
  ((Haskell.hs.neat:(70,2)-(71,5), AnnSemi), [Haskell.hs.neat:74:2]),
  ((Haskell.hs.neat:(70,3)-(71,17), AnnVal),
   [Haskell.hs.neat:70:15-16, Haskell.hs.neat:71:19-20]),
  ((Haskell.hs.neat:(70,3)-(71,19), AnnVal),
   [Haskell.hs.neat:71:10-11, Haskell.hs.neat:71:21-22,
    Haskell.hs.neat:71:10-11, Haskell.hs.neat:71:19-20]),
  ((Haskell.hs.neat:70:9-44, AnnCloseP), [Haskell.hs.neat:70:44]),
  ((Haskell.hs.neat:70:9-44, AnnOpenP), [Haskell.hs.neat:70:9]),
  ((Haskell.hs.neat:70:15-37, AnnCloseP), [Haskell.hs.neat:70:37]),
  ((Haskell.hs.neat:70:15-37, AnnOpenP), [Haskell.hs.neat:70:15]),
  ((Haskell.hs.neat:(70,18)-(71,17), AnnCloseP),
   [Haskell.hs.neat:71:17]),
  ((Haskell.hs.neat:(70,18)-(71,17), AnnOpenP),
   [Haskell.hs.neat:70:18]),
  ((Haskell.hs.neat:(70,48)-(71,5), AnnCloseP),
   [Haskell.hs.neat:71:5]),
  ((Haskell.hs.neat:(70,48)-(71,5), AnnOpenP),
   [Haskell.hs.neat:70:48]),
  ((Haskell.hs.neat:71:10-16, AnnCloseP),
   [Haskell.hs.neat:71:16, Haskell.hs.neat:71:16]),
  ((Haskell.hs.neat:71:10-16, AnnOpenP),
   [Haskell.hs.neat:71:10, Haskell.hs.neat:71:10]),
  ((Haskell.hs.neat:71:10-18, AnnCloseP), [Haskell.hs.neat:71:18]),
  ((Haskell.hs.neat:71:10-18, AnnOpenP), [Haskell.hs.neat:71:10]),
  ((Haskell.hs.neat:71:13-17, AnnCloseP), [Haskell.hs.neat:71:17]),
  ((Haskell.hs.neat:71:13-17, AnnOpenP), [Haskell.hs.neat:71:13]),
  ((Haskell.hs.neat:71:13-19, AnnCloseP), [Haskell.hs.neat:71:19]),
  ((Haskell.hs.neat:71:13-19, AnnOpenP), [Haskell.hs.neat:71:13]),
  ((Haskell.hs.neat:74:2-33, AnnEqual), [Haskell.hs.neat:74:21]),
  ((Haskell.hs.neat:74:2-33, AnnFunId), [Haskell.hs.neat:74:2-7]),
  ((Haskell.hs.neat:74:9-19, AnnCloseP), [Haskell.hs.neat:74:19]),
  ((Haskell.hs.neat:74:9-19, AnnOpenP), [Haskell.hs.neat:74:9]),
  ((Haskell.hs.neat:74:10-31, AnnCloseP), [Haskell.hs.neat:74:31]),
  ((Haskell.hs.neat:74:10-31, AnnOpenP), [Haskell.hs.neat:74:10]),
  ((Haskell.hs.neat:74:11-23, AnnVal), [Haskell.hs.neat:74:17]),
  ((Haskell.hs.neat:74:11-30, AnnVal), [Haskell.hs.neat:74:25]),
  ((Haskell.hs.neat:74:23-33, AnnCloseP), [Haskell.hs.neat:74:33]),
  ((Haskell.hs.neat:74:23-33, AnnOpenP), [Haskell.hs.neat:74:23]),
  ((Haskell.hs.neat:74:24-32, AnnCloseP), [Haskell.hs.neat:74:32]),
  ((Haskell.hs.neat:74:24-32, AnnOpenP), [Haskell.hs.neat:74:24]),
  ((Haskell.hs.neat:77:1-26, AnnDcolon), [Haskell.hs.neat:77:10-11]),
  ((Haskell.hs.neat:77:1-26, AnnSemi), [Haskell.hs.neat:78:1]),
  ((Haskell.hs.neat:77:13-26, AnnRarrow),
   [Haskell.hs.neat:77:18-19]),
  ((Haskell.hs.neat:78:1-17, AnnEqual), [Haskell.hs.neat:78:10]),
  ((Haskell.hs.neat:78:1-17, AnnFunId), [Haskell.hs.neat:78:1-8]),
  ((Haskell.hs.neat:78:1-17, AnnSemi), [Haskell.hs.neat:79:1]),
  ((<no location info>, AnnEofPos), [Haskell.hs.neat:79:1])],
 [(<no location info>,
   [AnnLineComment "-- Copyright 2014 Alvaro J. Genial [http://alva.ro]; see LICENSE file for more."])])