{-# LANGUAGE CPP, TemplateHaskell #-}
-----------------------------------------------------------------------------
{-|
Module      :  Main
Copyright   :
License     : GPL2

Maintainer  : msjean@gmx.de
Stability   : experimental
Portability : POSIX

This is the main entry point for the ArguEdit.bin executable.
Further entry points such as for testing purposes are also meant to be added here.
-}
--
--
--
-----------------------------------------------------------------------------

module Main (
    main
) where


import ArguEdit (start)

import Control.Monad (unless)
import Data.List (stripPrefix)
import System.Exit (exitFailure)
--import Test.QuickCheck.All (quickCheckAll)

-- Simple function to create a hello message.
--hello s = "Hello " ++ s

-- Tell QuickCheck that if you strip "Hello " from the start of
-- hello s you will be left with s (for any s).
--prop_hello s = stripPrefix "Hello " (hello s) == Just s

-- Hello World
exeMain = do
--    putStrLn (hello "World")
    ArguEdit.start

-- Entry point for unit tests.
--testMain = do
--    allPass <- $quickCheckAll -- Run QuickCheck on all prop_ functions
--    unless allPass exitFailure

-- This is a clunky, but portable, way to use the same Main module file
-- for both an application and for unit tests.
-- MAIN_FUNCTION is preprocessor macro set to exeMain or testMain.
-- That way we can use the same file for both an application and for tests.
#ifndef MAIN_FUNCTION
#define MAIN_FUNCTION exeMain
#endif
main = exeMainMAIN_FUNCTION


==============
../../hackage-packages/arguedit-0.1.0.1/src/Main.hs
==============
lengths:(1511,1504)

==============

({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:1:1 }
 Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,37)) "{-# LANGUAGE CPP, TemplateHaskell #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (12,3)) "{-|\nModule      :  Main\nCopyright   :\nLicense     : GPL2\n\nMaintainer  : msjean@gmx.de\nStability   : experimental\nPortability : POSIX\n\nThis is the main entry point for the ArguEdit.bin executable.\nFurther entry points such as for testing purposes are also meant to be added here.\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((G AnnModule),DP (19,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (0,-7),DP (0,6)) "MAIN_FUNCTION" Nothing),DP (0,-7)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((G AnnEofPos),DP (3,0))])
 (HsModule 
  (Just 
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:20:8-11 }
    Nothing{ModuleName: Main})) 
  (Just 
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(20,13)-(22,1) }
    Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (1,1))])
    [
     ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:21:5-8 }
      Just (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [] [])
      (IEVar 
       ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:21:5-8 }
        Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: main}))))])) 
  [
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:1-23 }
    Just (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:8-15 }
      Nothing{ModuleName: ArguEdit}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:17-23 }
        Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:18-22 }
          Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:18-22 }
            Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: start}))))]))))),
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:1-29 }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:8-20 }
      Nothing{ModuleName: Control.Monad}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:22-29 }
        Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:23-28 }
          Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:23-28 }
            Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: unless}))))]))))),
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:1-30 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:8-16 }
      Nothing{ModuleName: Data.List}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:18-30 }
        Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:19-29 }
          Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:19-29 }
            Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: stripPrefix}))))]))))),
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:1-32 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:8-18 }
      Nothing{ModuleName: System.Exit}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:20-32 }
        Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:21-31 }
          Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:21-31 }
            Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: exitFailure}))))])))))] 
  [
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18) }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (11,1) [DComment (DP (1,1),DP (1,45)) "--import Test.QuickCheck.All (quickCheckAll)" Nothing,DComment (DP (2,1),DP (2,46)) "-- Simple function to create a hello message." Nothing,DComment (DP (1,1),DP (1,26)) "--hello s = \"Hello \" ++ s" Nothing,DComment (DP (2,1),DP (2,64)) "-- Tell QuickCheck that if you strip \"Hello \" from the start of" Nothing,DComment (DP (1,1),DP (1,48)) "-- hello s you will be left with s (for any s)." Nothing,DComment (DP (1,1),DP (1,58)) "--prop_hello s = stripPrefix \"Hello \" (hello s) == Just s" Nothing,DComment (DP (2,1),DP (2,15)) "-- Hello World" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:1-7 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: exeMain})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18) }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:1-7 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: exeMain})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,9)-(42,18) }
             Just (Ann (DP (0,-1)) (ColDelta 9) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,11)-(42,18)
                }
               Just (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 Ref "delta-1"),DP (0,0))])
               (HsDo 
                (DoExpr) 
                [
                 ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 }
                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (HsVar 
                     (Qual {ModuleName: ArguEdit} {OccName: start}))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder)))] 
                (PlaceHolder)))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (14,1) [DComment (DP (2,1),DP (2,31)) "-- Entry point for unit tests." Nothing,DComment (DP (1,1),DP (1,16)) "--testMain = do" Nothing,DComment (DP (1,1),DP (1,73)) "--    allPass <- $quickCheckAll -- Run QuickCheck on all prop_ functions" Nothing,DComment (DP (1,1),DP (1,33)) "--    unless allPass exitFailure" Nothing,DComment (DP (2,1),DP (2,72)) "-- This is a clunky, but portable, way to use the same Main module file" Nothing,DComment (DP (1,1),DP (1,47)) "-- for both an application and for unit tests." Nothing,DComment (DP (1,1),DP (1,67)) "-- MAIN_FUNCTION is preprocessor macro set to exeMain or testMain." Nothing,DComment (DP (1,1),DP (1,76)) "-- That way we can use the same file for both an application and for tests." Nothing,DComment (DP (1,1),DP (1,21)) "#ifndef MAIN_FUNCTION" Nothing,DComment (DP (1,1),DP (1,29)) "#define MAIN_FUNCTION exeMain" Nothing,DComment (DP (1,1),DP (1,6)) "#endif" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-4 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: main})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14 }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-4 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: main})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:6-14 }
             Just (Ann (DP (0,-1)) (ColDelta 6) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:8-14 }
               Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsVar 
                (Unqual {OccName: exeMain})))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      [])))] 
  (Nothing) 
  (Nothing)))
==============
[(AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:1:1 CN "HsModule" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,37)) "{-# LANGUAGE CPP, TemplateHaskell #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (12,3)) "{-|\nModule      :  Main\nCopyright   :\nLicense     : GPL2\n\nMaintainer  : msjean@gmx.de\nStability   : experimental\nPortability : POSIX\n\nThis is the main entry point for the ArguEdit.bin executable.\nFurther entry points such as for testing purposes are also meant to be added here.\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((G AnnModule),DP (19,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (0,-7),DP (0,6)) "MAIN_FUNCTION" Nothing),DP (0,-7)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((G AnnEofPos),DP (3,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(20,13)-(22,1) CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (1,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:21:5-8 CN "IEVar" NotNeeded,
  (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:21:5-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:1-23 CN "ImportDecl" NotNeeded,
  (Ann (DP (3,1)) (ColDelta 1) DP (3,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:17-23 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:18-22 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:18-22 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:1-29 CN "ImportDecl" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (2,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:22-29 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:23-28 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:23-28 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:1-30 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:18-30 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:19-29 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:19-29 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:1-32 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:20-32 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:21-31 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:21-31 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:1-7 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (11,1) [DComment (DP (1,1),DP (1,45)) "--import Test.QuickCheck.All (quickCheckAll)" Nothing,DComment (DP (2,1),DP (2,46)) "-- Simple function to create a hello message." Nothing,DComment (DP (1,1),DP (1,26)) "--hello s = \"Hello \" ++ s" Nothing,DComment (DP (2,1),DP (2,64)) "-- Tell QuickCheck that if you strip \"Hello \" from the start of" Nothing,DComment (DP (1,1),DP (1,48)) "-- hello s you will be left with s (for any s)." Nothing,DComment (DP (1,1),DP (1,58)) "--prop_hello s = stripPrefix \"Hello \" (hello s) == Just s" Nothing,DComment (DP (2,1),DP (2,15)) "-- Hello World" Nothing] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,9)-(42,18) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 9) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,11)-(42,18) CN "HsDo" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 Ref "delta-1"),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 CN "(:)" Ref "delta-1",
  (Ann (DP (1,0)) (ColDelta 5) DP (2,0) [DComment (DP (1,-4),DP (1,26)) "--    putStrLn (hello \"World\")" Nothing] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:42:5-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-4 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (14,1) [DComment (DP (2,1),DP (2,31)) "-- Entry point for unit tests." Nothing,DComment (DP (1,1),DP (1,16)) "--testMain = do" Nothing,DComment (DP (1,1),DP (1,73)) "--    allPass <- $quickCheckAll -- Run QuickCheck on all prop_ functions" Nothing,DComment (DP (1,1),DP (1,33)) "--    unless allPass exitFailure" Nothing,DComment (DP (2,1),DP (2,72)) "-- This is a clunky, but portable, way to use the same Main module file" Nothing,DComment (DP (1,1),DP (1,47)) "-- for both an application and for unit tests." Nothing,DComment (DP (1,1),DP (1,67)) "-- MAIN_FUNCTION is preprocessor macro set to exeMain or testMain." Nothing,DComment (DP (1,1),DP (1,76)) "-- That way we can use the same file for both an application and for tests." Nothing,DComment (DP (1,1),DP (1,21)) "#ifndef MAIN_FUNCTION" Nothing,DComment (DP (1,1),DP (1,29)) "#define MAIN_FUNCTION exeMain" Nothing,DComment (DP (1,1),DP (1,6)) "#endif" Nothing] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:6-14 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 6) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:8-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey <no location info> CN "EmptyLocalBinds" NotNeeded,
  (Ann (DP (-42,0)) (ColDelta 0) DP (-42,0) [] []))]
==============
([((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:1:1,
    AnnModule),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:20:1-6]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:1:1,
    AnnWhere),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:22:3-7]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(20,13)-(22,1),
    AnnCloseP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:22:1]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(20,13)-(22,1),
    AnnOpenP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:20:13]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:1-23,
    AnnImport),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:1-6]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:1-23,
    AnnSemi),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:1]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:17-23,
    AnnCloseP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:23]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:17-23,
    AnnOpenP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:25:17]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:1-29,
    AnnImport),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:1-6]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:1-29,
    AnnSemi),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:1]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:22-29,
    AnnCloseP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:29]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:22-29,
    AnnOpenP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:27:22]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:1-30,
    AnnImport),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:1-6]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:1-30,
    AnnSemi),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:1]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:18-30,
    AnnCloseP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:30]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:18-30,
    AnnOpenP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:28:18]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:1-32,
    AnnImport),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:1-6]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:1-32,
    AnnSemi),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:1]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:20-32,
    AnnCloseP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:32]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:20-32,
    AnnOpenP),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:29:20]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18),
    AnnEqual),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:9]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18),
    AnnFunId),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:1-7]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,1)-(42,18),
    AnnSemi),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,11)-(42,18),
    AnnDo),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:40:11-12]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14,
    AnnEqual),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:6]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14,
    AnnFunId),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-4]),
  ((../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:56:1-14,
    AnnSemi),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:59:1]),
  ((<no location info>, AnnEofPos),
   [../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:59:1])],
 [(../../hackage-packages/arguedit-0.1.0.1/src/Main.hs:(40,11)-(42,18),
   [AnnLineComment "--    putStrLn (hello \"World\")"]),
  (<no location info>,
   [AnnLineComment "-- That way we can use the same file for both an application and for tests.",
    AnnLineComment "-- MAIN_FUNCTION is preprocessor macro set to exeMain or testMain.",
    AnnLineComment "-- for both an application and for unit tests.",
    AnnLineComment "-- This is a clunky, but portable, way to use the same Main module file",
    AnnLineComment "--    unless allPass exitFailure",
    AnnLineComment "--    allPass <- $quickCheckAll -- Run QuickCheck on all prop_ functions",
    AnnLineComment "--testMain = do",
    AnnLineComment "-- Entry point for unit tests.",
    AnnLineComment "-- Hello World",
    AnnLineComment "--prop_hello s = stripPrefix \"Hello \" (hello s) == Just s",
    AnnLineComment "-- hello s you will be left with s (for any s).",
    AnnLineComment "-- Tell QuickCheck that if you strip \"Hello \" from the start of",
    AnnLineComment "--hello s = \"Hello \" ++ s",
    AnnLineComment "-- Simple function to create a hello message.",
    AnnLineComment "--import Test.QuickCheck.All (quickCheckAll)",
    AnnLineComment "-----------------------------------------------------------------------------",
    AnnLineComment "--", AnnLineComment "--", AnnLineComment "--",
    AnnBlockComment "{-|\nModule      :  Main\nCopyright   :\nLicense     : GPL2\n\nMaintainer  : msjean@gmx.de\nStability   : experimental\nPortability : POSIX\n\nThis is the main entry point for the ArguEdit.bin executable.\nFurther entry points such as for testing purposes are also meant to be added here.\n-}",
    AnnLineComment "-----------------------------------------------------------------------------",
    AnnBlockComment "{-# LANGUAGE CPP, TemplateHaskell #-}"])])