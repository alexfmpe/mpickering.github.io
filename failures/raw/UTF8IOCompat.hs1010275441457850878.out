{-# LANGUAGE CPP #-}
{- |

UTF-8 aware string IO functions that will work across multiple platforms
and GHC versions. Includes code from Text.Pandoc.UTF8 ((C) 2010 John
MacFarlane).

Example usage:

 import Prelude hiding (readFile,writeFile,appendFile,getContents,putStr,putStrLn)
 import UTF8IOCompat   (readFile,writeFile,appendFile,getContents,putStr,putStrLn)
 import UTF8IOCompat   (SystemString,fromSystemString,toSystemString,error',userError')

2013/4/10 update: we now trust that current GHC versions & platforms
do the right thing, so this file is a no-op and on its way to being removed.
Not carefully tested.

-}

module Hledger.Utils.UTF8IOCompat (
  readFile,
  writeFile,
  appendFile,
  getContents,
  hGetContents,
  putStr,
  putStrLn,
  hPutStr,
  hPutStrLn,
  --
  SystemString,
  fromSystemString,
  toSystemString,
  error',
  userError',
)
where

-- import Control.Monad (liftM)
-- import qualified Data.ByteString.Lazy as B
-- import qualified Data.ByteString.Lazy.Char8 as B8
-- import qualified Data.ByteString.Lazy.UTF8 as U8 (toString, fromString)
import Prelude hiding (readFile, writeFile, appendFile, getContents, putStr, putStrLn)
import System.IO -- (Handle)
-- #if 711 < 702-- #if __GLASGOW_HASKELL__ < 702
-- import Codec.Binary.UTF8.String as UTF8 (decodeString, encodeString, isUTF8Encoded)
-- import System.Info (os)
-- #endif

-- bom :: B.ByteString
-- bom = B.pack [0xEF, 0xBB, 0xBF]

-- stripBOM :: B.ByteString -> B.ByteString
-- stripBOM s | bom `B.isPrefixOf` s = B.drop 3 s
-- stripBOM s = s

-- readFile :: FilePath -> IO String
-- readFile = liftM (U8.toString . stripBOM) . B.readFile

-- writeFile :: FilePath -> String -> IO ()
-- writeFile f = B.writeFile f . U8.fromString

-- appendFile :: FilePath -> String -> IO ()
-- appendFile f = B.appendFile f . U8.fromString

-- getContents :: IO String
-- getContents = liftM (U8.toString . stripBOM) B.getContents

-- hGetContents :: Handle -> IO String
-- hGetContents h = liftM (U8.toString . stripBOM) (B.hGetContents h)

-- putStr :: String -> IO ()
-- putStr = bs_putStr . U8.fromString

-- putStrLn :: String -> IO ()
-- putStrLn = bs_putStrLn . U8.fromString

-- hPutStr :: Handle -> String -> IO ()
-- hPutStr h = bs_hPutStr h . U8.fromString

-- hPutStrLn :: Handle -> String -> IO ()
-- hPutStrLn h = bs_hPutStrLn h . U8.fromString

-- -- span GHC versions including 6.12.3 - 7.4.1:
-- bs_putStr         = B8.putStr
-- bs_putStrLn       = B8.putStrLn
-- bs_hPutStr        = B8.hPut
-- bs_hPutStrLn h bs = B8.hPut h bs >> B8.hPut h (B.singleton 0x0a)


-- | A string received from or being passed to the operating system, such
-- as a file path, command-line argument, or environment variable name or
-- value. With GHC versions before 7.2 on some platforms (posix) these are
-- typically encoded. When converting, we assume the encoding is UTF-8 (cf
-- <http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html#UTF8>).
type SystemString = String

-- | Convert a system string to an ordinary string, decoding from UTF-8 if
-- it appears to be UTF8-encoded and GHC version is less than 7.2.
fromSystemString :: SystemString -> String
-- #if 711 < 702-- #if __GLASGOW_HASKELL__ < 702
-- fromSystemString s = if UTF8.isUTF8Encoded s then UTF8.decodeString s else s
-- #else
fromSystemString = id
-- #endif

-- | Convert a unicode string to a system string, encoding with UTF-8 if
-- we are on a posix platform with GHC < 7.2.
toSystemString :: String -> SystemString
-- #if 711 < 702-- #if __GLASGOW_HASKELL__ < 702
-- toSystemString = case os of
--                      "unix" -> UTF8.encodeString
--                      "linux" -> UTF8.encodeString
--                      "darwin" -> UTF8.encodeString
--                      _ -> id
-- #else
toSystemString = id
-- #endif

-- | A SystemString-aware version of error.
error' :: String -> a
error' = error . toSystemString

-- | A SystemString-aware version of userError.
userError' :: String -> IOError
userError' = userError . toSystemString

==============
../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs
==============
lengths:(4008,3960)

==============

({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:1:1
  }
 Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,20)) "{-# LANGUAGE CPP #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (17,3)) "{- |\n\nUTF-8 aware string IO functions that will work across multiple platforms\nand GHC versions. Includes code from Text.Pandoc.UTF8 ((C) 2010 John\nMacFarlane).\n\nExample usage:\n\n import Prelude hiding (readFile,writeFile,appendFile,getContents,putStr,putStrLn)\n import UTF8IOCompat   (readFile,writeFile,appendFile,getContents,putStr,putStrLn)\n import UTF8IOCompat   (SystemString,fromSystemString,toSystemString,error',userError')\n\n2013/4/10 update: we now trust that current GHC versions & platforms\ndo the right thing, so this file is a no-op and on its way to being removed.\nNot carefully tested.\n\n-}" Nothing),DP (1,1)),((G AnnModule),DP (19,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((G AnnEofPos),DP (2,0))])
 (HsModule 
  (Just 
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:20:8-33
     }
    Nothing{ModuleName: Hledger.Utils.UTF8IOCompat})) 
  (Just 
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:(20,35)-(36,1)
     }
    Just (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (1,1))])
    [
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:21:3-10
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:21:3-10
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: readFile})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:22:3-11
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:22:3-11
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: writeFile})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:23:3-12
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:23:3-12
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: appendFile})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:24:3-13
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:24:3-13
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: getContents})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:25:3-14
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:25:3-14
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: hGetContents})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:26:3-8
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:26:3-8
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: putStr})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:27:3-10
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:27:3-10
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: putStrLn})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:28:3-9
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:28:3-9
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: hPutStr})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:29:3-11
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:29:3-11
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: hPutStrLn})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:31:3-14
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (2,3) [DComment (DP (1,3),DP (1,5)) "--" Nothing] [])
      (IEThingAbs 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:31:3-14
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: SystemString})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:32:3-18
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:32:3-18
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: fromSystemString})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:33:3-16
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:33:3-16
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: toSystemString})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:34:3-8
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:34:3-8
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: error'})))),
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:35:3-12
       }
      Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
      (IEVar 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:35:3-12
         }
        Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: userError'}))))])) 
  [
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:1-86
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (6,1) [DComment (DP (2,1),DP (2,32)) "-- import Control.Monad (liftM)" Nothing,DComment (DP (1,1),DP (1,46)) "-- import qualified Data.ByteString.Lazy as B" Nothing,DComment (DP (1,1),DP (1,53)) "-- import qualified Data.ByteString.Lazy.Char8 as B8" Nothing,DComment (DP (1,1),DP (1,75)) "-- import qualified Data.ByteString.Lazy.UTF8 as U8 (toString, fromString)" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:8-14
       }
      Nothing{ModuleName: Prelude}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (True) 
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:16-86
         }
        Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnHiding),DP (0,0)),((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:24-31
           }
          Just (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:24-31
             }
            Just (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: readFile})))),
         ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:34-42
           }
          Just (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:34-42
             }
            Just (Ann (DP (0,0)) (ColDelta 34) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: writeFile})))),
         ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:45-54
           }
          Just (Ann (DP (0,1)) (ColDelta 45) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:45-54
             }
            Just (Ann (DP (0,0)) (ColDelta 45) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: appendFile})))),
         ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:57-67
           }
          Just (Ann (DP (0,1)) (ColDelta 57) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:57-67
             }
            Just (Ann (DP (0,0)) (ColDelta 57) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: getContents})))),
         ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:70-75
           }
          Just (Ann (DP (0,1)) (ColDelta 70) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:70-75
             }
            Just (Ann (DP (0,0)) (ColDelta 70) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: putStr})))),
         ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:78-85
           }
          Just (Ann (DP (0,1)) (ColDelta 78) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:78-85
             }
            Just (Ann (DP (0,0)) (ColDelta 78) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: putStrLn}))))]))))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:1-16
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:8-16
       }
      Nothing{ModuleName: System.IO}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing)))] 
  [
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1-26
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (52,1) [DComment (DP (0,1),DP (0,12)) "-- (Handle)" Nothing,DComment (DP (1,1),DP (1,17)) "-- #if 711 < 702" Nothing,DComment (DP (0,-16),DP (0,16)) "-- #if __GLASGOW_HASKELL__ < 702" Nothing,DComment (DP (1,1),DP (1,87)) "-- import Codec.Binary.UTF8.String as UTF8 (decodeString, encodeString, isUTF8Encoded)" Nothing,DComment (DP (1,1),DP (1,27)) "-- import System.Info (os)" Nothing,DComment (DP (1,1),DP (1,10)) "-- #endif" Nothing,DComment (DP (2,1),DP (2,23)) "-- bom :: B.ByteString" Nothing,DComment (DP (1,1),DP (1,35)) "-- bom = B.pack [0xEF, 0xBB, 0xBF]" Nothing,DComment (DP (2,1),DP (2,44)) "-- stripBOM :: B.ByteString -> B.ByteString" Nothing,DComment (DP (1,1),DP (1,50)) "-- stripBOM s | bom `B.isPrefixOf` s = B.drop 3 s" Nothing,DComment (DP (1,1),DP (1,18)) "-- stripBOM s = s" Nothing,DComment (DP (2,1),DP (2,37)) "-- readFile :: FilePath -> IO String" Nothing,DComment (DP (1,1),DP (1,58)) "-- readFile = liftM (U8.toString . stripBOM) . B.readFile" Nothing,DComment (DP (2,1),DP (2,44)) "-- writeFile :: FilePath -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,47)) "-- writeFile f = B.writeFile f . U8.fromString" Nothing,DComment (DP (2,1),DP (2,45)) "-- appendFile :: FilePath -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,49)) "-- appendFile f = B.appendFile f . U8.fromString" Nothing,DComment (DP (2,1),DP (2,28)) "-- getContents :: IO String" Nothing,DComment (DP (1,1),DP (1,62)) "-- getContents = liftM (U8.toString . stripBOM) B.getContents" Nothing,DComment (DP (2,1),DP (2,39)) "-- hGetContents :: Handle -> IO String" Nothing,DComment (DP (1,1),DP (1,70)) "-- hGetContents h = liftM (U8.toString . stripBOM) (B.hGetContents h)" Nothing,DComment (DP (2,1),DP (2,29)) "-- putStr :: String -> IO ()" Nothing,DComment (DP (1,1),DP (1,38)) "-- putStr = bs_putStr . U8.fromString" Nothing,DComment (DP (2,1),DP (2,31)) "-- putStrLn :: String -> IO ()" Nothing,DComment (DP (1,1),DP (1,42)) "-- putStrLn = bs_putStrLn . U8.fromString" Nothing,DComment (DP (2,1),DP (2,40)) "-- hPutStr :: Handle -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,44)) "-- hPutStr h = bs_hPutStr h . U8.fromString" Nothing,DComment (DP (2,1),DP (2,42)) "-- hPutStrLn :: Handle -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,48)) "-- hPutStrLn h = bs_hPutStrLn h . U8.fromString" Nothing,DComment (DP (2,1),DP (2,50)) "-- -- span GHC versions including 6.12.3 - 7.4.1:" Nothing,DComment (DP (1,1),DP (1,33)) "-- bs_putStr         = B8.putStr" Nothing,DComment (DP (1,1),DP (1,35)) "-- bs_putStrLn       = B8.putStrLn" Nothing,DComment (DP (1,1),DP (1,31)) "-- bs_hPutStr        = B8.hPut" Nothing,DComment (DP (1,1),DP (1,68)) "-- bs_hPutStrLn h bs = B8.hPut h bs >> B8.hPut h (B.singleton 0x0a)" Nothing,DComment (DP (3,1),DP (3,74)) "-- | A string received from or being passed to the operating system, such" Nothing,DComment (DP (1,1),DP (1,74)) "-- as a file path, command-line argument, or environment variable name or" Nothing,DComment (DP (1,1),DP (1,75)) "-- value. With GHC versions before 7.2 on some platforms (posix) these are" Nothing,DComment (DP (1,1),DP (1,75)) "-- typically encoded. When converting, we assume the encoding is UTF-8 (cf" Nothing,DComment (DP (1,1),DP (1,76)) "-- <http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html#UTF8>)." Nothing] [((G AnnType),DP (0,0)),((G AnnEqual),DP (0,1))])
    (TyClD 
     (SynDecl 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:6-17
        }
       Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: SystemString})) 
      (HsQTvs 
       [] 
       []) 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:21-26
        }
       Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
       (HsTyVar 
        (Unqual {OccName: String}))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1-42
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (4,1) [DComment (DP (2,1),DP (2,75)) "-- | Convert a system string to an ordinary string, decoding from UTF-8 if" Nothing,DComment (DP (1,1),DP (1,67)) "-- it appears to be UTF8-encoded and GHC version is less than 7.2." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1-16
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: fromSystemString}))] 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-42
        }
       Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-42
          }
         Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-32
            }
           Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: SystemString}))) 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:37-42
            }
           Just (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: String}))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (4,1) [DComment (DP (1,1),DP (1,17)) "-- #if 711 < 702" Nothing,DComment (DP (0,-16),DP (0,16)) "-- #if __GLASGOW_HASKELL__ < 702" Nothing,DComment (DP (1,1),DP (1,80)) "-- fromSystemString s = if UTF8.isUTF8Encoded s then UTF8.decodeString s else s" Nothing,DComment (DP (1,1),DP (1,9)) "-- #else" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-16
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: fromSystemString})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-16
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: fromSystemString})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:18-21
              }
             Just (Ann (DP (0,-1)) (ColDelta 18) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:20-21
                }
               Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsVar 
                (Unqual {OccName: id})))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1-40
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (5,1) [DComment (DP (1,1),DP (1,10)) "-- #endif" Nothing,DComment (DP (2,1),DP (2,73)) "-- | Convert a unicode string to a system string, encoding with UTF-8 if" Nothing,DComment (DP (1,1),DP (1,46)) "-- we are on a posix platform with GHC < 7.2." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1-14
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: toSystemString}))] 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-40
        }
       Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-40
          }
         Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-24
            }
           Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: String}))) 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:29-40
            }
           Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: SystemString}))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (8,1) [DComment (DP (1,1),DP (1,17)) "-- #if 711 < 702" Nothing,DComment (DP (0,-16),DP (0,16)) "-- #if __GLASGOW_HASKELL__ < 702" Nothing,DComment (DP (1,1),DP (1,31)) "-- toSystemString = case os of" Nothing,DComment (DP (1,1),DP (1,52)) "--                      \"unix\" -> UTF8.encodeString" Nothing,DComment (DP (1,1),DP (1,53)) "--                      \"linux\" -> UTF8.encodeString" Nothing,DComment (DP (1,1),DP (1,54)) "--                      \"darwin\" -> UTF8.encodeString" Nothing,DComment (DP (1,1),DP (1,32)) "--                      _ -> id" Nothing,DComment (DP (1,1),DP (1,9)) "-- #else" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-14
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: toSystemString})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-14
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: toSystemString})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:16-19
              }
             Just (Ann (DP (0,-1)) (ColDelta 16) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:18-19
                }
               Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsVar 
                (Unqual {OccName: id})))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1-21
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (4,1) [DComment (DP (1,1),DP (1,10)) "-- #endif" Nothing,DComment (DP (2,1),DP (2,44)) "-- | A SystemString-aware version of error." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1-6
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: error'}))] 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-21
        }
       Just (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-21
          }
         Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-16
            }
           Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: String}))) 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:21
            }
           Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: a}))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-6
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: error'})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-6
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: error'})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:8-31
              }
             Just (Ann (DP (0,-1)) (ColDelta 8) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:10-31
                }
               Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
               (OpApp 
                ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:10-14
                  }
                 Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: error}))) 
                ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:16
                  }
                 Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: .}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:18-31
                  }
                 Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: toSystemString})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1-31
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (3,1) [DComment (DP (2,1),DP (2,48)) "-- | A SystemString-aware version of userError." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1-10
         }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: userError'}))] 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-31
        }
       Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-31
          }
         Just (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-20
            }
           Just (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: String}))) 
          ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:25-31
            }
           Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: IOError}))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-10
        }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: userError'})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-10
              }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: userError'})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:12-39
              }
             Just (Ann (DP (0,-1)) (ColDelta 12) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:14-39
                }
               Just (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [])
               (OpApp 
                ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:14-22
                  }
                 Just (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: userError}))) 
                ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:24
                  }
                 Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: .}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:26-39
                  }
                 Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: toSystemString})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      [])))] 
  (Nothing) 
  (Nothing)))
==============
[(AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:1:1 CN "HsModule" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,20)) "{-# LANGUAGE CPP #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (17,3)) "{- |\n\nUTF-8 aware string IO functions that will work across multiple platforms\nand GHC versions. Includes code from Text.Pandoc.UTF8 ((C) 2010 John\nMacFarlane).\n\nExample usage:\n\n import Prelude hiding (readFile,writeFile,appendFile,getContents,putStr,putStrLn)\n import UTF8IOCompat   (readFile,writeFile,appendFile,getContents,putStr,putStrLn)\n import UTF8IOCompat   (SystemString,fromSystemString,toSystemString,error',userError')\n\n2013/4/10 update: we now trust that current GHC versions & platforms\ndo the right thing, so this file is a no-op and on its way to being removed.\nNot carefully tested.\n\n-}" Nothing),DP (1,1)),((G AnnModule),DP (19,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((G AnnEofPos),DP (2,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:(20,35)-(36,1) CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (1,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:21:3-10 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:21:3-10 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:22:3-11 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:22:3-11 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:23:3-12 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:23:3-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:24:3-13 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:24:3-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:25:3-14 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:25:3-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:26:3-8 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:26:3-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:27:3-10 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:27:3-10 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:28:3-9 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:28:3-9 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:29:3-11 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:29:3-11 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:31:3-14 CN "IEThingAbs" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (2,3) [DComment (DP (1,3),DP (1,5)) "--" Nothing] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:31:3-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:32:3-18 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:32:3-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:33:3-16 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:33:3-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:34:3-8 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:34:3-8 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:35:3-12 CN "IEVar" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:35:3-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:1-86 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (6,1) [DComment (DP (2,1),DP (2,32)) "-- import Control.Monad (liftM)" Nothing,DComment (DP (1,1),DP (1,46)) "-- import qualified Data.ByteString.Lazy as B" Nothing,DComment (DP (1,1),DP (1,53)) "-- import qualified Data.ByteString.Lazy.Char8 as B8" Nothing,DComment (DP (1,1),DP (1,75)) "-- import qualified Data.ByteString.Lazy.UTF8 as U8 (toString, fromString)" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:16-86 CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnHiding),DP (0,0)),((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:24-31 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:24-31 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:34-42 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:34-42 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 34) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:45-54 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 45) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:45-54 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 45) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:57-67 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 57) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:57-67 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 57) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:70-75 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 70) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:70-75 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 70) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:78-85 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 78) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:78-85 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 78) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:1-16 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1-26 CN "TyClD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (52,1) [DComment (DP (0,1),DP (0,12)) "-- (Handle)" Nothing,DComment (DP (1,1),DP (1,17)) "-- #if 711 < 702" Nothing,DComment (DP (0,-16),DP (0,16)) "-- #if __GLASGOW_HASKELL__ < 702" Nothing,DComment (DP (1,1),DP (1,87)) "-- import Codec.Binary.UTF8.String as UTF8 (decodeString, encodeString, isUTF8Encoded)" Nothing,DComment (DP (1,1),DP (1,27)) "-- import System.Info (os)" Nothing,DComment (DP (1,1),DP (1,10)) "-- #endif" Nothing,DComment (DP (2,1),DP (2,23)) "-- bom :: B.ByteString" Nothing,DComment (DP (1,1),DP (1,35)) "-- bom = B.pack [0xEF, 0xBB, 0xBF]" Nothing,DComment (DP (2,1),DP (2,44)) "-- stripBOM :: B.ByteString -> B.ByteString" Nothing,DComment (DP (1,1),DP (1,50)) "-- stripBOM s | bom `B.isPrefixOf` s = B.drop 3 s" Nothing,DComment (DP (1,1),DP (1,18)) "-- stripBOM s = s" Nothing,DComment (DP (2,1),DP (2,37)) "-- readFile :: FilePath -> IO String" Nothing,DComment (DP (1,1),DP (1,58)) "-- readFile = liftM (U8.toString . stripBOM) . B.readFile" Nothing,DComment (DP (2,1),DP (2,44)) "-- writeFile :: FilePath -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,47)) "-- writeFile f = B.writeFile f . U8.fromString" Nothing,DComment (DP (2,1),DP (2,45)) "-- appendFile :: FilePath -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,49)) "-- appendFile f = B.appendFile f . U8.fromString" Nothing,DComment (DP (2,1),DP (2,28)) "-- getContents :: IO String" Nothing,DComment (DP (1,1),DP (1,62)) "-- getContents = liftM (U8.toString . stripBOM) B.getContents" Nothing,DComment (DP (2,1),DP (2,39)) "-- hGetContents :: Handle -> IO String" Nothing,DComment (DP (1,1),DP (1,70)) "-- hGetContents h = liftM (U8.toString . stripBOM) (B.hGetContents h)" Nothing,DComment (DP (2,1),DP (2,29)) "-- putStr :: String -> IO ()" Nothing,DComment (DP (1,1),DP (1,38)) "-- putStr = bs_putStr . U8.fromString" Nothing,DComment (DP (2,1),DP (2,31)) "-- putStrLn :: String -> IO ()" Nothing,DComment (DP (1,1),DP (1,42)) "-- putStrLn = bs_putStrLn . U8.fromString" Nothing,DComment (DP (2,1),DP (2,40)) "-- hPutStr :: Handle -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,44)) "-- hPutStr h = bs_hPutStr h . U8.fromString" Nothing,DComment (DP (2,1),DP (2,42)) "-- hPutStrLn :: Handle -> String -> IO ()" Nothing,DComment (DP (1,1),DP (1,48)) "-- hPutStrLn h = bs_hPutStrLn h . U8.fromString" Nothing,DComment (DP (2,1),DP (2,50)) "-- -- span GHC versions including 6.12.3 - 7.4.1:" Nothing,DComment (DP (1,1),DP (1,33)) "-- bs_putStr         = B8.putStr" Nothing,DComment (DP (1,1),DP (1,35)) "-- bs_putStrLn       = B8.putStrLn" Nothing,DComment (DP (1,1),DP (1,31)) "-- bs_hPutStr        = B8.hPut" Nothing,DComment (DP (1,1),DP (1,68)) "-- bs_hPutStrLn h bs = B8.hPut h bs >> B8.hPut h (B.singleton 0x0a)" Nothing,DComment (DP (3,1),DP (3,74)) "-- | A string received from or being passed to the operating system, such" Nothing,DComment (DP (1,1),DP (1,74)) "-- as a file path, command-line argument, or environment variable name or" Nothing,DComment (DP (1,1),DP (1,75)) "-- value. With GHC versions before 7.2 on some platforms (posix) these are" Nothing,DComment (DP (1,1),DP (1,75)) "-- typically encoded. When converting, we assume the encoding is UTF-8 (cf" Nothing,DComment (DP (1,1),DP (1,76)) "-- <http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html#UTF8>)." Nothing] [((G AnnType),DP (0,0)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:6-17 CN "Unqual" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:21-26 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1-42 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (4,1) [DComment (DP (2,1),DP (2,75)) "-- | Convert a system string to an ordinary string, decoding from UTF-8 if" Nothing,DComment (DP (1,1),DP (1,67)) "-- it appears to be UTF8-encoded and GHC version is less than 7.2." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-32 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-42 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-42 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:37-42 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (4,1) [DComment (DP (1,1),DP (1,17)) "-- #if 711 < 702" Nothing,DComment (DP (0,-16),DP (0,16)) "-- #if __GLASGOW_HASKELL__ < 702" Nothing,DComment (DP (1,1),DP (1,80)) "-- fromSystemString s = if UTF8.isUTF8Encoded s then UTF8.decodeString s else s" Nothing,DComment (DP (1,1),DP (1,9)) "-- #else" Nothing] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:18-21 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 18) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:20-21 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1-40 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (5,1) [DComment (DP (1,1),DP (1,10)) "-- #endif" Nothing,DComment (DP (2,1),DP (2,73)) "-- | Convert a unicode string to a system string, encoding with UTF-8 if" Nothing,DComment (DP (1,1),DP (1,46)) "-- we are on a posix platform with GHC < 7.2." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-40 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-40 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:29-40 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (8,1) [DComment (DP (1,1),DP (1,17)) "-- #if 711 < 702" Nothing,DComment (DP (0,-16),DP (0,16)) "-- #if __GLASGOW_HASKELL__ < 702" Nothing,DComment (DP (1,1),DP (1,31)) "-- toSystemString = case os of" Nothing,DComment (DP (1,1),DP (1,52)) "--                      \"unix\" -> UTF8.encodeString" Nothing,DComment (DP (1,1),DP (1,53)) "--                      \"linux\" -> UTF8.encodeString" Nothing,DComment (DP (1,1),DP (1,54)) "--                      \"darwin\" -> UTF8.encodeString" Nothing,DComment (DP (1,1),DP (1,32)) "--                      _ -> id" Nothing,DComment (DP (1,1),DP (1,9)) "-- #else" Nothing] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:16-19 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 16) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:18-19 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1-6 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1-21 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (4,1) [DComment (DP (1,1),DP (1,10)) "-- #endif" Nothing,DComment (DP (2,1),DP (2,44)) "-- | A SystemString-aware version of error." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-16 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-21 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-21 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-6 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:8-31 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 8) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:10-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:10-31 CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:18-31 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1-10 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1-31 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (3,1) [DComment (DP (2,1),DP (2,48)) "-- | A SystemString-aware version of userError." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-31 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-31 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 15) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:25-31 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-10 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:12-39 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 12) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:14-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:14-39 CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:26-39 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey <no location info> CN "EmptyLocalBinds" NotNeeded,
  (Ann (DP (-104,0)) (ColDelta 0) DP (-104,0) [] []))]
==============
([((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:1:1,
    AnnModule),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:20:1-6]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:1:1,
    AnnWhere),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:37:1-5]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:(20,35)-(36,1),
    AnnCloseP),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:36:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:(20,35)-(36,1),
    AnnOpenP),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:20:35]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:21:3-10,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:21:11]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:22:3-11,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:22:12]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:23:3-12,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:23:13]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:24:3-13,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:24:14]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:25:3-14,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:25:15]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:26:3-8,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:26:9]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:27:3-10,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:27:11]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:28:3-9,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:28:10]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:29:3-11,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:29:12]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:31:3-14,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:31:15]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:32:3-18,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:32:19]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:33:3-16,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:33:17]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:34:3-8,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:34:9]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:35:3-12,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:35:13]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:1-86,
    AnnImport),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:1-6]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:1-86,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:16-86,
    AnnCloseP),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:86]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:16-86,
    AnnHiding),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:16-21]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:16-86,
    AnnOpenP),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:23]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:24-31,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:32]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:34-42,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:43]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:45-54,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:55]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:57-67,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:68]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:70-75,
    AnnComma),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:43:76]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:1-16,
    AnnImport),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:1-6]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:44:1-16,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1-26,
    AnnEqual),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:19]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1-26,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1-26,
    AnnType),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:96:1-4]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1-42,
    AnnDcolon),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:18-19]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:1-42,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:21-42,
    AnnRarrow),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:100:34-35]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21,
    AnnEqual),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:18]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21,
    AnnFunId),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-16]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:104:1-21,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1-40,
    AnnDcolon),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:16-17]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:1-40,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:19-40,
    AnnRarrow),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:109:26-27]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19,
    AnnEqual),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:16]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19,
    AnnFunId),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-14]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:117:1-19,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1-21,
    AnnDcolon),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:8-9]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:1-21,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:11-21,
    AnnRarrow),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:121:18-19]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31,
    AnnEqual),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:8]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31,
    AnnFunId),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-6]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:1-31,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:10-31,
    AnnVal),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:122:16]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1-31,
    AnnDcolon),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:12-13]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:1-31,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:15-31,
    AnnRarrow),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:125:22-23]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39,
    AnnEqual),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:12]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39,
    AnnFunId),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-10]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:1-39,
    AnnSemi),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:128:1]),
  ((../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:14-39,
    AnnVal),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:126:24]),
  ((<no location info>, AnnEofPos),
   [../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:128:1])],
 [(../../hackage-packages/hledger-lib-0.24/Hledger/Utils/UTF8IOCompat.hs:(20,35)-(36,1),
   [AnnLineComment "--"]),
  (<no location info>,
   [AnnLineComment "-- | A SystemString-aware version of userError.",
    AnnLineComment "-- | A SystemString-aware version of error.",
    AnnLineComment "-- #endif", AnnLineComment "-- #else",
    AnnLineComment "--                      _ -> id",
    AnnLineComment "--                      \"darwin\" -> UTF8.encodeString",
    AnnLineComment "--                      \"linux\" -> UTF8.encodeString",
    AnnLineComment "--                      \"unix\" -> UTF8.encodeString",
    AnnLineComment "-- toSystemString = case os of",
    AnnLineComment "-- #if 711 < 702",
    AnnLineComment "-- we are on a posix platform with GHC < 7.2.",
    AnnLineComment "-- | Convert a unicode string to a system string, encoding with UTF-8 if",
    AnnLineComment "-- #endif", AnnLineComment "-- #else",
    AnnLineComment "-- fromSystemString s = if UTF8.isUTF8Encoded s then UTF8.decodeString s else s",
    AnnLineComment "-- #if 711 < 702",
    AnnLineComment "-- it appears to be UTF8-encoded and GHC version is less than 7.2.",
    AnnLineComment "-- | Convert a system string to an ordinary string, decoding from UTF-8 if",
    AnnLineComment "-- <http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html#UTF8>).",
    AnnLineComment "-- typically encoded. When converting, we assume the encoding is UTF-8 (cf",
    AnnLineComment "-- value. With GHC versions before 7.2 on some platforms (posix) these are",
    AnnLineComment "-- as a file path, command-line argument, or environment variable name or",
    AnnLineComment "-- | A string received from or being passed to the operating system, such",
    AnnLineComment "-- bs_hPutStrLn h bs = B8.hPut h bs >> B8.hPut h (B.singleton 0x0a)",
    AnnLineComment "-- bs_hPutStr        = B8.hPut",
    AnnLineComment "-- bs_putStrLn       = B8.putStrLn",
    AnnLineComment "-- bs_putStr         = B8.putStr",
    AnnLineComment "-- -- span GHC versions including 6.12.3 - 7.4.1:",
    AnnLineComment "-- hPutStrLn h = bs_hPutStrLn h . U8.fromString",
    AnnLineComment "-- hPutStrLn :: Handle -> String -> IO ()",
    AnnLineComment "-- hPutStr h = bs_hPutStr h . U8.fromString",
    AnnLineComment "-- hPutStr :: Handle -> String -> IO ()",
    AnnLineComment "-- putStrLn = bs_putStrLn . U8.fromString",
    AnnLineComment "-- putStrLn :: String -> IO ()",
    AnnLineComment "-- putStr = bs_putStr . U8.fromString",
    AnnLineComment "-- putStr :: String -> IO ()",
    AnnLineComment "-- hGetContents h = liftM (U8.toString . stripBOM) (B.hGetContents h)",
    AnnLineComment "-- hGetContents :: Handle -> IO String",
    AnnLineComment "-- getContents = liftM (U8.toString . stripBOM) B.getContents",
    AnnLineComment "-- getContents :: IO String",
    AnnLineComment "-- appendFile f = B.appendFile f . U8.fromString",
    AnnLineComment "-- appendFile :: FilePath -> String -> IO ()",
    AnnLineComment "-- writeFile f = B.writeFile f . U8.fromString",
    AnnLineComment "-- writeFile :: FilePath -> String -> IO ()",
    AnnLineComment "-- readFile = liftM (U8.toString . stripBOM) . B.readFile",
    AnnLineComment "-- readFile :: FilePath -> IO String",
    AnnLineComment "-- stripBOM s = s",
    AnnLineComment "-- stripBOM s | bom `B.isPrefixOf` s = B.drop 3 s",
    AnnLineComment "-- stripBOM :: B.ByteString -> B.ByteString",
    AnnLineComment "-- bom = B.pack [0xEF, 0xBB, 0xBF]",
    AnnLineComment "-- bom :: B.ByteString",
    AnnLineComment "-- #endif",
    AnnLineComment "-- import System.Info (os)",
    AnnLineComment "-- import Codec.Binary.UTF8.String as UTF8 (decodeString, encodeString, isUTF8Encoded)",
    AnnLineComment "-- #if 711 < 702", AnnLineComment "-- (Handle)",
    AnnLineComment "-- import qualified Data.ByteString.Lazy.UTF8 as U8 (toString, fromString)",
    AnnLineComment "-- import qualified Data.ByteString.Lazy.Char8 as B8",
    AnnLineComment "-- import qualified Data.ByteString.Lazy as B",
    AnnLineComment "-- import Control.Monad (liftM)",
    AnnBlockComment "{- |\n\nUTF-8 aware string IO functions that will work across multiple platforms\nand GHC versions. Includes code from Text.Pandoc.UTF8 ((C) 2010 John\nMacFarlane).\n\nExample usage:\n\n import Prelude hiding (readFile,writeFile,appendFile,getContents,putStr,putStrLn)\n import UTF8IOCompat   (readFile,writeFile,appendFile,getContents,putStr,putStrLn)\n import UTF8IOCompat   (SystemString,fromSystemString,toSystemString,error',userError')\n\n2013/4/10 update: we now trust that current GHC versions & platforms\ndo the right thing, so this file is a no-op and on its way to being removed.\nNot carefully tested.\n\n-}",
    AnnBlockComment "{-# LANGUAGE CPP #-}"])])