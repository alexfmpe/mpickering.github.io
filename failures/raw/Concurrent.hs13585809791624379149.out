{-# LANGUAGE Trustworthy #-}
{-# LANGUAGE CPP
           , MagicHash
           , UnboxedTuples
           , ScopedTypeVariables
  #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-deprecations #-}{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-deprecations #-}-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN
-- and Control.Concurrent.SampleVar imports.-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN
-- and Control.Concurrent.SampleVar imports.
-----------------------------------------------------------------------------
-- |-----------------------------------------------------------------------------
-- |-- Module      :  Control.Concurrent
-- Module      :  Control.Concurrent-- Copyright   :  (c) The University of Glasgow 2001
-- Copyright   :  (c) The University of Glasgow 2001-- License     :  BSD-style (see the file libraries/base/LICENSE)
---- License     :  BSD-style (see the file libraries/base/LICENSE)
---- Maintainer  :  libraries@haskell.org
-- Stability   :  experimental-- Maintainer  :  libraries@haskell.org
-- Stability   :  experimental-- Portability :  non-portable (concurrency)
---- Portability :  non-portable (concurrency)
---- A common interface to a collection of useful concurrency
-- abstractions.-- A common interface to a collection of useful concurrency
---- abstractions.
-------------------------------------------------------------------------------
-----------------------------------------------------------------------------
module Control.Concurrent (
module Control.Concurrent-- * Concurrent Haskell
        -- * Concurrent Haskell
        -- $conc_intro
        -- $conc_intro
        -- * Basic concurrency operations
        -- * Basic concurrency operations
        ThreadId,
        ThreadIdmyThreadId, ,
        myThreadId,
        forkIO,
        forkIOforkFinally,    ,
        forkFinallyforkIOWithUnmask,    ,
        forkIOWithUnmaskkillThread,     ,
        killThreadthrowTo,  ,
        throwTo,
        -- ** Threads with affinity
        forkOn-- ** Threads with affinity,
        forkOnforkOnWithUnmask,         ,
        forkOnWithUnmaskgetNumCapabilities, ,
        getNumCapabilities,
        setNumCapabilitiesthreadCapability, ,
        threadCapability,
        -- * Scheduling
        -- * Scheduling
        -- $conc_scheduling
        yield-- $conc_scheduling,
        yield,
        -- ** Blocking
        -- ** Blocking
        -- $blocking
        -- $blocking
        -- ** Waiting
        threadDelay-- ** Waiting,
        threadDelaythreadWaitRead,  ,
        threadWaitReadthreadWaitWrite,,
        threadWaitWritethreadWaitReadSTM, ,
        threadWaitReadSTMthreadWaitWriteSTM,,
        threadWaitWriteSTM,
        -- * Communication abstractions
        -- * Communication abstractions
        module Control.Concurrent.MVar,
        module Control.Concurrent.MVar,
        module Control.Concurrent.Chan,
        module Control.Concurrent.QSemControl.Concurrent.QSemN,,
        module Control.Concurrent.QSemN,
        -- * Bound Threads
        -- $boundthreads-- * Bound Threads
        -- $boundthreadsrtsSupportsBoundThreads,
        rtsSupportsBoundThreadsforkOS,                ,
        forkOSisCurrentThreadBound,             ,
        isCurrentThreadBoundrunInBoundThread,   ,
        runInBoundThreadrunInUnboundThread, ,
        runInUnboundThread,
        -- * Weak references to ThreadIds
        mkWeakThreadId-- * Weak references to ThreadIds,
        mkWeakThreadId,
        -- * GHC's implementation of concurrency
        -- * GHC's implementation of concurrency
        -- |This section describes features specific to GHC's
        -- implementation of Concurrent Haskell.-- |This section describes features specific to GHC's
        -- implementation of Concurrent Haskell.
        -- ** Haskell threads and Operating System threads
        -- ** Haskell threads and Operating System threads
        -- $osthreads
        -- $osthreads
        -- ** Terminating the program
        -- ** Terminating the program
        -- $termination
        -- $termination
        -- ** Pre-emption
        -- ** Pre-emption
        -- $preemption
        -- $preemption
        -- ** Deadlock
        -- ** Deadlock
        -- $deadlock
        -- $deadlock
    ) where
    ) where
import Prelude
import Prelude
import Control.Exception.Base as Exception
import Control.Exception.Base as Exception
import GHC.Exception
import GHC.ExceptionGHC.Conc hiding (threadWaitRead, threadWaitWrite,
import GHC.Conc hiding (threadWaitReadthreadWaitReadSTM, threadWaitWrite, threadWaitWriteSTM,     )
import qualified GHC.Conc, threadWaitWriteSTM)
import qualifiedGHC.IO    GHC.Conc( IO(..), unsafeInterleaveIO, unsafeUnmask )
import GHC.IOGHC.IORef        ( IOnewIORef(..), unsafeInterleaveIO, readIORef, writeIORef, unsafeUnmask)        )
import GHC.IORefGHC.Base         ( newIORef, readIORef, writeIORef )
import GHC.Base
import System.Posix.Types ( Fd )
import System.Posix.TypesForeign.StablePtr  ( Fd )
import Foreign.StablePtrForeign.C.Types
import Foreign.C.TypesControl.Monad
import Control.Monad
#ifdef mingw32_HOST_OS
import Foreign.C
import System.IO
import Data.Maybe (Maybe(..))
#endif

import Control.Concurrent.MVar
import Control.Concurrent.MVar
import Control.Concurrent.Chan
import Control.Concurrent.QSemControl.Concurrent.QSemN
import Control.Concurrent.QSemN
{- $conc_intro

The concurrency extension for Haskell is described in the paper
/Concurrent Haskell/
<http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz>.

Concurrency is \"lightweight\", which means that both thread creation
and context switching overheads are extremely low.  Scheduling of
Haskell threads is done internally in the Haskell runtime system, and
doesn't make use of any operating system-supplied thread packages.

However, if you want to interact with a foreign library that expects your
program to use the operating system-supplied thread package, you can do so
by using 'forkOS' instead of 'forkIO'.

Haskell threads can communicate via 'MVar's, a kind of synchronised
mutable variable (see "Control.Concurrent.MVar").  Several common
concurrency abstractions can be built from 'MVar's, and these are
provided by the "Control.Concurrent" library.
In GHC, threads may also communicate via exceptions.
-}
{- $conc_scheduling

    Scheduling may be either pre-emptive or co-operative,
    depending on the implementation of Concurrent Haskell (see below
    for information related to specific compilers).  In a co-operative
    system, context switches only occur when you use one of the
    primitives defined in this module.  This means that programs such
    as:


>   main = forkIO (write 'a') >> write 'b'
>     where write c = putChar c >> write c

    will print either @aaaaaaaaaaaaaa...@ or @bbbbbbbbbbbb...@,
    instead of some random interleaving of @a@s and @b@s.  In
    practice, cooperative multitasking is sufficient for writing
    simple graphical user interfaces.
-}
{- $blocking
Different Haskell implementations have different characteristics with
regard to which operations block /all/ threads.

Using GHC without the @-threaded@ option, all foreign calls will block
all other Haskell threads in the system, although I\/O operations will
not.  With the @-threaded@ option, only foreign calls with the @unsafe@
attribute will block all other threads.

-}
-- | fork a thread and call the supplied function when the thread is about
-- to terminate, with an exception or a returned value.  The function is-- | fork a thread and call the supplied function when the thread is about
-- called with asynchronous exceptions masked.-- to terminate, with an exception or a returned value.  The function is
---- called with asynchronous exceptions masked.
---- > forkFinally action and_then =
-- >   mask $ \restore ->-- > forkFinally action and_then =
-- >   mask $ \restore ->-- >     forkIO $ try (restore action) >>= and_then
---- >     forkIO $ try (restore action) >>= and_then
---- This function is useful for informing the parent when a child
-- terminates, for example.-- This function is useful for informing the parent when a child
---- terminates, for example.
---- /Since: 4.6.0.0/
forkFinally-- /Since: 4.6.0.0/:: IO a -> (Either SomeException a -> IO ()) -> IO ThreadId
forkFinally ::action aand_then-> (Either=  SomeException a -> IO ()) -> IO ThreadId
forkFinallymask $ \restore-> =
  maskforkIO \restore$ try (->restore action) >>= and_then
      forkIO $ try (restore action) >>= and_then
-- ---------------------------------------------------------------------------
-- Bound Threads-- ---------------------------------------------------------------------------
-- Bound Threads
{- $boundthreads
   #boundthreads#

Support for multiple operating system threads and bound threads as described
below is currently only available in the GHC runtime system if you use the
/-threaded/ option when linking.

Other Haskell systems do not currently support multiple operating system threads.

A bound thread is a haskell thread that is /bound/ to an operating system
thread. While the bound thread is still scheduled by the Haskell run-time
system, the operating system thread takes care of all the foreign calls made
by the bound thread.

To a foreign library, the bound thread will look exactly like an ordinary
operating system thread created using OS functions like @pthread_create@
or @CreateThread@.

Bound threads can be created using the 'forkOS' function below. All foreign
exported functions are run in a bound thread (bound to the OS thread that
called the function). Also, the @main@ action of every Haskell program is
run in a bound thread.

Why do we need this? Because if a foreign library is called from a thread
created using 'forkIO', it won't have access to any /thread-local state/ -
state variables that have specific values for each OS thread
(see POSIX's @pthread_key_create@ or Win32's @TlsAlloc@). Therefore, some
libraries (OpenGL, for example) will not work from a thread created using
'forkIO'. They work fine in threads created using 'forkOS' or when called
from @main@ or from a @foreign export@.

In terms of performance, 'forkOS' (aka bound) threads are much more
expensive than 'forkIO' (aka unbound) threads, because a 'forkOS'
thread is tied to a particular OS thread, whereas a 'forkIO' thread
can be run by any OS thread.  Context-switching between a 'forkOS'
thread and a 'forkIO' thread is many times more expensive than between
two 'forkIO' threads.

Note in particular that the main program thread (the thread running
@Main.main@) is always a bound thread, so for good concurrency
performance you should ensure that the main thread is not doing
repeated communication with other threads in the system.  Typically
this means forking subthreads to do the work using 'forkIO', and
waiting for the results in the main thread.

-}-- | 'True' if bound threads are supported.
-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'
-- | 'True' if bound threads are supported.-- will always return 'False' and both 'forkOS' and 'runInBoundThread' will
-- fail.-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'
foreign-- will always return 'False' and both 'forkOS' and 'runInBoundThread' willimport ccall rtsSupportsBoundThreads :: Bool
-- fail.
foreign import ccall rtsSupportsBoundThreads :: Bool
{- |
Like 'forkIO', this sparks off a new thread to run the 'IO'
computation passed as the first argument, and returns the 'ThreadId'
of the newly created thread.

However, 'forkOS' creates a /bound/ thread, which is necessary if you
need to call foreign (non-Haskell) libraries that make use of
thread-local state, such as OpenGL (see "Control.Concurrent#boundthreads").

Using 'forkOS' instead of 'forkIO' makes no difference at all to the
scheduling behaviour of the Haskell runtime system.  It is a common
misconception that you need to use 'forkOS' instead of 'forkIO' to
avoid blocking all the Haskell threads when making a foreign call;
this isn't the case.  To allow foreign calls to be made without
blocking all the Haskell threads (with GHC), it is only necessary to
use the @-threaded@ option when linking your program, and to make sure
the foreign import is not marked @unsafe@.
-}forkOS :: IO () -> IO ThreadId

forkOSforeign::export ()ccall-> IOforkOS_entry
    :: StablePtr (IO ()) -> IO ()
foreign export ccall forkOS_entry
foreign:: StablePtrimport ccallIO ("forkOS_entry")) -> IO ()   forkOS_entry_reimported
    :: StablePtr (IO ()) -> IO ()
foreign import ccall "forkOS_entry" forkOS_entry_reimported
forkOS_entry:: StablePtr:: StablePtrIO ()) ->(IO(() -> IO ()
forkOS_entry stableAction = do
forkOS_entryaction::<-deRefStablePtrIO ())stableAction-> IO ()
forkOS_entryaction = do
        action <- deRefStablePtr stableAction
foreign action ccall forkOS_createThread
    :: StablePtr (IO ()) -> IO CInt
foreign import ccall forkOS_createThread
failNonThreaded:: StablePtr::IOIO()) -> IO CInt
failNonThreaded = fail $ "RTS doesn't support multiple OS threads "
failNonThreaded :: IO a++"(use ghc -threaded when linking)"
failNonThreaded = fail $ "RTS doesn't support multiple OS threads "
forkOS action0         ++"(use ghc -threaded when linking)"
    | rtsSupportsBoundThreads = do
forkOS action0mv <- newEmptyMVar
    | rtsSupportsBoundThreadsb <- Exception.getMaskingState= do
        mvlet<- newEmptyMVar
        b <--- async exceptions are masked in the child if they are masked
        let -- in the parent, as for forkIO (see #1048). forkOS_createThread
            -- creates a thread with exceptions masked by default.-- async exceptions are masked in the child if they are masked
            action1-- in the parent, as for forkIO (see #1048). forkOS_createThread= case b of
            -- creates a thread with exceptions masked by default.Unmasked -> unsafeUnmask action0
            action1 = caseMaskedInterruptible of             -> action0
                        UnmaskedMaskedUninterruptible unsafeUnmask-> action0uninterruptibleMask_ action0
                        MaskedInterruptible -> action0
            action_plus MaskedUninterruptible= Exception.catch action1 uninterruptibleMask_childHandler        action0

        entry<- newStablePtr= Exception.catch(myThreadId action1>>= putMVarmv >> action_plus)
        err <- forkOS_createThread entry
        entrywhen (<-errnewStablePtr/= 0) $ fail(myThreadId"Cannot create OS thread." putMVar mv >> action_plus)
        err <- forkOS_createThreadtakeMVar mv         entry
        whenfreeStablePtrerr /= 0)entry fail "Cannot create OS thread."
        tidreturn<- takeMVartid      mv
    | otherwise= failNonThreaded
        return tid
-- | Returns 'True' if the calling thread is /bound/, that is, if it is otherwise = failNonThreaded
-- safe to use foreign libraries that rely on thread-local state from the
-- calling thread.-- | Returns 'True' if the calling thread is /bound/, that is, if it is
isCurrentThreadBound-- safe to use foreign libraries that rely on thread-local state from the:: IO Bool
-- calling thread.isCurrentThreadBound = IO $ \ s# ->
isCurrentThreadBoundcase isCurrentThreadBound#:: IO Bools# of
isCurrentThreadBound(# s2#, flg #)= IO $(#\s2#,->isTrue# (flg /=# 0#) #)
     case isCurrentThreadBound# s# of
         (# s2#, flg #) -> (# s2#, isTrue# (flg /=# 0#) #)
{- |
Run the 'IO' computation passed as the first argument. If the calling thread
is not /bound/, a bound thread is created temporarily. @runInBoundThread@
doesn't finish until the 'IO' computation finishes.

You can wrap a series of foreign function calls that rely on thread-local state
with @runInBoundThread@ so that you can use them without knowing whether the
current thread is /bound/.
-}runInBoundThread :: IO a -> IO a

runInBoundThread ::action a -> IO a
    | rtsSupportsBoundThreads = do
runInBoundThreadbound <- actionisCurrentThreadBound
    | rtsSupportsBoundThreadsif bound              = do
        boundthen<- isCurrentThreadBoundaction
        if boundelse do
            thenref<- newIORef undefined
            elselet action_plus = Exception.try action >>= writeIORef ref
                refbracket<- newIORef(newStablePtraction_plus)
                let action_plusfreeStablePtr= Exception.try action >>= writeIORef ref
                bracket (newStablePtr\cEntry -> forkOS_entry_reimported)          cEntry >> readIORef ref) >>=
                  unsafeResult
    | otherwise = failNonThreaded\cEntry -> forkOS_entry_reimported cEntry >> readIORef ref) >>=
                  unsafeResult
{- |
Run the 'IO' computation passed as the first argument. If the calling thread
is /bound/, an unbound thread is created temporarily using 'forkIO'.
@runInBoundThread@ doesn't finish until the 'IO' computation finishes.

Use this function /only/ in the rare case that you have actually observed a
performance loss due to the use of bound threads. A program that
doesn't need it's main thread to be bound and makes /heavy/ use of concurrency
(e.g. a web server), might want to wrap it's @main@ action in
@runInUnboundThread@.

Note that exceptions which are thrown to the current thread are thrown in turn
to the thread that is executing the given computation. This ensures there's
always a way of killing the forked thread.
-}   otherwise = failNonThreaded

{- |
Run the 'IO' computation passed as the first argument. If the calling thread
is /bound/, an unbound thread is created temporarily using 'forkIO'.
@runInBoundThread@ doesn't finish until the 'IO' computation finishes.

Use this function /only/ in the rare case that you have actually observed a
performance loss due to the use of bound threads. A program that
doesn't need it's main thread to be bound and makes /heavy/ use of concurrency
(e.g. a web server), might want to wrap it's @main@ action in
@runInUnboundThread@.

Note that exceptions which are thrown to the current thread are thrown in turn
to the thread that is executing the given computation. This ensures there's
always a way of killing the forked thread.
-}runInUnboundThread :: IO a -> IO a

runInUnboundThread ::action a=->doIO a
  bound <- isCurrentThreadBound
runInUnboundThreadif bound         action = do
  boundthen<-doisCurrentThreadBound
  if boundmv <- newEmptyMVar
    thenmask$ \restore -> do
      mvtid<- newEmptyMVar<- forkIO $ Exception.try (restore action) >>= putMVar mv
      masklet$waitrestore= takeMVar-> do mv `Exception.catch` \(e :: SomeException) ->
          tid <- forkIOException.throwTo Exception.try (restoretid e >>actionwait ) >>= putMVar mv
          letwaitwait>>= =unsafeResult mv `Exception.catch` \(e :: SomeException) ->
        else action      Exception.throwTo tid e >> wait
          wait >>= unsafeResult
unsafeResultelse action:: Either SomeException a -> IO a
unsafeResult = either Exception.throwIO return
unsafeResult :: Either SomeException a -> IO a
unsafeResult-- ---------------------------------------------------------------------------= either Exception.throwIO return
-- threadWaitRead/threadWaitWrite
-- ---------------------------------------------------------------------------
-- threadWaitRead/threadWaitWrite-- | Block the current thread until data is available to read on the
-- given file descriptor (GHC only).
---- | Block the current thread until data is available to read on the
-- given file descriptor (GHC only).-- This will throw an 'IOError' if the file descriptor was closed
---- while this thread was blocked.  To safely close a file descriptor
-- that has been used with 'threadWaitRead', use-- This will throw an 'IOError' if the file descriptor was closed
-- 'GHC.Conc.closeFdWith'.-- while this thread was blocked.  To safely close a file descriptor
threadWaitRead-- that has been used with 'threadWaitRead', use:: Fd -> IO ()
threadWaitRead-- 'GHC.Conc.closeFdWith'.fd
threadWaitRead#ifdef mingw32_HOST_OS:: Fd -> IO ()
threadWaitRead-- we have no IO manager implementing threadWaitRead on Windows.
  -- fdReady does the right thing, but we have to call it in a
  -- separate thread, otherwise threadWaitRead won't be interruptible,
  -- and this only works with -threaded.
  | threaded  = withThread (waitFd fd 0)
  | otherwise = case fd of
                  0 -> do _ <- hWaitForInput stdin (-1)
                          return ()
                        -- hWaitForInput does work properly, but we can only
                        -- do this for stdin since we know its FD.
                  _ -> error "threadWaitRead requires -threaded on Windows, or use System.IO.hWaitForInput"
#else
  =  GHC.Conc.threadWaitRead fd
#endif

-- | Block the current thread until data can be written to the
-- given file descriptor (GHC only).
--
-- This will throw an 'IOError' if the file descriptor was closed
-- while this thread was blocked.  To safely close a file descriptor
-- that has been used with 'threadWaitWrite', use
-- 'GHC.Conc.closeFdWith'.
threadWaitWrite :: Fd -> IO ()
threadWaitWrite fd
#ifdef mingw32_HOST_OS
  | threaded  = withThread (waitFd fd 1)
  | otherwise = error "threadWaitWrite requires -threaded on Windows"
#else
  = GHC.Conc.threadWaitWrite fd
#endif

-- | Returns an STM action that can be used to wait for data
-- to read from a file descriptor. The second returned value
-- is an IO action that can be used to deregister interest
-- in the file descriptor.
--
-- /Since: 4.7.0.0/
threadWaitReadSTM :: Fd -> IO (STM (), IO ())
threadWaitReadSTM fd
#ifdef mingw32_HOST_OS
  | threaded = do v <- newTVarIO Nothing
                  mask_ $ void $ forkIO $ do result <- try (waitFd fd 0)
                                             atomically (writeTVar v $ Just result)
                  let waitAction = do result <- readTVar v
                                      case result of
                                        Nothing         -> retry
                                        Just (Right ()) -> return ()
                                        Just (Left e)   -> throwSTM (e :: IOException)
                  let killAction = return ()
                  return (waitAction, killAction)
  | otherwise = error "threadWaitReadSTM requires -threaded on Windows"
#else
  = GHC.Conc.threadWaitReadSTM fd
#endif

-- | Returns an STM action that can be used to wait until data
-- can be written to a file descriptor. The second returned value
-- is an IO action that can be used to deregister interest
-- in the file descriptor.
--
-- /Since: 4.7.0.0/
threadWaitWriteSTM :: Fd -> IO (STM (), IO ())
threadWaitWriteSTM fd
#ifdef mingw32_HOST_OS
  | threaded = do v <- newTVarIO Nothing
                  mask_ $ void $ forkIO $ do result <- try (waitFd fd 1)
                                             atomically (writeTVar v $ Just result)
                  let waitAction = do result <- readTVar v
                                      case result of
                                        Nothing         -> retry
                                        Just (Right ()) -> return ()
                                        Just (Left e)   -> throwSTM (e :: IOException)
                  let killAction = return ()
                  return (waitAction, killAction)
  | otherwise = error "threadWaitWriteSTM requires -threaded on Windows"
#else
  = GHC.Conc.threadWaitWriteSTM fd
#endif

#ifdef mingw32_HOST_OS
foreign import ccall unsafe "rtsSupportsBoundThreads" threaded :: Bool

withThread :: IO a -> IO a
withThread io = do
  m <- newEmptyMVar
  _ <- mask_ $ forkIO $ try io >>= putMVar m
  x <- takeMVar m
  case x of
    Right a -> return a
    Left e  -> throwIO (e :: IOException)

waitFd :: Fd -> CInt -> IO ()
waitFd fd write = do
   throwErrnoIfMinus1_ "fdReady" $
        fdReady (fromIntegral fd) write iNFINITE 0

iNFINITE :: CInt
iNFINITE = 0xFFFFFFFF -- urgh

foreign import ccall safe "fdReady"
  fdReady :: CInt -> CInt -> CInt -> CInt -> IO CInt
#endif

-- ---------------------------------------------------------------------------
-- More docs

{- $osthreads

      #osthreads# In GHC, threads created by 'forkIO' are lightweight threads, and
      are managed entirely by the GHC runtime.  Typically Haskell
      threads are an order of magnitude or two more efficient (in
      terms of both time and space) than operating system threads.

      The downside of having lightweight threads is that only one can
      run at a time, so if one thread blocks in a foreign call, for
      example, the other threads cannot continue.  The GHC runtime
      works around this by making use of full OS threads where
      necessary.  When the program is built with the @-threaded@
      option (to link against the multithreaded version of the
      runtime), a thread making a @safe@ foreign call will not block
      the other threads in the system; another OS thread will take
      over running Haskell threads until the original call returns.
      The runtime maintains a pool of these /worker/ threads so that
      multiple Haskell threads can be involved in external calls
      simultaneously.

      The "System.IO" library manages multiplexing in its own way.  On
      Windows systems it uses @safe@ foreign calls to ensure that
      threads doing I\/O operations don't block the whole runtime,
      whereas on Unix systems all the currently blocked I\/O requests
      are managed by a single thread (the /IO manager thread/) using
      a mechanism such as @epoll@ or @kqueue@, depending on what is
      provided by the host operating system.

      The runtime will run a Haskell thread using any of the available
      worker OS threads.  If you need control over which particular OS
      thread is used to run a given Haskell thread, perhaps because
      you need to call a foreign library that uses OS-thread-local
      state, then you need bound threads (see "Control.Concurrent#boundthreads").

      If you don't use the @-threaded@ option, then the runtime does
      not make use of multiple OS threads.  Foreign calls will block
      all other running Haskell threads until the call returns.  The
      "System.IO" library still does multiplexing, so there can be multiple
      threads doing I\/O, and this is handled internally by the runtime using
      @select@.
-}
{- $termination

      In a standalone GHC program, only the main thread is
      required to terminate in order for the process to terminate.
      Thus all other forked threads will simply terminate at the same
      time as the main thread (the terminology for this kind of
      behaviour is \"daemonic threads\").

      If you want the program to wait for child threads to
      finish before exiting, you need to program this yourself.  A
      simple mechanism is to have each child thread write to an
      'MVar' when it completes, and have the main
      thread wait on all the 'MVar's before
      exiting:

>   myForkIO :: IO () -> IO (MVar ())
>   myForkIO io = do
>     mvar <- newEmptyMVar
>     forkFinally io (\_ -> putMVar mvar ())
>     return mvar

      Note that we use 'forkFinally' to make sure that the
      'MVar' is written to even if the thread dies or
      is killed for some reason.

      A better method is to keep a global list of all child
      threads which we should wait for at the end of the program:

>    children :: MVar [MVar ()]
>    children = unsafePerformIO (newMVar [])
>
>    waitForChildren :: IO ()
>    waitForChildren = do
>      cs <- takeMVar children
>      case cs of
>        []   -> return ()
>        m:ms -> do
>           putMVar children ms
>           takeMVar m
>           waitForChildren
>
>    forkChild :: IO () -> IO ThreadId
>    forkChild io = do
>        mvar <- newEmptyMVar
>        childs <- takeMVar children
>        putMVar children (mvar:childs)
>        forkFinally io (\_ -> putMVar mvar ())
>
>     main =
>       later waitForChildren $
>       ...

      The main thread principle also applies to calls to Haskell from
      outside, using @foreign export@.  When the @foreign export@ed
      function is invoked, it starts a new main thread, and it returns
      when this main thread terminates.  If the call causes new
      threads to be forked, they may remain in the system after the
      @foreign export@ed function has returned.
-}
{- $preemption

      GHC implements pre-emptive multitasking: the execution of
      threads are interleaved in a random fashion.  More specifically,
      a thread may be pre-empted whenever it allocates some memory,
      which unfortunately means that tight loops which do no
      allocation tend to lock out other threads (this only seems to
      happen with pathological benchmark-style code, however).

      The rescheduling timer runs on a 20ms granularity by
      default, but this may be altered using the
      @-i\<n\>@ RTS option.  After a rescheduling
      \"tick\" the running thread is pre-empted as soon as
      possible.

      One final note: the
      @aaaa@ @bbbb@ example may not
      work too well on GHC (see Scheduling, above), due
      to the locking on a 'System.IO.Handle'.  Only one thread
      may hold the lock on a 'System.IO.Handle' at any one
      time, so if a reschedule happens while a thread is holding the
      lock, the other thread won't be able to run.  The upshot is that
      the switch from @aaaa@ to
      @bbbbb@ happens infrequently.  It can be
      improved by lowering the reschedule tick period.  We also have a
      patch that causes a reschedule whenever a thread waiting on a
      lock is woken up, but haven't found it to be useful for anything
      other than this example :-)
-}
{- $deadlock

GHC attempts to detect when threads are deadlocked using the garbage
collector.  A thread that is not reachable (cannot be found by
following pointers from live objects) must be deadlocked, and in this
case the thread is sent an exception.  The exception is either
'BlockedIndefinitelyOnMVar', 'BlockedIndefinitelyOnSTM',
'NonTermination', or 'Deadlock', depending on the way in which the
thread is deadlocked.

Note that this feature is intended for debugging, and should not be
relied on for the correct operation of your program.  There is no
guarantee that the garbage collector will be accurate enough to detect
your deadlock, and no guarantee that the garbage collector will run in
a timely enough manner.  Basically, the same caveats as for finalizers
apply to deadlock detection.

There is a subtle interaction between deadlock detection and
finalizers (as created by 'Foreign.Concurrent.newForeignPtr' or the
functions in "System.Mem.Weak"): if a thread is blocked waiting for a
finalizer to run, then the thread will be considered deadlocked and
sent an exception.  So preferably don't do this, but if you have no

==============
../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs
==============
lengths:(30839,24699)

==============

({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:1:1 }
 Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,28)) "{-# LANGUAGE Trustworthy #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (5,6)) "{-# LANGUAGE CPP\n           , MagicHash\n           , UnboxedTuples\n           , ScopedTypeVariables\n  #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,45)) "{-# OPTIONS_GHC -fno-warn-unused-imports #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,43)) "{-# OPTIONS_GHC -fno-warn-deprecations #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-42),DP (0,2)) "{-# OPTIONS_GHC -fno-warn-unused-imports #-}" Nothing),DP (0,-42)),((AnnComment DComment (DP (1,1),DP (1,43)) "{-# OPTIONS_GHC -fno-warn-deprecations #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-42),DP (0,25)) "-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN" Nothing),DP (0,-42)),((AnnComment DComment (DP (1,1),DP (1,45)) "-- and Control.Concurrent.SampleVar imports." Nothing),DP (1,1)),((AnnComment DComment (DP (0,-44),DP (0,23)) "-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN" Nothing),DP (0,-44)),((AnnComment DComment (DP (1,1),DP (1,45)) "-- and Control.Concurrent.SampleVar imports." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "-- |" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-4),DP (0,73)) "-----------------------------------------------------------------------------" Nothing),DP (0,-4)),((AnnComment DComment (DP (1,1),DP (1,5)) "-- |" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-4),DP (0,32)) "-- Module      :  Control.Concurrent" Nothing),DP (0,-4)),((AnnComment DComment (DP (1,1),DP (1,37)) "-- Module      :  Control.Concurrent" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-36),DP (0,16)) "-- Copyright   :  (c) The University of Glasgow 2001" Nothing),DP (0,-36)),((AnnComment DComment (DP (1,1),DP (1,53)) "-- Copyright   :  (c) The University of Glasgow 2001" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-52),DP (0,13)) "-- License     :  BSD-style (see the file libraries/base/LICENSE)" Nothing),DP (0,-52)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,63)) "-- License     :  BSD-style (see the file libraries/base/LICENSE)" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,37)) "-- Maintainer  :  libraries@haskell.org" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,31)) "-- Stability   :  experimental" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-30),DP (0,9)) "-- Maintainer  :  libraries@haskell.org" Nothing),DP (0,-30)),((AnnComment DComment (DP (1,1),DP (1,31)) "-- Stability   :  experimental" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-30),DP (0,14)) "-- Portability :  non-portable (concurrency)" Nothing),DP (0,-30)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,42)) "-- Portability :  non-portable (concurrency)" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,57)) "-- A common interface to a collection of useful concurrency" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,17)) "-- abstractions." Nothing),DP (1,1)),((AnnComment DComment (DP (0,-16),DP (0,43)) "-- A common interface to a collection of useful concurrency" Nothing),DP (0,-16)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,14)) "-- abstractions." Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,75)) "-----------------------------------------------------------------------------" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,7)) "module" Nothing),DP (1,1)),((AnnComment DComment (DP (0,1),DP (0,19)) "Control.Concurrent" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((G AnnModule),DP (27,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "unsafe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,26)) "\"rtsSupportsBoundThreads\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "Bool" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "m" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "mask_" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) ">>=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "putMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "x" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "takeMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "x" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,4)) "->" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,8)) "throwIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "Fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,4),DP (1,4)) "" Nothing),DP (1,4)),((AnnComment DComment (DP (0,0),DP (0,19)) "throwErrnoIfMinus1_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (1,9),DP (1,16)) "fdReady" Nothing),DP (1,9)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,12)) "fromIntegral" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "iNFINITE" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "0xFFFFFFFF" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "-- urgh" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "safe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,10)) "fdReady" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,79)) "-- ---------------------------------------------------------------------------" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,13)) "-- More docs" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (42,3)) "{- $osthreads\n\n      #osthreads# In GHC, threads created by 'forkIO' are lightweight threads, and\n      are managed entirely by the GHC runtime.  Typically Haskell\n      threads are an order of magnitude or two more efficient (in\n      terms of both time and space) than operating system threads.\n\n      The downside of having lightweight threads is that only one can\n      run at a time, so if one thread blocks in a foreign call, for\n      example, the other threads cannot continue.  The GHC runtime\n      works around this by making use of full OS threads where\n      necessary.  When the program is built with the @-threaded@\n      option (to link against the multithreaded version of the\n      runtime), a thread making a @safe@ foreign call will not block\n      the other threads in the system; another OS thread will take\n      over running Haskell threads until the original call returns.\n      The runtime maintains a pool of these /worker/ threads so that\n      multiple Haskell threads can be involved in external calls\n      simultaneously.\n\n      The \"System.IO\" library manages multiplexing in its own way.  On\n      Windows systems it uses @safe@ foreign calls to ensure that\n      threads doing I\\/O operations don't block the whole runtime,\n      whereas on Unix systems all the currently blocked I\\/O requests\n      are managed by a single thread (the /IO manager thread/) using\n      a mechanism such as @epoll@ or @kqueue@, depending on what is\n      provided by the host operating system.\n\n      The runtime will run a Haskell thread using any of the available\n      worker OS threads.  If you need control over which particular OS\n      thread is used to run a given Haskell thread, perhaps because\n      you need to call a foreign library that uses OS-thread-local\n      state, then you need bound threads (see \"Control.Concurrent#boundthreads\").\n\n      If you don't use the @-threaded@ option, then the runtime does\n      not make use of multiple OS threads.  Foreign calls will block\n      all other running Haskell threads until the call returns.  The\n      \"System.IO\" library still does multiplexing, so there can be multiple\n      threads doing I\\/O, and this is handled internally by the runtime using\n      @select@.\n-}" Nothing),DP (2,1)),((AnnComment DComment (DP (-40,1),DP (1,3)) "{- $osthreads\n\n      #osthreads# In GHC, threads created by 'forkIO' are lightweight threads, and\n\n      are managed entirely by the GHC runtime.  Typically Haskell\n      threads are an order of magnitude or two more efficient (in\n      terms of both time and space) than operating system threads.\n\n      The downside of having lightweight threads is that only one can\n      run at a time, so if one thread blocks in a foreign call, for\n      example, the other threads cannot continue.  The GHC runtime\n      works around this by making use of full OS threads where\n      necessary.  When the program is built with the @-threaded@\n      option (to link against the multithreaded version of the\n      runtime), a thread making a @safe@ foreign call will not block\n      the other threads in the system; another OS thread will take\n      over running Haskell threads until the original call returns.\n      The runtime maintains a pool of these /worker/ threads so that\n      multiple Haskell threads can be involved in external calls\n      simultaneously.\n\n      The \"System.IO\" library manages multiplexing in its own way.  On\n      Windows systems it uses @safe@ foreign calls to ensure that\n      threads doing I\\/O operations don't block the whole runtime,\n      whereas on Unix systems all the currently blocked I\\/O requests\n      are managed by a single thread (the /IO manager thread/) using\n      a mechanism such as @epoll@ or @kqueue@, depending on what is\n      provided by the host operating system.\n\n      The runtime will run a Haskell thread using any of the available\n      worker OS threads.  If you need control over which particular OS\n      thread is used to run a given Haskell thread, perhaps because\n      you need to call a foreign library that uses OS-thread-local\n      state, then you need bound threads (see \"Control.Concurrent#boundthreads\").\n\n      If you don't use the @-threaded@ option, then the runtime does\n      not make use of multiple OS threads.  Foreign calls will block\n      all other running Haskell threads until the call returns.  The\n      \"System.IO\" library still does multiplexing, so there can be multiple\n      threads doing I\\/O, and this is handled internally by the runtime using\n      @select@.\n-}" Nothing),DP (-40,1)),((AnnComment DComment (DP (1,1),DP (59,3)) "{- $termination\n\n      In a standalone GHC program, only the main thread is\n      required to terminate in order for the process to terminate.\n      Thus all other forked threads will simply terminate at the same\n      time as the main thread (the terminology for this kind of\n      behaviour is \\\"daemonic threads\\\").\n\n      If you want the program to wait for child threads to\n      finish before exiting, you need to program this yourself.  A\n      simple mechanism is to have each child thread write to an\n      'MVar' when it completes, and have the main\n      thread wait on all the 'MVar's before\n      exiting:\n\n>   myForkIO :: IO () -> IO (MVar ())\n>   myForkIO io = do\n>     mvar <- newEmptyMVar\n>     forkFinally io (\\_ -> putMVar mvar ())\n>     return mvar\n\n      Note that we use 'forkFinally' to make sure that the\n      'MVar' is written to even if the thread dies or\n      is killed for some reason.\n\n      A better method is to keep a global list of all child\n      threads which we should wait for at the end of the program:\n\n>    children :: MVar [MVar ()]\n>    children = unsafePerformIO (newMVar [])\n>\n>    waitForChildren :: IO ()\n>    waitForChildren = do\n>      cs <- takeMVar children\n>      case cs of\n>        []   -> return ()\n>        m:ms -> do\n>           putMVar children ms\n>           takeMVar m\n>           waitForChildren\n>\n>    forkChild :: IO () -> IO ThreadId\n>    forkChild io = do\n>        mvar <- newEmptyMVar\n>        childs <- takeMVar children\n>        putMVar children (mvar:childs)\n>        forkFinally io (\\_ -> putMVar mvar ())\n>\n>     main =\n>       later waitForChildren $\n>       ...\n\n      The main thread principle also applies to calls to Haskell from\n      outside, using @foreign export@.  When the @foreign export@ed\n      function is invoked, it starts a new main thread, and it returns\n      when this main thread terminates.  If the call causes new\n      threads to be forked, they may remain in the system after the\n      @foreign export@ed function has returned.\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (-57,1),DP (1,3)) "{- $termination\n\n      In a standalone GHC program, only the main thread is\n      required to terminate in order for the process to terminate.\n      Thus all other forked threads will simply terminate at the same\n      time as the main thread (the terminology for this kind of\n      behaviour is \\\"daemonic threads\\\").\n\n      If you want the program to wait for child threads to\n      finish before exiting, you need to program this yourself.  A\n      simple mechanism is to have each child thread write to an\n      'MVar' when it completes, and have the main\n      thread wait on all the 'MVar's before\n      exiting:\n\n>   myForkIO :: IO () -> IO (MVar ())\n>   myForkIO io = do\n>     mvar <- newEmptyMVar\n>     forkFinally io (\\_ -> putMVar mvar ())\n>     return mvar\n\n      Note that we use 'forkFinally' to make sure that the\n      'MVar' is written to even if the thread dies or\n      is killed for some reason.\n\n      A better method is to keep a global list of all child\n      threads which we should wait for at the end of the program:\n\n>    children :: MVar [MVar ()]\n>    children = unsafePerformIO (newMVar [])\n>\n>    waitForChildren :: IO ()\n>    waitForChildren = do\n>      cs <- takeMVar children\n>      case cs of\n>        []   -> return ()\n>        m:ms -> do\n>           putMVar children ms\n>           takeMVar m\n>           waitForChildren\n>\n>    forkChild :: IO () -> IO ThreadId\n>    forkChild io = do\n>        mvar <- newEmptyMVar\n>        childs <- takeMVar children\n>        putMVar children (mvar:childs)\n>        forkFinally io (\\_ -> putMVar mvar ())\n>\n>     main =\n>       later waitForChildren $\n>       ...\n\n      The main thread principle also applies to calls to Haskell from\n      outside, using @foreign export@.  When the @foreign export@ed\n      function is invoked, it starts a new main thread, and it returns\n      when this main thread terminates.  If the call causes new\n      threads to be forked, they may remain in the system after the\n      @foreign export@ed function has returned.\n-}" Nothing),DP (-57,1)),((AnnComment DComment (DP (1,1),DP (29,3)) "{- $preemption\n\n      GHC implements pre-emptive multitasking: the execution of\n      threads are interleaved in a random fashion.  More specifically,\n      a thread may be pre-empted whenever it allocates some memory,\n      which unfortunately means that tight loops which do no\n      allocation tend to lock out other threads (this only seems to\n      happen with pathological benchmark-style code, however).\n\n      The rescheduling timer runs on a 20ms granularity by\n      default, but this may be altered using the\n      @-i\\<n\\>@ RTS option.  After a rescheduling\n      \\\"tick\\\" the running thread is pre-empted as soon as\n      possible.\n\n      One final note: the\n      @aaaa@ @bbbb@ example may not\n      work too well on GHC (see Scheduling, above), due\n      to the locking on a 'System.IO.Handle'.  Only one thread\n      may hold the lock on a 'System.IO.Handle' at any one\n      time, so if a reschedule happens while a thread is holding the\n      lock, the other thread won't be able to run.  The upshot is that\n      the switch from @aaaa@ to\n      @bbbbb@ happens infrequently.  It can be\n      improved by lowering the reschedule tick period.  We also have a\n      patch that causes a reschedule whenever a thread waiting on a\n      lock is woken up, but haven't found it to be useful for anything\n      other than this example :-)\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (-27,1),DP (1,3)) "{- $preemption\n\n      GHC implements pre-emptive multitasking: the execution of\n      threads are interleaved in a random fashion.  More specifically,\n      a thread may be pre-empted whenever it allocates some memory,\n      which unfortunately means that tight loops which do no\n      allocation tend to lock out other threads (this only seems to\n      happen with pathological benchmark-style code, however).\n\n      The rescheduling timer runs on a 20ms granularity by\n      default, but this may be altered using the\n      @-i\\<n\\>@ RTS option.  After a rescheduling\n      \\\"tick\\\" the running thread is pre-empted as soon as\n      possible.\n\n      One final note: the\n      @aaaa@ @bbbb@ example may not\n      work too well on GHC (see Scheduling, above), due\n      to the locking on a 'System.IO.Handle'.  Only one thread\n      may hold the lock on a 'System.IO.Handle' at any one\n      time, so if a reschedule happens while a thread is holding the\n      lock, the other thread won't be able to run.  The upshot is that\n      the switch from @aaaa@ to\n      @bbbbb@ happens infrequently.  It can be\n      improved by lowering the reschedule tick period.  We also have a\n      patch that causes a reschedule whenever a thread waiting on a\n      lock is woken up, but haven't found it to be useful for anything\n      other than this example :-)\n-}" Nothing),DP (-27,1)),((AnnComment DComment (DP (1,1),DP (26,3)) "{- $deadlock\n\nGHC attempts to detect when threads are deadlocked using the garbage\ncollector.  A thread that is not reachable (cannot be found by\nfollowing pointers from live objects) must be deadlocked, and in this\ncase the thread is sent an exception.  The exception is either\n'BlockedIndefinitelyOnMVar', 'BlockedIndefinitelyOnSTM',\n'NonTermination', or 'Deadlock', depending on the way in which the\nthread is deadlocked.\n\nNote that this feature is intended for debugging, and should not be\nrelied on for the correct operation of your program.  There is no\nguarantee that the garbage collector will be accurate enough to detect\nyour deadlock, and no guarantee that the garbage collector will run in\na timely enough manner.  Basically, the same caveats as for finalizers\napply to deadlock detection.\n\nThere is a subtle interaction between deadlock detection and\nfinalizers (as created by 'Foreign.Concurrent.newForeignPtr' or the\nfunctions in \"System.Mem.Weak\"): if a thread is blocked waiting for a\nfinalizer to run, then the thread will be considered deadlocked and\nsent an exception.  So preferably don't do this, but if you have no\nalternative then it is possible to prevent the thread from being\nconsidered deadlocked by making a 'StablePtr' pointing to it.  Don't\nforget to release the 'StablePtr' later with 'freeStablePtr'.\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (-24,1),DP (1,3)) "{- $deadlock\n\nGHC attempts to detect when threads are deadlocked using the garbage\ncollector.  A thread that is not reachable (cannot be found by\nfollowing pointers from live objects) must be deadlocked, and in this\ncase the thread is sent an exception.  The exception is either\n'BlockedIndefinitelyOnMVar', 'BlockedIndefinitelyOnSTM',\n'NonTermination', or 'Deadlock', depending on the way in which the\nthread is deadlocked.\n\nNote that this feature is intended for debugging, and should not be\nrelied on for the correct operation of your program.  There is no\nguarantee that the garbage collector will be accurate enough to detect\nyour deadlock, and no guarantee that the garbage collector will run in\na timely enough manner.  Basically, the same caveats as for finalizers\napply to deadlock detection.\n\nThere is a subtle interaction between deadlock detection and\nfinalizers (as created by 'Foreign.Concurrent.newForeignPtr' or the\nfunctions in \"System.Mem.Weak\"): if a thread is blocked waiting for a\nfinalizer to run, then the thread will be considered deadlocked and\nsent an exception.  So preferably don't do this, but if you have no\nalternative then it is possible to prevent the thread from being\nconsidered deadlocked by making a 'StablePtr' pointing to it.  Don't\nforget to release the 'StablePtr' later with 'freeStablePtr'.\n-}" Nothing),DP (-24,1)),((AnnComment DComment (DP (0,-2),DP (0,-2)) "" Nothing),DP (0,-2)),((G AnnEofPos),DP (190,0))])
 (HsModule 
  (Just 
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:28:8-25 }
    Nothing{ModuleName: Control.Concurrent})) 
  (Just 
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(28,27)-(106,5)
     }
    Just (Ann (DP (0,-5)) (ColDelta 27) DP (0,1) [DComment (DP (0,-17),DP (0,6)) "-- * Concurrent Haskell" Nothing] [((G AnnOpenP),DP (0,-5)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- * GHC's implementation of concurrency" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- * GHC's implementation of concurrency" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,62)) "-- |This section describes features specific to GHC's" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- implementation of Concurrent Haskell." Nothing),DP (1,9)),((AnnComment DComment (DP (0,-40),DP (0,13)) "-- |This section describes features specific to GHC's" Nothing),DP (0,-40)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- implementation of Concurrent Haskell." Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,59)) "-- ** Haskell threads and Operating System threads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,59)) "-- ** Haskell threads and Operating System threads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,22)) "-- $osthreads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,22)) "-- $osthreads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,38)) "-- ** Terminating the program" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,38)) "-- ** Terminating the program" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,24)) "-- $termination" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,24)) "-- $termination" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,26)) "-- ** Pre-emption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,26)) "-- ** Pre-emption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- $preemption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- $preemption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- ** Deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- ** Deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,21)) "-- $deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,21)) "-- $deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,5),DP (1,6)) ")" Nothing),DP (1,5)),((AnnComment DComment (DP (0,1),DP (0,6)) "where" Nothing),DP (0,1)),((G AnnCloseP),DP (23,5))])
    [
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:35:9-16 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (7,9) [DComment (DP (1,9),DP (1,32)) "-- * Concurrent Haskell" Nothing,DComment (DP (1,9),DP (1,23)) "-- $conc_intro" Nothing,DComment (DP (1,9),DP (1,23)) "-- $conc_intro" Nothing,DComment (DP (1,9),DP (1,42)) "-- * Basic concurrency operations" Nothing,DComment (DP (1,9),DP (1,42)) "-- * Basic concurrency operations" Nothing,DComment (DP (1,9),DP (1,17)) "ThreadId" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [])
      (IEThingAbs 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:35:9-16 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-8),DP (0,2)) "myThreadId" Nothing),DP (0,-8)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: ThreadId})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:36:9-18 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:36:9-18 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: myThreadId})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:38:9-14 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (2,9) [DComment (DP (1,9),DP (1,15)) "forkIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:38:9-14 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-6),DP (0,5)) "forkFinally" Nothing),DP (0,-6)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: forkIO})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:39:9-19 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,4),DP (0,5)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:39:9-19 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-11),DP (0,5)) "forkIOWithUnmask" Nothing),DP (0,-11)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: forkFinally})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:40:9-24 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,4),DP (0,5)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:40:9-24 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-16),DP (0,-6)) "killThread" Nothing),DP (0,-16)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: forkIOWithUnmask})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:41:9-18 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:41:9-18 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-10),DP (0,-3)) "throwTo" Nothing),DP (0,-10)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: killThread})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:42:9-15 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:42:9-15 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: throwTo})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:45:9-14 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (3,9) [DComment (DP (1,9),DP (1,36)) "-- ** Threads with affinity" Nothing,DComment (DP (1,9),DP (1,15)) "forkOn" Nothing,DComment (DP (0,-6),DP (0,21)) "-- ** Threads with affinity" Nothing,DComment (DP (0,-21),DP (0,-20)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:45:9-14 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-6),DP (0,10)) "forkOnWithUnmask" Nothing),DP (0,-6)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: forkOn})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:46:9-24 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,9),DP (0,10)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:46:9-24 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-16),DP (0,2)) "getNumCapabilities" Nothing),DP (0,-16)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: forkOnWithUnmask})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:47:9-26 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:47:9-26 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: getNumCapabilities})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:48:9-26 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:48:9-26 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-18),DP (0,-2)) "threadCapability" Nothing),DP (0,-18)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: setNumCapabilities})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:49:9-24 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:49:9-24 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: threadCapability})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:54:9-13 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (5,9) [DComment (DP (1,9),DP (1,24)) "-- * Scheduling" Nothing,DComment (DP (1,9),DP (1,24)) "-- * Scheduling" Nothing,DComment (DP (1,9),DP (1,28)) "-- $conc_scheduling" Nothing,DComment (DP (1,9),DP (1,14)) "yield" Nothing,DComment (DP (0,-5),DP (0,14)) "-- $conc_scheduling" Nothing,DComment (DP (0,-14),DP (0,-13)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:54:9-13 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: yield})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:61:9-19 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (7,9) [DComment (DP (1,9),DP (1,23)) "-- ** Blocking" Nothing,DComment (DP (1,9),DP (1,23)) "-- ** Blocking" Nothing,DComment (DP (1,9),DP (1,21)) "-- $blocking" Nothing,DComment (DP (1,9),DP (1,21)) "-- $blocking" Nothing,DComment (DP (1,9),DP (1,22)) "-- ** Waiting" Nothing,DComment (DP (1,9),DP (1,20)) "threadDelay" Nothing,DComment (DP (0,-11),DP (0,2)) "-- ** Waiting" Nothing,DComment (DP (0,-2),DP (0,-1)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:61:9-19 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-11),DP (0,3)) "threadWaitRead" Nothing),DP (0,-11)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: threadDelay})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:62:9-22 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,2),DP (0,3)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:62:9-22 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-14),DP (0,1)) "threadWaitWrite" Nothing),DP (0,-14)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: threadWaitRead})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:63:9-23 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,0),DP (0,1)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:63:9-23 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-15),DP (0,2)) "threadWaitReadSTM" Nothing),DP (0,-15)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: threadWaitWrite})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:64:9-25 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:64:9-25 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-17),DP (0,1)) "threadWaitWriteSTM" Nothing),DP (0,-17)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: threadWaitReadSTM})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:65:9-26 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,0),DP (0,1)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:65:9-26 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: threadWaitWriteSTM})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:9-38 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (4,9) [DComment (DP (1,9),DP (1,40)) "-- * Communication abstractions" Nothing,DComment (DP (1,9),DP (1,40)) "-- * Communication abstractions" Nothing,DComment (DP (1,9),DP (1,15)) "module" Nothing,DComment (DP (0,1),DP (0,24)) "Control.Concurrent.MVar" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnComma),DP (0,0))])
      (IEModuleContents 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:16-38 }
        Nothing{ModuleName: Control.Concurrent.MVar}))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:9-38 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnComma),DP (0,0))])
      (IEModuleContents 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:16-38 }
        Nothing{ModuleName: Control.Concurrent.Chan}))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:9-38 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((AnnComment DComment (DP (0,-23),DP (0,1)) "Control.Concurrent.QSemN" Nothing),DP (0,-23)),((G AnnComma),DP (0,0))])
      (IEModuleContents 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:16-38 }
        Nothing{ModuleName: Control.Concurrent.QSem}))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:9-39 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,0),DP (0,1)) "," Nothing] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnComma),DP (0,0))])
      (IEModuleContents 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:16-39 }
        Nothing{ModuleName: Control.Concurrent.QSemN}))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:76:9-31 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (4,9) [DComment (DP (1,9),DP (1,27)) "-- * Bound Threads" Nothing,DComment (DP (1,9),DP (1,25)) "-- $boundthreads" Nothing,DComment (DP (0,-16),DP (0,2)) "-- * Bound Threads" Nothing,DComment (DP (1,9),DP (1,25)) "-- $boundthreads" Nothing,DComment (DP (0,-16),DP (0,7)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:76:9-31 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-23),DP (0,-17)) "forkOS" Nothing),DP (0,-23)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: rtsSupportsBoundThreads})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:77:9-14 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:77:9-14 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-6),DP (0,14)) "isCurrentThreadBound" Nothing),DP (0,-6)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: forkOS})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:78:9-28 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,13),DP (0,14)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:78:9-28 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-20),DP (0,-4)) "runInBoundThread" Nothing),DP (0,-20)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: isCurrentThreadBound})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:79:9-24 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:79:9-24 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-16),DP (0,2)) "runInUnboundThread" Nothing),DP (0,-16)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: runInBoundThread})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:80:9-26 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:80:9-26 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: runInUnboundThread})))),
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:83:9-22 }
      Just (Ann (DP (1,9)) (ColDelta 9) DP (3,9) [DComment (DP (1,9),DP (1,42)) "-- * Weak references to ThreadIds" Nothing,DComment (DP (1,9),DP (1,23)) "mkWeakThreadId" Nothing,DComment (DP (0,-14),DP (0,19)) "-- * Weak references to ThreadIds" Nothing,DComment (DP (0,-19),DP (0,-18)) "," Nothing] [])
      (IEVar 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:83:9-22 }
        Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
        (Unqual {OccName: mkWeakThreadId}))))])) 
  [
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:108:1-14 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,8)) "Prelude" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:108:8-14 }
      Nothing{ModuleName: Prelude}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-42 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,23)) "Control.Exception.Base" Nothing,DComment (DP (0,1),DP (0,3)) "as" Nothing,DComment (DP (0,1),DP (0,10)) "Exception" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnAs),DP (0,1)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:8-29 }
      Nothing{ModuleName: Control.Exception.Base}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Just {ModuleName: Exception}) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:1-20 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,14)) "GHC.Exception" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:8-20 }
      Nothing{ModuleName: GHC.Exception}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,1)-(114,62)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-13),DP (0,-5)) "GHC.Conc" Nothing,DComment (DP (0,1),DP (0,7)) "hiding" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,14)) "threadWaitRead" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,1),DP (0,16)) "threadWaitWrite" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:8-15 }
      Nothing{ModuleName: GHC.Conc}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (True) 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,17)-(114,62)
         }
        Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnHiding),DP (0,0)),((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])
        [
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:25-38
           }
          Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:25-38
             }
            Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-14),DP (0,3)) "threadWaitReadSTM" Nothing),DP (0,-14)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: threadWaitRead})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:41-55
           }
          Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:41-55
             }
            Just (Ann (DP (0,0)) (ColDelta 41) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-14),DP (0,-13)) "," Nothing),DP (0,-14)),((AnnComment DComment (DP (0,1),DP (0,19)) "threadWaitWriteSTM" Nothing),DP (0,1)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: threadWaitWrite})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:25-41
           }
          Just (Ann (DP (0,-1)) (ColDelta 25) DP (1,25) [DComment (DP (0,5),DP (0,6)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "qualified" Nothing,DComment (DP (0,1),DP (0,9)) "GHC.Conc" Nothing] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:25-41
             }
            Just (Ann (DP (0,-1)) (ColDelta 25) DP (1,25) [] [((G AnnVal),DP (0,-1)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: threadWaitReadSTM})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:44-61
           }
          Just (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:44-61
             }
            Just (Ann (DP (0,0)) (ColDelta 44) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: threadWaitWriteSTM}))))]))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1-25 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnQualified),DP (0,1)),((AnnComment DComment (DP (0,-9),DP (0,-3)) "GHC.IO" Nothing),DP (0,-9)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:18-25
       }
      Nothing{ModuleName: GHC.Conc}) 
     (Nothing) 
     (False) 
     (False) 
     (True) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:1-68 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-1),DP (0,0)) "(" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,2)) ".." Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,1),DP (0,19)) "unsafeInterleaveIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,1),DP (0,13)) "unsafeUnmask" Nothing,DComment (DP (0,1),DP (0,2)) ")" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:8-13 }
      Nothing{ModuleName: GHC.IO}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:25-68
         }
        Just (Ann (DP (0,8)) (ColDelta 25) DP (0,11) [DComment (DP (0,-6),DP (0,3)) "GHC.IORef" Nothing] [((G AnnOpenP),DP (0,0)),((AnnComment DComment (DP (0,-8),DP (0,-7)) ")" Nothing),DP (0,-8)),((G AnnCloseP),DP (0,1))])
        [
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-32
           }
          Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((AnnComment DComment (DP (0,-2),DP (0,6)) "newIORef" Nothing),DP (0,-2)),((G AnnOpenP),DP (0,0)),((G AnnDotdot),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnComma),DP (0,0))])
          (IEThingAll 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-28
             }
            Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: IO})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:35-52
           }
          Just (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:35-52
             }
            Just (Ann (DP (0,0)) (ColDelta 35) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-18),DP (0,-17)) "," Nothing),DP (0,-18)),((AnnComment DComment (DP (0,1),DP (0,10)) "readIORef" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,11)) "writeIORef" Nothing),DP (0,1)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: unsafeInterleaveIO})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:55-66
           }
          Just (Ann (DP (0,1)) (ColDelta 55) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:55-66
             }
            Just (Ann (DP (0,0)) (ColDelta 55) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: unsafeUnmask}))))]))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:1-59 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:8-16 }
      Nothing{ModuleName: GHC.IORef}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:25-59
         }
        Just (Ann (DP (0,9)) (ColDelta 25) DP (0,8) [DComment (DP (0,-9),DP (0,-1)) "GHC.Base" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,1))])
        [
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:27-34
           }
          Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:27-34
             }
            Just (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: newIORef})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:37-45
           }
          Just (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:37-45
             }
            Just (Ann (DP (0,0)) (ColDelta 37) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
            (Unqual {OccName: readIORef})))),
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:48-57
           }
          Just (Ann (DP (0,1)) (ColDelta 48) DP (0,1) [] [])
          (IEVar 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:48-57
             }
            Just (Ann (DP (0,0)) (ColDelta 48) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: writeIORef}))))]))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:1-15 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:8-15 }
      Nothing{ModuleName: GHC.Base}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:1-32 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,19)) "System.Posix.Types" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,1),DP (0,3)) "Fd" Nothing,DComment (DP (0,1),DP (0,2)) ")" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:8-25 }
      Nothing{ModuleName: System.Posix.Types}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Just 
      ((,) 
       (False) 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:27-32
         }
        Just (Ann (DP (0,2)) (ColDelta 27) DP (0,1) [DComment (DP (0,-18),DP (0,-1)) "Foreign.StablePtr" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,1))])
        [
         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:29-30
           }
          Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])
          (IEThingAbs 
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:29-30
             }
            Just (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])
            (Unqual {OccName: Fd}))))]))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:1-24 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:8-24 }
      Nothing{ModuleName: Foreign.StablePtr}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:1-22 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-17),DP (0,-2)) "Foreign.C.Types" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:8-22 }
      Nothing{ModuleName: Foreign.C.Types}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:1-20 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-15),DP (0,-2)) "Control.Monad" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:8-20 }
      Nothing{ModuleName: Control.Monad}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:1-30 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (8,1) [DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "Foreign.C" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "System.IO" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,11)) "Data.Maybe" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,5)) "Maybe" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,2)) ".." Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,24)) "Control.Concurrent.MVar" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:8-30 }
      Nothing{ModuleName: Control.Concurrent.MVar}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:1-30 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:8-30 }
      Nothing{ModuleName: Control.Concurrent.Chan}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:1-30 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:8-30 }
      Nothing{ModuleName: Control.Concurrent.QSem}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:1-31 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-23),DP (0,1)) "Control.Concurrent.QSemN" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])
    (ImportDecl 
     (Nothing) 
     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:8-31 }
      Nothing{ModuleName: Control.Concurrent.QSemN}) 
     (Nothing) 
     (False) 
     (False) 
     (False) 
     (False) 
     (Nothing) 
     (Nothing)))] 
  [
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1-71 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (66,1) [DComment (DP (1,1),DP (21,3)) "{- $conc_intro\n\nThe concurrency extension for Haskell is described in the paper\n/Concurrent Haskell/\n<http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz>.\n\nConcurrency is \\\"lightweight\\\", which means that both thread creation\nand context switching overheads are extremely low.  Scheduling of\nHaskell threads is done internally in the Haskell runtime system, and\ndoesn't make use of any operating system-supplied thread packages.\n\nHowever, if you want to interact with a foreign library that expects your\nprogram to use the operating system-supplied thread package, you can do so\nby using 'forkOS' instead of 'forkIO'.\n\nHaskell threads can communicate via 'MVar's, a kind of synchronised\nmutable variable (see \"Control.Concurrent.MVar\").  Several common\nconcurrency abstractions can be built from 'MVar's, and these are\nprovided by the \"Control.Concurrent\" library.\nIn GHC, threads may also communicate via exceptions.\n-}" Nothing,DComment (DP (-19,1),DP (1,3)) "{- $conc_intro\n\nThe concurrency extension for Haskell is described in the paper\n/Concurrent Haskell/\n<http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz>.\n\nConcurrency is \\\"lightweight\\\", which means that both thread creation\nand context switching overheads are extremely low.  Scheduling of\nHaskell threads is done internally in the Haskell runtime system, and\ndoesn't make use of any operating system-supplied thread packages.\n\nHowever, if you want to interact with a foreign library that expects your\nprogram to use the operating system-supplied thread package, you can do so\nby using 'forkOS' instead of 'forkIO'.\n\nHaskell threads can communicate via 'MVar's, a kind of synchronised\nmutable variable (see \"Control.Concurrent.MVar\").  Several common\nconcurrency abstractions can be built from 'MVar's, and these are\nprovided by the \"Control.Concurrent\" library.\nIn GHC, threads may also communicate via exceptions.\n-}" Nothing,DComment (DP (1,1),DP (18,3)) "{- $conc_scheduling\n\n    Scheduling may be either pre-emptive or co-operative,\n    depending on the implementation of Concurrent Haskell (see below\n    for information related to specific compilers).  In a co-operative\n    system, context switches only occur when you use one of the\n    primitives defined in this module.  This means that programs such\n    as:\n\n\n>   main = forkIO (write 'a') >> write 'b'\n>     where write c = putChar c >> write c\n\n    will print either @aaaaaaaaaaaaaa...@ or @bbbbbbbbbbbb...@,\n    instead of some random interleaving of @a@s and @b@s.  In\n    practice, cooperative multitasking is sufficient for writing\n    simple graphical user interfaces.\n-}" Nothing,DComment (DP (-16,1),DP (1,3)) "{- $conc_scheduling\n\n    Scheduling may be either pre-emptive or co-operative,\n    depending on the implementation of Concurrent Haskell (see below\n    for information related to specific compilers).  In a co-operative\n    system, context switches only occur when you use one of the\n    primitives defined in this module.  This means that programs such\n    as:\n\n\n>   main = forkIO (write 'a') >> write 'b'\n>     where write c = putChar c >> write c\n\n    will print either @aaaaaaaaaaaaaa...@ or @bbbbbbbbbbbb...@,\n    instead of some random interleaving of @a@s and @b@s.  In\n    practice, cooperative multitasking is sufficient for writing\n    simple graphical user interfaces.\n-}" Nothing,DComment (DP (1,1),DP (10,3)) "{- $blocking\nDifferent Haskell implementations have different characteristics with\nregard to which operations block /all/ threads.\n\nUsing GHC without the @-threaded@ option, all foreign calls will block\nall other Haskell threads in the system, although I\\/O operations will\nnot.  With the @-threaded@ option, only foreign calls with the @unsafe@\nattribute will block all other threads.\n\n-}" Nothing,DComment (DP (-8,1),DP (1,3)) "{- $blocking\nDifferent Haskell implementations have different characteristics with\nregard to which operations block /all/ threads.\n\nUsing GHC without the @-threaded@ option, all foreign calls will block\nall other Haskell threads in the system, although I\\/O operations will\nnot.  With the @-threaded@ option, only foreign calls with the @unsafe@\nattribute will block all other threads.\n\n-}" Nothing,DComment (DP (1,1),DP (1,75)) "-- | fork a thread and call the supplied function when the thread is about" Nothing,DComment (DP (1,1),DP (1,73)) "-- to terminate, with an exception or a returned value.  The function is" Nothing,DComment (DP (0,-72),DP (0,2)) "-- | fork a thread and call the supplied function when the thread is about" Nothing,DComment (DP (1,1),DP (1,47)) "-- called with asynchronous exceptions masked." Nothing,DComment (DP (0,-46),DP (0,26)) "-- to terminate, with an exception or a returned value.  The function is" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,44)) "-- called with asynchronous exceptions masked." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,32)) "-- > forkFinally action and_then =" Nothing,DComment (DP (1,1),DP (1,26)) "-- >   mask $ \\restore ->" Nothing,DComment (DP (0,-25),DP (0,9)) "-- > forkFinally action and_then =" Nothing,DComment (DP (1,1),DP (1,26)) "-- >   mask $ \\restore ->" Nothing,DComment (DP (0,-25),DP (0,26)) "-- >     forkIO $ try (restore action) >>= and_then" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,49)) "-- >     forkIO $ try (restore action) >>= and_then" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,62)) "-- This function is useful for informing the parent when a child" Nothing,DComment (DP (1,1),DP (1,28)) "-- terminates, for example." Nothing,DComment (DP (0,-27),DP (0,37)) "-- This function is useful for informing the parent when a child" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,25)) "-- terminates, for example." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,17)) "-- /Since: 4.6.0.0/" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,11)) "forkFinally" Nothing,DComment (DP (0,-11),DP (0,8)) "-- /Since: 4.6.0.0/" Nothing,DComment (DP (0,-7),DP (0,-5)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,6)) "Either" Nothing,DComment (DP (0,1),DP (0,14)) "SomeException" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,9)) "ThreadId" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1-11 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: forkFinally}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-71
        }
       Just (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "action" Nothing] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-71
          }
         Just (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,8)) "and_then" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-19
            }
           Just (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-17
              }
             Just (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,-3))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:19 }
             Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-71
            }
           Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnRarrow),DP (0,1))])
           (HsFunTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-56
              }
             Just (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsParTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-55
                }
               Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
               (HsFunTy 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-46
                  }
                 Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])
                 (HsAppTy 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-44
                    }
                   Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])
                   (HsAppTy 
                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-30
                      }
                     Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])
                     (HsTyVar 
                      (Unqual {OccName: Either}))) 
                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:32-44
                      }
                     Just (Ann (DP (0,2)) (ColDelta 32) DP (0,1) [DComment (DP (0,-2),DP (0,-1)) "=" Nothing] [((G AnnVal),DP (0,0))])
                     (HsTyVar 
                      (Unqual {OccName: SomeException}))))) 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:46 }
                   Just (Ann (DP (0,1)) (ColDelta 46) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsTyVar 
                    (Unqual {OccName: a}))))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:51-55
                  }
                 Just (Ann (DP (0,1)) (ColDelta 51) DP (0,1) [] [])
                 (HsAppTy 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:51-52
                    }
                   Just (Ann (DP (0,0)) (ColDelta 51) DP (0,0) [] [((G AnnVal),DP (0,0))])
                   (HsTyVar 
                    (Unqual {OccName: IO}))) 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:54-55
                    }
                   Just (Ann (DP (0,1)) (ColDelta 54) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                   (HsTupleTy 
                    (HsBoxedOrConstraintTuple) 
                    [])))))))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:61-71
              }
             Just (Ann (DP (0,1)) (ColDelta 61) DP (0,1) [] [])
             (HsAppTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:61-62
                }
               Just (Ann (DP (0,0)) (ColDelta 61) DP (0,0) [] [((G AnnVal),DP (0,0))])
               (HsTyVar 
                (Unqual {OccName: IO}))) 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:64-71
                }
               Just (Ann (DP (0,1)) (ColDelta 64) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsTyVar 
                (Unqual {OccName: ThreadId}))))))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:1-11 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: forkFinally})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:1-11 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: forkFinally})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:13-18
             }
            Just (Ann (DP (0,-5)) (ColDelta 13) DP (0,1) [DComment (DP (0,-9),DP (0,-5)) "mask" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,2)) "\\" Nothing,DComment (DP (0,0),DP (0,7)) "restore" Nothing] [((G AnnVal),DP (0,-5))])
            (VarPat 
             (Unqual {OccName: action}))),
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:20-27
             }
            Just (Ann (DP (0,-1)) (ColDelta 20) DP (0,1) [DComment (DP (0,0),DP (0,2)) "->" Nothing] [((G AnnVal),DP (0,-1))])
            (VarPat 
             (Unqual {OccName: and_then})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,29)-(203,46)
              }
             Just (Ann (DP (0,-1)) (ColDelta 29) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,3)-(203,46)
                }
               Just (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])
               (OpApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:3-6 }
                 Just (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: mask}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:8 }
                 Just (Ann (DP (0,-3)) (ColDelta 8) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "forkIO" Nothing] [((G AnnVal),DP (0,-3))])
                 (HsVar 
                  (Unqual {OccName: $}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46)
                  }
                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46) Ref "delta-1"),DP (0,0))])
                 (HsLam 
                  (MG 
                   [
                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46)
                      }
                     Just (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((AnnComment DComment (DP (0,-6),DP (0,-5)) "$" Nothing),DP (0,-6)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((G AnnRarrow),DP (0,1))])
                     (Match 
                      (Nothing) 
                      [
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:11-17
                         }
                        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
                        (VarPat 
                         (Unqual {OccName: restore})))] 
                      (Nothing) 
                      (GRHSs 
                       [
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-46 }
                         Just (Ann (DP (1,-5)) (ColDelta -5) DP (1,-5) [DComment (DP (0,-2),DP (0,5)) "restore" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (0,1),DP (0,9)) "and_then" Nothing] [])
                         (GRHS 
                          [] 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-46 }
                           Just (Ann (DP (0,0)) (ColDelta -5) DP (0,0) [] [])
                           (OpApp 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-33 }
                             Just (Ann (DP (0,0)) (ColDelta -5) DP (0,0) [] [])
                             (OpApp 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-10 }
                               Just (Ann (DP (0,0)) (ColDelta -5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: forkIO}))) 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:12 }
                               Just (Ann (DP (0,1)) (ColDelta 2) DP (0,1) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: $}))) 
                              (PlaceHolder) 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:14-33
                                }
                               Just (Ann (DP (0,1)) (ColDelta 4) DP (0,1) [] [])
                               (HsApp 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:14-16
                                  }
                                 Just (Ann (DP (0,0)) (ColDelta 4) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                 (HsVar 
                                  (Unqual {OccName: try}))) 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:18-33
                                  }
                                 Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                 (HsPar 
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:19-32
                                    }
                                   Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [])
                                   (HsApp 
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:19-25
                                      }
                                     Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: restore}))) 
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:27-32
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: action}))))))))))) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:35-37
                              }
                             Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: >>=}))) 
                            (PlaceHolder) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:39-46
                              }
                             Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: and_then})))))))] 
                       (EmptyLocalBinds))))] 
                   [] 
                   (PlaceHolder) 
                   (FromSource))))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-52 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (57,1) [DComment (DP (1,1),DP (1,79)) "-- ---------------------------------------------------------------------------" Nothing,DComment (DP (1,1),DP (1,17)) "-- Bound Threads" Nothing,DComment (DP (0,-16),DP (0,62)) "-- ---------------------------------------------------------------------------" Nothing,DComment (DP (1,1),DP (1,17)) "-- Bound Threads" Nothing,DComment (DP (1,1),DP (46,3)) "{- $boundthreads\n   #boundthreads#\n\nSupport for multiple operating system threads and bound threads as described\nbelow is currently only available in the GHC runtime system if you use the\n/-threaded/ option when linking.\n\nOther Haskell systems do not currently support multiple operating system threads.\n\nA bound thread is a haskell thread that is /bound/ to an operating system\nthread. While the bound thread is still scheduled by the Haskell run-time\nsystem, the operating system thread takes care of all the foreign calls made\nby the bound thread.\n\nTo a foreign library, the bound thread will look exactly like an ordinary\noperating system thread created using OS functions like @pthread_create@\nor @CreateThread@.\n\nBound threads can be created using the 'forkOS' function below. All foreign\nexported functions are run in a bound thread (bound to the OS thread that\ncalled the function). Also, the @main@ action of every Haskell program is\nrun in a bound thread.\n\nWhy do we need this? Because if a foreign library is called from a thread\ncreated using 'forkIO', it won't have access to any /thread-local state/ -\nstate variables that have specific values for each OS thread\n(see POSIX's @pthread_key_create@ or Win32's @TlsAlloc@). Therefore, some\nlibraries (OpenGL, for example) will not work from a thread created using\n'forkIO'. They work fine in threads created using 'forkOS' or when called\nfrom @main@ or from a @foreign export@.\n\nIn terms of performance, 'forkOS' (aka bound) threads are much more\nexpensive than 'forkIO' (aka unbound) threads, because a 'forkOS'\nthread is tied to a particular OS thread, whereas a 'forkIO' thread\ncan be run by any OS thread.  Context-switching between a 'forkOS'\nthread and a 'forkIO' thread is many times more expensive than between\ntwo 'forkIO' threads.\n\nNote in particular that the main program thread (the thread running\n@Main.main@) is always a bound thread, so for good concurrency\nperformance you should ensure that the main thread is not doing\nrepeated communication with other threads in the system.  Typically\nthis means forking subthreads to do the work using 'forkIO', and\nwaiting for the results in the main thread.\n\n-}" Nothing,DComment (DP (-44,1),DP (2,3)) "{- $boundthreads\n   #boundthreads#\n\n\nSupport for multiple operating system threads and bound threads as described\nbelow is currently only available in the GHC runtime system if you use the\n/-threaded/ option when linking.\n\nOther Haskell systems do not currently support multiple operating system threads.\n\nA bound thread is a haskell thread that is /bound/ to an operating system\nthread. While the bound thread is still scheduled by the Haskell run-time\nsystem, the operating system thread takes care of all the foreign calls made\nby the bound thread.\n\nTo a foreign library, the bound thread will look exactly like an ordinary\noperating system thread created using OS functions like @pthread_create@\nor @CreateThread@.\n\nBound threads can be created using the 'forkOS' function below. All foreign\nexported functions are run in a bound thread (bound to the OS thread that\ncalled the function). Also, the @main@ action of every Haskell program is\nrun in a bound thread.\n\nWhy do we need this? Because if a foreign library is called from a thread\ncreated using 'forkIO', it won't have access to any /thread-local state/ -\nstate variables that have specific values for each OS thread\n(see POSIX's @pthread_key_create@ or Win32's @TlsAlloc@). Therefore, some\nlibraries (OpenGL, for example) will not work from a thread created using\n'forkIO'. They work fine in threads created using 'forkOS' or when called\nfrom @main@ or from a @foreign export@.\n\nIn terms of performance, 'forkOS' (aka bound) threads are much more\nexpensive than 'forkIO' (aka unbound) threads, because a 'forkOS'\nthread is tied to a particular OS thread, whereas a 'forkIO' thread\ncan be run by any OS thread.  Context-switching between a 'forkOS'\nthread and a 'forkIO' thread is many times more expensive than between\ntwo 'forkIO' threads.\n\nNote in particular that the main program thread (the thread running\n@Main.main@) is always a bound thread, so for good concurrency\nperformance you should ensure that the main thread is not doing\nrepeated communication with other threads in the system.  Typically\nthis means forking subthreads to do the work using 'forkIO', and\nwaiting for the results in the main thread.\n\n-}" Nothing,DComment (DP (0,-2),DP (0,41)) "-- | 'True' if bound threads are supported." Nothing,DComment (DP (1,1),DP (1,67)) "-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'" Nothing,DComment (DP (1,1),DP (1,44)) "-- | 'True' if bound threads are supported." Nothing,DComment (DP (0,-43),DP (0,32)) "-- will always return 'False' and both 'forkOS' and 'runInBoundThread' will" Nothing,DComment (DP (1,1),DP (1,9)) "-- fail." Nothing,DComment (DP (0,-8),DP (0,58)) "-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,7)) "foreign" Nothing,DComment (DP (0,-7),DP (0,68)) "-- will always return 'False' and both 'forkOS' and 'runInBoundThread' will" Nothing,DComment (DP (0,-67),DP (0,-61)) "import" Nothing,DComment (DP (0,1),DP (0,6)) "ccall" Nothing,DComment (DP (0,1),DP (0,24)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,5)) "Bool" Nothing,DComment (DP (1,1),DP (1,9)) "-- fail." Nothing] [((G AnnForeign),DP (0,0)),((G AnnImport),DP (0,1)),((G AnnDcolon),DP (0,1))])
    (ForD 
     (ForeignImport 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:22-44
        }
       Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: rtsSupportsBoundThreads})) 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:49-52
        }
       Just (Ann (DP (0,1)) (ColDelta 49) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:49-52
          }
         Just (Ann (DP (0,0)) (ColDelta 49) DP (0,0) [] [((G AnnVal),DP (0,0))])
         (HsTyVar 
          (Unqual {OccName: Bool}))))) 
      (PlaceHolder) 
      (CImport 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:16-20
         }
        Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
        (CCallConv)) 
       ({ <no location info> }
        Nothing
        (PlaySafe)) 
       (Nothing) 
       (CFunction 
        (StaticTarget {FastString: "rtsSupportsBoundThreads"} 
         (Nothing) 
         (True))) 
       ({ <no location info> }
        Nothing""))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1-30 }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (22,1) [DComment (DP (1,1),DP (18,3)) "{- |\nLike 'forkIO', this sparks off a new thread to run the 'IO'\ncomputation passed as the first argument, and returns the 'ThreadId'\nof the newly created thread.\n\nHowever, 'forkOS' creates a /bound/ thread, which is necessary if you\nneed to call foreign (non-Haskell) libraries that make use of\nthread-local state, such as OpenGL (see \"Control.Concurrent#boundthreads\").\n\nUsing 'forkOS' instead of 'forkIO' makes no difference at all to the\nscheduling behaviour of the Haskell runtime system.  It is a common\nmisconception that you need to use 'forkOS' instead of 'forkIO' to\navoid blocking all the Haskell threads when making a foreign call;\nthis isn't the case.  To allow foreign calls to be made without\nblocking all the Haskell threads (with GHC), it is only necessary to\nuse the @-threaded@ option when linking your program, and to make sure\nthe foreign import is not marked @unsafe@.\n-}" Nothing,DComment (DP (-15,1),DP (2,3)) "{- |\nLike 'forkIO', this sparks off a new thread to run the 'IO'\ncomputation passed as the first argument, and returns the 'ThreadId'\nof the newly created thread.\n\nHowever, 'forkOS' creates a /bound/ thread, which is necessary if you\nneed to call foreign (non-Haskell) libraries that make use of\nthread-local state, such as OpenGL (see \"Control.Concurrent#boundthreads\").\n\nUsing 'forkOS' instead of 'forkIO' makes no difference at all to the\nscheduling behaviour of the Haskell runtime system.  It is a common\nmisconception that you need to use 'forkOS' instead of 'forkIO' to\navoid blocking all the Haskell threads when making a foreign call;\nthis isn't the case.  To allow foreign calls to be made without\nblocking all the Haskell threads (with GHC), it is only necessary to\nuse the @-threaded@ option when linking your program, and to make sure\nthe foreign import is not marked @unsafe@.\n-}" Nothing,DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,6)) "forkOS" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,9)) "ThreadId" Nothing] [((AnnComment DComment (DP (0,-6),DP (0,1)) "foreign" Nothing),DP (0,-6)),((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1-6 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: forkOS}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-30
        }
       Just (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [DComment (DP (0,-1),DP (0,5)) "export" Nothing] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-30
          }
         Just (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,5)) "ccall" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-15
            }
           Just (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-12
              }
             Just (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [] [((G AnnVal),DP (0,-4))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:14-15
              }
             Just (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:20-30
            }
           Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:20-21
              }
             Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:23-30
              }
             Just (Ann (DP (0,-11)) (ColDelta 23) DP (0,1) [DComment (DP (0,0),DP (0,12)) "forkOS_entry" Nothing] [((G AnnVal),DP (0,-11))])
             (HsTyVar 
              (Unqual {OccName: ThreadId}))))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(284,1)-(285,33)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,5),DP (1,7)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing] [((G AnnForeign),DP (0,0)),((G AnnExport),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((G AnnDcolon),DP (1,5))])
    (ForD 
     (ForeignExport 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:22-33
        }
       Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: forkOS_entry})) 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-33 }
       Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-33 }
         Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-24 }
           Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-16 }
             Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: StablePtr}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:18-24
              }
             Just (Ann (DP (0,-3)) (ColDelta 18) DP (0,1) [DComment (DP (0,-8),DP (0,-2)) "import" Nothing,DComment (DP (0,1),DP (0,6)) "ccall" Nothing] [((G AnnOpenP),DP (0,-3)),((G AnnCloseP),DP (0,0))])
             (HsParTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:19-23
                }
               Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])
               (HsAppTy 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:19-20
                  }
                 Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsTyVar 
                  (Unqual {OccName: IO}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:22-23
                  }
                 Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((AnnComment DComment (DP (0,-1),DP (0,13)) "\"forkOS_entry\"" Nothing),DP (0,-1)),((G AnnCloseP),DP (0,0))])
                 (HsTupleTy 
                  (HsBoxedOrConstraintTuple) 
                  [])))))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:29-33
            }
           Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:29-30
              }
             Just (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:32-33
              }
             Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder) 
      (CExport 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:16-20
         }
        Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
        (CExportStatic {FastString: "forkOS_entry"} 
         (CCallConv))) 
       ({ <no location info> }
        Nothing""))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(287,1)-(288,33)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,3),DP (0,26)) "forkOS_entry_reimported" Nothing,DComment (DP (1,5),DP (1,7)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing] [((G AnnForeign),DP (0,0)),((G AnnImport),DP (0,1)),((G AnnVal),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,12)) "forkOS_entry" Nothing),DP (0,0)),((G AnnDcolon),DP (1,5))])
    (ForD 
     (ForeignImport 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:37-59
        }
       Just (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: forkOS_entry_reimported})) 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-33 }
       Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-33 }
         Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-24 }
           Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-16 }
             Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: StablePtr}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:18-24
              }
             Just (Ann (DP (0,-8)) (ColDelta 18) DP (0,1) [DComment (DP (0,-3),DP (0,-1)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing] [((G AnnOpenP),DP (0,-8)),((G AnnCloseP),DP (0,0))])
             (HsParTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:19-23
                }
               Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])
               (HsAppTy 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:19-20
                  }
                 Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsTyVar 
                  (Unqual {OccName: IO}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:22-23
                  }
                 Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                 (HsTupleTy 
                  (HsBoxedOrConstraintTuple) 
                  [])))))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:29-33
            }
           Just (Ann (DP (0,-1)) (ColDelta 29) DP (0,1) [DComment (DP (0,-1),DP (0,0)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:29-30
              }
             Just (Ann (DP (0,-1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,-1))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:32-33
              }
             Just (Ann (DP (0,0)) (ColDelta 32) DP (0,1) [DComment (DP (0,0),DP (0,1)) "(" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder) 
      (CImport 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:16-20
         }
        Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
        (CCallConv)) 
       ({ <no location info> }
        Nothing
        (PlaySafe)) 
       (Nothing) 
       (CFunction 
        (StaticTarget {FastString: "forkOS_entry"} 
         (Nothing) 
         (True))) 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:22-35
         }
        Nothing"forkOS_entry"))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1-42 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,12)) "forkOS_entry" Nothing,DComment (DP (0,1),DP (0,13)) "stableAction" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [((AnnComment DComment (DP (0,-4),DP (0,-4)) "" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,0),DP (0,6)) "action" Nothing),DP (0,0)),((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1-12 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: forkOS_entry}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-42
        }
       Just (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [DComment (DP (0,0),DP (0,2)) "<-" Nothing] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-42
          }
         Just (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,12)) "stableAction" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-33
            }
           Just (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-25
              }
             Just (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,-1))])
             (HsTyVar 
              (Unqual {OccName: StablePtr}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:27-33
              }
             Just (Ann (DP (0,-6)) (ColDelta 27) DP (0,1) [DComment (DP (0,-7),DP (0,7)) "deRefStablePtr" Nothing] [((G AnnOpenP),DP (0,-6)),((G AnnCloseP),DP (0,0))])
             (HsParTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:28-32
                }
               Just (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [])
               (HsAppTy 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:28-29
                  }
                 Just (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsTyVar 
                  (Unqual {OccName: IO}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:31-32
                  }
                 Just (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                 (HsTupleTy 
                  (HsBoxedOrConstraintTuple) 
                  [])))))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:38-42
            }
           Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:38-39
              }
             Just (Ann (DP (0,0)) (ColDelta 38) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:41-42
              }
             Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:1-12 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: forkOS_entry})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:1-12 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: forkOS_entry})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:14-25
             }
            Just (Ann (DP (0,-1)) (ColDelta 14) DP (0,1) [DComment (DP (0,-4),DP (0,-4)) "" Nothing,DComment (DP (0,0),DP (0,6)) "action" Nothing] [((G AnnVal),DP (0,-1))])
            (VarPat 
             (Unqual {OccName: stableAction})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,27)-(293,14)
              }
             Just (Ann (DP (0,-1)) (ColDelta 27) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,29)-(293,14)
                }
               Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(292,9)-(293,14) Ref "delta-2"),DP (0,0))])
               (HsDo 
                (DoExpr) 
                [
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:9-45 }
                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:9-14 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: action}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:19-45
                     }
                    Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])
                    (HsApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:19-32
                       }
                      Just (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: deRefStablePtr}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:34-45
                       }
                      Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: stableAction}))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:293:9-14 }
                  Just (Ann (DP (0,1)) (ColDelta 0) DP (1,0) [DComment (DP (1,-8),DP (1,-8)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,7)) "foreign" Nothing] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:293:9-14 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (HsVar 
                     (Unqual {OccName: action}))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder)))] 
                (PlaceHolder)))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(295,1)-(296,35)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,1),DP (0,6)) "ccall" Nothing,DComment (DP (0,1),DP (0,20)) "forkOS_createThread" Nothing,DComment (DP (1,5),DP (1,7)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,5)) "CInt" Nothing] [((G AnnForeign),DP (0,0)),((G AnnImport),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,15)) "failNonThreaded" Nothing),DP (0,0)),((G AnnDcolon),DP (1,5))])
    (ForD 
     (ForeignImport 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:22-40
        }
       Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: forkOS_createThread})) 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-35 }
       Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-35 }
         Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-24 }
           Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-16 }
             Just (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: StablePtr}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:18-24
              }
             Just (Ann (DP (0,-1)) (ColDelta 18) DP (0,1) [DComment (DP (0,0),DP (0,2)) "::" Nothing] [((G AnnOpenP),DP (0,-1)),((G AnnCloseP),DP (0,0))])
             (HsParTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:19-23
                }
               Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])
               (HsAppTy 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:19-20
                  }
                 Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsTyVar 
                  (Unqual {OccName: IO}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:22-23
                  }
                 Just (Ann (DP (0,0)) (ColDelta 22) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "IO" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                 (HsTupleTy 
                  (HsBoxedOrConstraintTuple) 
                  [])))))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:29-35
            }
           Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:29-30
              }
             Just (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:32-35
              }
             Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: CInt}))))))))) 
      (PlaceHolder) 
      (CImport 
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:16-20
         }
        Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
        (CCallConv)) 
       ({ <no location info> }
        Nothing
        (PlaySafe)) 
       (Nothing) 
       (CFunction 
        (StaticTarget {FastString: "forkOS_createThread"} 
         (Nothing) 
         (True))) 
       ({ <no location info> }
        Nothing""))))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1-23 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,15)) "failNonThreaded" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,5)) "fail" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,43)) "\"RTS doesn't support multiple OS threads \"" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1-15 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: failNonThreaded}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:20-23
        }
       Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:20-23
          }
         Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [])
         (HsAppTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:20-21
            }
           Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: IO}))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:23 }
           Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: a}))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,0),DP (0,2)) "++" Nothing,DComment (DP (0,0),DP (0,34)) "\"(use ghc -threaded when linking)\"" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:1-15 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: failNonThreaded})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:1-15 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: failNonThreaded})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,17)-(300,59)
              }
             Just (Ann (DP (0,-1)) (ColDelta 17) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,19)-(300,59)
                }
               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])
               (OpApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:19-67
                  }
                 Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])
                 (OpApp 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:19-22
                    }
                   Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: fail}))) 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:24 }
                   Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: $}))) 
                  (PlaceHolder) 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:26-67
                    }
                   Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsLit 
                    (HsString "\"RTS doesn't support multiple OS threads \"" {FastString: "RTS doesn't support multiple OS threads "}))))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:300:24-25
                  }
                 Just (Ann (DP (0,9)) (ColDelta 24) DP (1,24) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "forkOS" Nothing,DComment (DP (0,1),DP (0,8)) "action0" Nothing] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: ++}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:300:26-59
                  }
                 Just (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsLit 
                  (HsString "\"(use ghc -threaded when linking)\"" {FastString: "(use ghc -threaded when linking)"})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(302,1)-(323,33)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,5),DP (1,6)) "|" Nothing,DComment (DP (0,1),DP (0,24)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:1-6 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: forkOS})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(302,1)-(323,33)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:1-6 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: forkOS})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:8-14 }
            Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: action0})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,5)-(322,18)
              }
             Just (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [DComment (DP (0,-6),DP (0,-6)) "" Nothing,DComment (DP (0,0),DP (0,2)) "mv" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing,DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing] [((G AnnVbar),DP (0,0)),((AnnComment DComment (DP (0,-21),DP (0,-21)) "" Nothing),DP (0,-21)),((AnnComment DComment (DP (0,0),DP (0,1)) "b" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,26)) "Exception.getMaskingState" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])
             (GRHS 
              [
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:7-29 }
                Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                (BodyStmt 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:7-29 }
                  Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsVar 
                   (Unqual {OccName: rtsSupportsBoundThreads}))) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (PlaceHolder)))] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,33)-(322,18)
                }
               Just (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(304,9)-(322,18) Ref "delta-3"),DP (0,0))])
               (HsDo 
                (DoExpr) 
                [
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:9-26 }
                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-2),DP (0,1)) "let" Nothing),DP (0,-2)),((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:9-10 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: mv}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:15-26
                     }
                    Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                    (HsVar 
                     (Unqual {OccName: newEmptyMVar}))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9-38 }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: b}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:14-38
                     }
                    Just (Ann (DP (0,-61)) (ColDelta 5) DP (0,1) [DComment (DP (0,0),DP (0,62)) "-- async exceptions are masked in the child if they are masked" Nothing] [((G AnnVal),DP (0,-61))])
                    (HsVar 
                     (Qual {ModuleName: Exception} {OccName: getMaskingState}))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(306,9)-(315,62)
                   }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLet),DP (0,0))])
                  (LetStmt 
                   (HsValBinds 
                    (ValBindsIn {Bag(Located (HsBind RdrName)): 
                     [
                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77)
                        }
                       Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                       (FunBind 
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:13-19
                          }
                         Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                         (Unqual {OccName: action1})) 
                        (False) 
                        (MG 
                         [
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77)
                            }
                           Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnEqual),DP (0,1))])
                           (Match 
                            (Just 
                             ((,) 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:13-19
                                }
                               Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (Unqual {OccName: action1})) 
                              (False))) 
                            [] 
                            (Nothing) 
                            (GRHSs 
                             [
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,21)-(313,77)
                                }
                               Just (Ann (DP (0,-1)) (ColDelta 8) DP (0,-1) [] [])
                               (GRHS 
                                [] 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,23)-(313,77)
                                  }
                                 Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnCase),DP (0,0)),((G AnnOf),DP (0,1)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(311,25)-(313,77) Ref "delta-4"),DP (0,0))])
                                 (HsCase 
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:28 }
                                   Just (Ann (DP (0,-16)) (ColDelta 15) DP (0,1) [DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,19)) "MaskedInterruptible" Nothing] [((G AnnVal),DP (0,-16))])
                                   (HsVar 
                                    (Unqual {OccName: b}))) 
                                  (MG 
                                   [
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-56
                                      }
                                     Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                     (Match 
                                      (Nothing) 
                                      [
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-32
                                         }
                                        Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                        (ConPatIn 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-32
                                           }
                                          Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                          (Unqual {OccName: Unmasked})) 
                                         (PrefixCon 
                                          [])))] 
                                      (Nothing) 
                                      (GRHSs 
                                       [
                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:34-56
                                          }
                                         Just (Ann (DP (0,-12)) (ColDelta 9) DP (0,1) [DComment (DP (0,-8),DP (0,13)) "MaskedUninterruptible" Nothing] [((G AnnRarrow),DP (0,-12))])
                                         (GRHS 
                                          [] 
                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:37-56
                                            }
                                           Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [])
                                           (HsApp 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:37-48
                                              }
                                             Just (Ann (DP (0,0)) (ColDelta 12) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                             (HsVar 
                                              (Unqual {OccName: unsafeUnmask}))) 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:50-56
                                              }
                                             Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [DComment (DP (0,-2),DP (0,0)) "->" Nothing] [((G AnnVal),DP (0,0))])
                                             (HsVar 
                                              (Unqual {OccName: action0})))))))] 
                                       (EmptyLocalBinds)))),
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-54
                                      }
                                     Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-7),DP (0,13)) "uninterruptibleMask_" Nothing,DComment (DP (0,1),DP (0,8)) "action0" Nothing] [])
                                     (Match 
                                      (Nothing) 
                                      [
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-43
                                         }
                                        Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                        (ConPatIn 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-43
                                           }
                                          Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                          (Unqual {OccName: MaskedInterruptible})) 
                                         (PrefixCon 
                                          [])))] 
                                      (Nothing) 
                                      (GRHSs 
                                       [
                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:45-54
                                          }
                                         Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnRarrow),DP (0,0))])
                                         (GRHS 
                                          [] 
                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:48-54
                                            }
                                           Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                           (HsVar 
                                            (Unqual {OccName: action0})))))] 
                                       (EmptyLocalBinds)))),
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25-77
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 0) DP (1,0) [DComment (DP (1,-12),DP (1,-12)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,11)) "action_plus" Nothing] [])
                                     (Match 
                                      (Nothing) 
                                      [
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25-45
                                         }
                                        Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                        (ConPatIn 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25-45
                                           }
                                          Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                          (Unqual {OccName: MaskedUninterruptible})) 
                                         (PrefixCon 
                                          [])))] 
                                      (Nothing) 
                                      (GRHSs 
                                       [
                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:47-77
                                          }
                                         Just (Ann (DP (0,-3)) (ColDelta 22) DP (0,1) [DComment (DP (0,-21),DP (0,-20)) "=" Nothing,DComment (DP (0,1),DP (0,16)) "Exception.catch" Nothing,DComment (DP (0,1),DP (0,8)) "action1" Nothing] [((G AnnRarrow),DP (0,-3))])
                                         (GRHS 
                                          [] 
                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:50-77
                                            }
                                           Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [])
                                           (HsApp 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:50-69
                                              }
                                             Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                             (HsVar 
                                              (Unqual {OccName: uninterruptibleMask_}))) 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:71-77
                                              }
                                             Just (Ann (DP (0,8)) (ColDelta 46) DP (0,1) [DComment (DP (0,-19),DP (0,-7)) "childHandler" Nothing] [((G AnnVal),DP (0,0))])
                                             (HsVar 
                                              (Unqual {OccName: action0})))))))] 
                                       (EmptyLocalBinds))))] 
                                   [] 
                                   (PlaceHolder) 
                                   (FromSource))))))] 
                             (EmptyLocalBinds))))] 
                         [] 
                         (PlaceHolder) 
                         (FromSource)) 
                        (WpHole) 
                        (PlaceHolder) 
                        [])),
                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-62
                        }
                       Just (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [DComment (DP (2,-4),DP (2,-4)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,5)) "entry" Nothing] [])
                       (FunBind 
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-23
                          }
                         Just (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [] [((G AnnVal),DP (0,-1))])
                         (Unqual {OccName: action_plus})) 
                        (False) 
                        (MG 
                         [
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-62
                            }
                           Just (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [] [((AnnComment DComment (DP (0,-9),DP (0,-7)) "<-" Nothing),DP (0,-9)),((AnnComment DComment (DP (0,1),DP (0,13)) "newStablePtr" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])
                           (Match 
                            (Just 
                             ((,) 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-23
                                }
                               Just (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [] [((G AnnVal),DP (0,-1))])
                               (Unqual {OccName: action_plus})) 
                              (False))) 
                            [] 
                            (Nothing) 
                            (GRHSs 
                             [
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:25-62
                                }
                               Just (Ann (DP (0,-1)) (ColDelta 12) DP (0,-1) [] [])
                               (GRHS 
                                [] 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:27-62
                                  }
                                 Just (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [])
                                 (HsApp 
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:27-49
                                    }
                                   Just (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [])
                                   (HsApp 
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:27-41
                                      }
                                     Just (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Qual {ModuleName: Exception} {OccName: catch}))) 
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:43-49
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [DComment (DP (0,-11),DP (0,-10)) "(" Nothing,DComment (DP (0,0),DP (0,10)) "myThreadId" Nothing] [((G AnnVal),DP (0,0))])
                                     (HsVar 
                                      (Unqual {OccName: action1}))))) 
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:51-62
                                    }
                                   Just (Ann (DP (0,-3)) (ColDelta 38) DP (0,1) [DComment (DP (0,-7),DP (0,-4)) ">>=" Nothing,DComment (DP (0,1),DP (0,8)) "putMVar" Nothing] [((G AnnVal),DP (0,-3))])
                                   (HsVar 
                                    (Unqual {OccName: childHandler})))))))] 
                             (EmptyLocalBinds))))] 
                         [] 
                         (PlaceHolder) 
                         (FromSource)) 
                        (WpHole) 
                        (PlaceHolder) 
                        []))]} 
                     [])))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9-72 }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (2,0) [DComment (DP (0,-8),DP (0,-6)) "mv" Nothing,DComment (DP (0,1),DP (0,3)) ">>" Nothing,DComment (DP (0,1),DP (0,12)) "action_plus" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,0),DP (1,0)) "" Nothing,DComment (DP (0,0),DP (0,3)) "err" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing,DComment (DP (0,1),DP (0,20)) "forkOS_createThread" Nothing,DComment (DP (0,1),DP (0,6)) "entry" Nothing] [((AnnComment DComment (DP (0,-5),DP (0,-1)) "when" Nothing),DP (0,-5)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9-13 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: entry}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:18-72
                     }
                    Just (Ann (DP (0,0)) (ColDelta 9) DP (0,1) [DComment (DP (0,-2),DP (0,1)) "err" Nothing] [])
                    (HsApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:18-29
                       }
                      Just (Ann (DP (0,0)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: newStablePtr}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:31-72
                       }
                      Just (Ann (DP (0,0)) (ColDelta 22) DP (0,1) [DComment (DP (0,-11),DP (0,-9)) "/=" Nothing,DComment (DP (0,1),DP (0,2)) "0" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,5)) "fail" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                      (HsPar 
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-71
                         }
                        Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])
                        (OpApp 
                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-56
                           }
                          Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])
                          (OpApp 
                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-41
                             }
                            Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0))])
                            (HsVar 
                             (Unqual {OccName: myThreadId}))) 
                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:43-45
                             }
                            Just (Ann (DP (0,-15)) (ColDelta 34) DP (0,1) [DComment (DP (0,-10),DP (0,16)) "\"Cannot create OS thread.\"" Nothing] [((G AnnVal),DP (0,-15))])
                            (HsVar 
                             (Unqual {OccName: >>=}))) 
                           (PlaceHolder) 
                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:47-56
                             }
                            Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [])
                            (HsApp 
                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:47-53
                               }
                              Just (Ann (DP (0,0)) (ColDelta 38) DP (0,0) [] [((G AnnVal),DP (0,0))])
                              (HsVar 
                               (Unqual {OccName: putMVar}))) 
                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:55-56
                               }
                              Just (Ann (DP (0,1)) (ColDelta 46) DP (0,1) [] [((G AnnVal),DP (0,0))])
                              (HsVar 
                               (Unqual {OccName: mv}))))))) 
                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:58-59
                           }
                          Just (Ann (DP (0,1)) (ColDelta 49) DP (0,1) [] [((G AnnVal),DP (0,0))])
                          (HsVar 
                           (Unqual {OccName: >>}))) 
                         (PlaceHolder) 
                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:61-71
                           }
                          Just (Ann (DP (0,1)) (ColDelta 52) DP (0,1) [] [((G AnnVal),DP (0,0))])
                          (HsVar 
                           (Unqual {OccName: action_plus}))))))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9-40 }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9-11 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: err}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:16-40
                     }
                    Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                    (HsApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:16-34
                       }
                      Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: forkOS_createThread}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:36-40
                       }
                      Just (Ann (DP (0,9)) (ColDelta 27) DP (0,1) [DComment (DP (0,-19),DP (0,-11)) "takeMVar" Nothing,DComment (DP (0,1),DP (0,3)) "mv" Nothing] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: entry}))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-57 }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-57 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                    (OpApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-23 }
                      Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                      (HsApp 
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-12 }
                        Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                        (HsVar 
                         (Unqual {OccName: when}))) 
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:14-23
                         }
                        Just (Ann (DP (0,-8)) (ColDelta 5) DP (0,1) [DComment (DP (0,-4),DP (0,9)) "freeStablePtr" Nothing] [((G AnnOpenP),DP (0,-8)),((G AnnCloseP),DP (0,0))])
                        (HsPar 
                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:15-22
                           }
                          Just (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [])
                          (OpApp 
                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:15-17
                             }
                            Just (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnVal),DP (0,0))])
                            (HsVar 
                             (Unqual {OccName: err}))) 
                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:19-20
                             }
                            Just (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (HsVar 
                             (Unqual {OccName: /=}))) 
                           (PlaceHolder) 
                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:22 }
                            Just (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])
                            (HsOverLit {HsOverLit:0})))))))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:25 }
                      Just (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [DComment (DP (0,-1),DP (0,4)) "entry" Nothing] [((G AnnVal),DP (0,-3))])
                      (HsVar 
                       (Unqual {OccName: $}))) 
                     (PlaceHolder) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:27-57
                       }
                      Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [])
                      (HsApp 
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:27-30
                         }
                        Just (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])
                        (HsVar 
                         (Unqual {OccName: fail}))) 
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:32-57
                         }
                        Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                        (HsLit 
                         (HsString "\"Cannot create OS thread.\"" {FastString: "Cannot create OS thread."}))))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9-26 }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((AnnComment DComment (DP (0,-3),DP (0,3)) "return" Nothing),DP (0,-3)),((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9-11 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: tid}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:16-26
                     }
                    Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                    (HsApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:16-23
                       }
                      Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: takeMVar}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:25-26
                       }
                      Just (Ann (DP (0,6)) (ColDelta 16) DP (0,1) [DComment (DP (0,-8),DP (0,-5)) "tid" Nothing] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: mv}))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-27 }
                  Just (Ann (DP (0,-7)) (ColDelta 0) DP (1,0) [DComment (DP (1,-4),DP (1,-4)) "" Nothing,DComment (DP (0,0),DP (0,1)) "|" Nothing,DComment (DP (0,1),DP (0,10)) "otherwise" Nothing] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-27 }
                    Just (Ann (DP (0,-7)) (ColDelta 0) DP (1,0) [] [])
                    (HsApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-21 }
                      Just (Ann (DP (0,-7)) (ColDelta 0) DP (1,0) [] [((G AnnVal),DP (0,-7))])
                      (HsVar 
                       (Unqual {OccName: freeStablePtr}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:23-27
                       }
                      Just (Ann (DP (0,-11)) (ColDelta 14) DP (0,1) [DComment (DP (0,-5),DP (0,-4)) "=" Nothing,DComment (DP (0,1),DP (0,16)) "failNonThreaded" Nothing] [((G AnnVal),DP (0,-11))])
                      (HsVar 
                       (Unqual {OccName: entry}))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9-18 }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9-18 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                    (HsApp 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9-14 }
                      Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: return}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:16-18
                       }
                      Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: tid}))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder)))] 
                (PlaceHolder))))),
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:5-33 }
             Just (Ann (DP (0,-67)) (ColDelta 5) DP (1,5) [DComment (DP (1,1),DP (1,72)) "-- | Returns 'True' if the calling thread is /bound/, that is, if it is" Nothing] [((G AnnVbar),DP (0,-67)),((G AnnEqual),DP (0,1))])
             (GRHS 
              [
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:7-15 }
                Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                (BodyStmt 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:7-15 }
                  Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsVar 
                   (Unqual {OccName: otherwise}))) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (PlaceHolder)))] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:19-33
                }
               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsVar 
                (Unqual {OccName: failNonThreaded})))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1-31 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (5,1) [DComment (DP (1,1),DP (1,74)) "-- safe to use foreign libraries that rely on thread-local state from the" Nothing,DComment (DP (1,1),DP (1,19)) "-- calling thread." Nothing,DComment (DP (0,-18),DP (0,53)) "-- | Returns 'True' if the calling thread is /bound/, that is, if it is" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,20)) "isCurrentThreadBound" Nothing,DComment (DP (0,-20),DP (0,53)) "-- safe to use foreign libraries that rely on thread-local state from the" Nothing,DComment (DP (0,-52),DP (0,-50)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,5)) "Bool" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,18)) "-- calling thread." Nothing,DComment (DP (0,-18),DP (0,2)) "isCurrentThreadBound" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,2)) "\\" Nothing,DComment (DP (0,1),DP (0,3)) "s#" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing] [((AnnComment DComment (DP (0,-16),DP (0,-12)) "case" Nothing),DP (0,-16)),((AnnComment DComment (DP (0,1),DP (0,22)) "isCurrentThreadBound#" Nothing),DP (0,1)),((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1-20 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: isCurrentThreadBound}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:25-31
        }
       Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:25-31
          }
         Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])
         (HsAppTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:25-26
            }
           Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: IO}))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:28-31
            }
           Just (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Bool}))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,0),DP (0,2)) "s#" Nothing,DComment (DP (0,1),DP (0,3)) "of" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:1-20 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: isCurrentThreadBound})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,-12),DP (0,-12)) "" Nothing),DP (0,-12)),((AnnComment DComment (DP (0,0),DP (0,2)) "(#" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,4)) "s2#" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,4)) "flg" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "#)" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:1-20 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: isCurrentThreadBound})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,22)-(331,57)
              }
             Just (Ann (DP (0,-1)) (ColDelta 22) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,24)-(331,57)
                }
               Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [])
               (OpApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:24-25
                  }
                 Just (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: IO}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:27 }
                 Just (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: $}))) 
                (PlaceHolder) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57)
                  }
                 Just (Ann (DP (0,0)) (ColDelta 29) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "(#" Nothing] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57) Ref "delta-5"),DP (0,0))])
                 (HsLam 
                  (MG 
                   [
                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57)
                      }
                     Just (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])
                     (Match 
                      (Nothing) 
                      [
                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:31-32
                         }
                        Just (Ann (DP (0,-2)) (ColDelta 2) DP (0,1) [DComment (DP (0,0),DP (0,3)) "s2#" Nothing] [((G AnnVal),DP (0,-2))])
                        (VarPat 
                         (Unqual {OccName: s#})))] 
                      (Nothing) 
                      (GRHSs 
                       [
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(330,5)-(331,57)
                          }
                         Just (Ann (DP (1,-24)) (ColDelta -24) DP (1,-24) [DComment (DP (0,-1),DP (0,6)) "isTrue#" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,3)) "flg" Nothing,DComment (DP (0,1),DP (0,4)) "/=#" Nothing,DComment (DP (0,1),DP (0,3)) "0#" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "#)" Nothing] [])
                         (GRHS 
                          [] 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(330,5)-(331,57)
                            }
                           Just (Ann (DP (0,0)) (ColDelta -24) DP (0,0) [] [((G AnnCase),DP (0,0)),((G AnnOf),DP (0,1)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-57 Ref "delta-6"),DP (0,0))])
                           (HsCase 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:10-33
                              }
                             Just (Ann (DP (0,1)) (ColDelta -19) DP (0,1) [] [])
                             (HsApp 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:10-30
                                }
                               Just (Ann (DP (0,0)) (ColDelta -19) DP (0,0) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: isCurrentThreadBound#}))) 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:32-33
                                }
                               Just (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0))])
                               (HsVar 
                                (Unqual {OccName: s#}))))) 
                            (MG 
                             [
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-57 }
                               Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                               (Match 
                                (Nothing) 
                                [
                                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-22 }
                                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnOpen),DP (0,0)),((G AnnClose),DP (0,1))])
                                  (TuplePat 
                                   [
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:12-14
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
                                     (VarPat 
                                      (Unqual {OccName: s2#}))),
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:17-19
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                     (VarPat 
                                      (Unqual {OccName: flg})))] 
                                   (Unboxed) 
                                   []))] 
                                (Nothing) 
                                (GRHSs 
                                 [
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:24-57
                                    }
                                   Just (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnRarrow),DP (0,0))])
                                   (GRHS 
                                    [] 
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:27-57
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpen),DP (0,0)),((G AnnClose),DP (0,1))])
                                     (ExplicitTuple 
                                      [
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:30-32
                                         }
                                        Just (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [])
                                        (Present 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:30-32
                                           }
                                          Just (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])
                                          (HsVar 
                                           (Unqual {OccName: s2#}))))),
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:35-54
                                         }
                                        Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [])
                                        (Present 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:35-54
                                           }
                                          Just (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [])
                                          (HsApp 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:35-41
                                             }
                                            Just (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (HsVar 
                                             (Unqual {OccName: isTrue#}))) 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:43-54
                                             }
                                            Just (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                            (HsPar 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:44-53
                                               }
                                              Just (Ann (DP (0,0)) (ColDelta 35) DP (0,0) [] [])
                                              (OpApp 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:44-46
                                                 }
                                                Just (Ann (DP (0,0)) (ColDelta 35) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                (HsVar 
                                                 (Unqual {OccName: flg}))) 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:48-50
                                                 }
                                                Just (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                (HsVar 
                                                 (Unqual {OccName: /=#}))) 
                                               (PlaceHolder) 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:52-53
                                                 }
                                                Just (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                (HsLit 
                                                 (HsIntPrim "0#" 
                                                  (0))))))))))))] 
                                      (Unboxed)))))] 
                                 (EmptyLocalBinds))))] 
                             [] 
                             (PlaceHolder) 
                             (FromSource))))))] 
                       (EmptyLocalBinds))))] 
                   [] 
                   (PlaceHolder) 
                   (FromSource))))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1-32 }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (12,1) [DComment (DP (1,1),DP (9,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis not /bound/, a bound thread is created temporarily. @runInBoundThread@\ndoesn't finish until the 'IO' computation finishes.\n\nYou can wrap a series of foreign function calls that rely on thread-local state\nwith @runInBoundThread@ so that you can use them without knowing whether the\ncurrent thread is /bound/.\n-}" Nothing,DComment (DP (-6,1),DP (2,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis not /bound/, a bound thread is created temporarily. @runInBoundThread@\ndoesn't finish until the 'IO' computation finishes.\n\nYou can wrap a series of foreign function calls that rely on thread-local state\nwith @runInBoundThread@ so that you can use them without knowing whether the\ncurrent thread is /bound/.\n-}" Nothing,DComment (DP (-1,1),DP (-1,1)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,16)) "runInBoundThread" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1-16 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: runInBoundThread}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-32
        }
       Just (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "action" Nothing] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-32
          }
         Just (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-24
            }
           Just (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-22
              }
             Just (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,-3))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:24 }
             Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:29-32
            }
           Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:29-30
              }
             Just (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:32 }
             Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(345,1)-(357,33)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,5),DP (1,6)) "|" Nothing,DComment (DP (0,1),DP (0,24)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:1-16 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: runInBoundThread})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(345,1)-(357,33)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:1-16 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: runInBoundThread})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:18-23
             }
            Just (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [DComment (DP (0,-8),DP (0,-8)) "" Nothing,DComment (DP (0,0),DP (0,5)) "bound" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: action})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,5)-(356,30)
              }
             Just (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [DComment (DP (0,-6),DP (0,14)) "isCurrentThreadBound" Nothing] [((G AnnVbar),DP (0,0)),((AnnComment DComment (DP (0,-21),DP (0,-21)) "" Nothing),DP (0,-21)),((AnnComment DComment (DP (0,0),DP (0,2)) "if" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "bound" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])
             (GRHS 
              [
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:7-29 }
                Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                (BodyStmt 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:7-29 }
                  Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsVar 
                   (Unqual {OccName: rtsSupportsBoundThreads}))) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (PlaceHolder)))] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,33)-(356,30)
                }
               Just (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(347,9)-(356,30) Ref "delta-7"),DP (0,0))])
               (HsDo 
                (DoExpr) 
                [
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:9-37 }
                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-1),DP (0,3)) "then" Nothing),DP (0,-1)),((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:9-13 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: bound}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:18-37
                     }
                    Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])
                    (HsVar 
                     (Unqual {OccName: isCurrentThreadBound}))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30)
                   }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-20),DP (0,-14)) "action" Nothing] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30)
                     }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnIf),DP (0,0)),((AnnComment DComment (DP (0,-4),DP (0,0)) "else" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((G AnnThen),DP (1,4)),((AnnComment DComment (DP (0,-3),DP (0,-1)) "<-" Nothing),DP (0,-3)),((AnnComment DComment (DP (0,1),DP (0,9)) "newIORef" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "undefined" Nothing),DP (0,1)),((G AnnElse),DP (1,4))])
                    (HsIf 
                     (Just 
                      (HsLit 
                       (HsString "" {FastString: "noSyntaxExpr"}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:348:12-16
                       }
                      Just (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: bound}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:349:18-23
                       }
                      Just (Ann (DP (0,-2)) (ColDelta 9) DP (0,1) [DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,3)) "ref" Nothing] [((G AnnVal),DP (0,-2))])
                      (HsVar 
                       (Unqual {OccName: action}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(350,18)-(356,30)
                       }
                      Just (Ann (DP (0,-2)) (ColDelta 9) DP (0,1) [DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,3)) "let" Nothing] [((G AnnDo),DP (0,-2)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(351,17)-(356,30) Ref "delta-8"),DP (0,0))])
                      (HsDo 
                       (DoExpr) 
                       [
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:17-41
                          }
                         Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-3),DP (0,4)) "bracket" Nothing),DP (0,-3)),((G AnnLarrow),DP (0,1))])
                         (BindStmt 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:17-19
                            }
                           Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                           (VarPat 
                            (Unqual {OccName: ref}))) 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:24-41
                            }
                           Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                           (HsApp 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:24-31
                              }
                             Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: newIORef}))) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:33-41
                              }
                             Just (Ann (DP (0,-5)) (ColDelta 16) DP (0,1) [DComment (DP (0,-7),DP (0,-6)) "(" Nothing,DComment (DP (0,0),DP (0,12)) "newStablePtr" Nothing] [((G AnnVal),DP (0,-5))])
                             (HsVar 
                              (Unqual {OccName: undefined}))))) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})))),
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:17-73
                          }
                         Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-3),DP (0,8)) "action_plus" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing] [((G AnnLet),DP (0,0))])
                         (LetStmt 
                          (HsValBinds 
                           (ValBindsIn {Bag(Located (HsBind RdrName)): 
                            [
                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73
                               }
                              Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                              (FunBind 
                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-31
                                 }
                                Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                (Unqual {OccName: action_plus})) 
                               (False) 
                               (MG 
                                [
                                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73
                                   }
                                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-7),DP (0,6)) "freeStablePtr" Nothing),DP (0,-7)),((G AnnEqual),DP (0,1))])
                                  (Match 
                                   (Just 
                                    ((,) 
                                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-31
                                       }
                                      Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                      (Unqual {OccName: action_plus})) 
                                     (False))) 
                                   [] 
                                   (Nothing) 
                                   (GRHSs 
                                    [
                                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:33-73
                                       }
                                      Just (Ann (DP (0,-1)) (ColDelta 12) DP (0,-1) [] [])
                                      (GRHS 
                                       [] 
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-73
                                         }
                                        Just (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [])
                                        (OpApp 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-54
                                           }
                                          Just (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [])
                                          (HsApp 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-47
                                             }
                                            Just (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (HsVar 
                                             (Qual {ModuleName: Exception} {OccName: try}))) 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:49-54
                                             }
                                            Just (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                            (HsVar 
                                             (Unqual {OccName: action}))))) 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:56-58
                                           }
                                          Just (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                          (HsVar 
                                           (Unqual {OccName: >>=}))) 
                                         (PlaceHolder) 
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:60-73
                                           }
                                          Just (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [])
                                          (HsApp 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:60-69
                                             }
                                            Just (Ann (DP (0,0)) (ColDelta 39) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (HsVar 
                                             (Unqual {OccName: writeIORef}))) 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:71-73
                                             }
                                            Just (Ann (DP (0,1)) (ColDelta 50) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                            (HsVar 
                                             (Unqual {OccName: ref})))))))))] 
                                    (EmptyLocalBinds))))] 
                                [] 
                                (PlaceHolder) 
                                (FromSource)) 
                               (WpHole) 
                               (PlaceHolder) 
                               []))]} 
                            [])))),
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(356,30)
                          }
                         Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                         (BodyStmt 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(356,30)
                            }
                           Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                           (OpApp 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(355,84)
                              }
                             Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                             (HsApp 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(354,37)
                                }
                               Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                               (HsApp 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:17-50
                                  }
                                 Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                 (HsApp 
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:17-23
                                    }
                                   Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                   (HsVar 
                                    (Unqual {OccName: bracket}))) 
                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:25-50
                                    }
                                   Just (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                   (HsPar 
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:26-49
                                      }
                                     Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [])
                                     (HsApp 
                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:26-37
                                        }
                                       Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                       (HsVar 
                                        (Unqual {OccName: newStablePtr}))) 
                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:39-49
                                        }
                                       Just (Ann (DP (0,-21)) (ColDelta 22) DP (0,1) [DComment (DP (0,-12),DP (0,-11)) "\\" Nothing,DComment (DP (0,0),DP (0,6)) "cEntry" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,24)) "forkOS_entry_reimported" Nothing] [((G AnnVal),DP (0,-21))])
                                       (HsVar 
                                        (Unqual {OccName: action_plus}))))))))) 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:354:25-37
                                  }
                                 Just (Ann (DP (0,-6)) (ColDelta 8) DP (1,8) [DComment (DP (0,10),DP (0,16)) "cEntry" Nothing,DComment (DP (0,1),DP (0,3)) ">>" Nothing,DComment (DP (0,1),DP (0,10)) "readIORef" Nothing,DComment (DP (0,1),DP (0,4)) "ref" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (1,2),DP (1,14)) "unsafeResult" Nothing] [((G AnnVal),DP (0,-6))])
                                 (HsVar 
                                  (Unqual {OccName: freeStablePtr}))))) 
                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:25-84
                                }
                               Just (Ann (DP (0,-9)) (ColDelta 8) DP (1,8) [DComment (DP (1,-12),DP (1,-12)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,1)) "|" Nothing,DComment (DP (0,1),DP (0,10)) "otherwise" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,16)) "failNonThreaded" Nothing] [((G AnnOpenP),DP (0,-9)),((G AnnCloseP),DP (0,0))])
                               (HsPar 
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83
                                  }
                                 Just (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83 Ref "delta-9"),DP (0,0))])
                                 (HsLam 
                                  (MG 
                                   [
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83
                                      }
                                     Just (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((G AnnRarrow),DP (0,1))])
                                     (Match 
                                      (Nothing) 
                                      [
                                       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:27-32
                                         }
                                        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                        (VarPat 
                                         (Unqual {OccName: cEntry})))] 
                                      (Nothing) 
                                      (GRHSs 
                                       [
                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-83
                                          }
                                         Just (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [])
                                         (GRHS 
                                          [] 
                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-83
                                            }
                                           Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                           (OpApp 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-66
                                              }
                                             Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])
                                             (HsApp 
                                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-59
                                                }
                                               Just (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                               (HsVar 
                                                (Unqual {OccName: forkOS_entry_reimported}))) 
                                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:61-66
                                                }
                                               Just (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                               (HsVar 
                                                (Unqual {OccName: cEntry}))))) 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:68-69
                                              }
                                             Just (Ann (DP (0,1)) (ColDelta 42) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                             (HsVar 
                                              (Unqual {OccName: >>}))) 
                                            (PlaceHolder) 
                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:71-83
                                              }
                                             Just (Ann (DP (0,1)) (ColDelta 45) DP (0,1) [] [])
                                             (HsApp 
                                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:71-79
                                                }
                                               Just (Ann (DP (0,0)) (ColDelta 45) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                               (HsVar 
                                                (Unqual {OccName: readIORef}))) 
                                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:81-83
                                                }
                                               Just (Ann (DP (0,1)) (ColDelta 55) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                               (HsVar 
                                                (Unqual {OccName: ref})))))))))] 
                                       (EmptyLocalBinds))))] 
                                   [] 
                                   (PlaceHolder) 
                                   (FromSource)))))))) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:86-88
                              }
                             Just (Ann (DP (0,1)) (ColDelta 69) DP (0,1) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: >>=}))) 
                            (PlaceHolder) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:356:19-30
                              }
                             Just (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: unsafeResult}))))) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})) 
                          (PlaceHolder)))] 
                       (PlaceHolder))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder)))] 
                (PlaceHolder))))),
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:5-33 }
             Just (Ann (DP (-14,5)) (ColDelta 5) DP (1,5) [DComment (DP (1,1),DP (15,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis /bound/, an unbound thread is created temporarily using 'forkIO'.\n@runInBoundThread@ doesn't finish until the 'IO' computation finishes.\n\nUse this function /only/ in the rare case that you have actually observed a\nperformance loss due to the use of bound threads. A program that\ndoesn't need it's main thread to be bound and makes /heavy/ use of concurrency\n(e.g. a web server), might want to wrap it's @main@ action in\n@runInUnboundThread@.\n\nNote that exceptions which are thrown to the current thread are thrown in turn\nto the thread that is executing the given computation. This ensures there's\nalways a way of killing the forked thread.\n-}" Nothing] [((G AnnVbar),DP (-14,5)),((G AnnEqual),DP (0,1))])
             (GRHS 
              [
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:7-15 }
                Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                (BodyStmt 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:7-15 }
                  Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsVar 
                   (Unqual {OccName: otherwise}))) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (HsLit 
                  (HsString "" {FastString: "noSyntaxExpr"})) 
                 (PlaceHolder)))] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:19-33
                }
               Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsVar 
                (Unqual {OccName: failNonThreaded})))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1-34 }
    Just (Ann (DP (2,1)) (ColDelta 1) DP (17,1) [DComment (DP (2,1),DP (16,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis /bound/, an unbound thread is created temporarily using 'forkIO'.\n@runInBoundThread@ doesn't finish until the 'IO' computation finishes.\n\nUse this function /only/ in the rare case that you have actually observed a\nperformance loss due to the use of bound threads. A program that\ndoesn't need it's main thread to be bound and makes /heavy/ use of concurrency\n(e.g. a web server), might want to wrap it's @main@ action in\n@runInUnboundThread@.\n\nNote that exceptions which are thrown to the current thread are thrown in turn\nto the thread that is executing the given computation. This ensures there's\nalways a way of killing the forked thread.\n-}" Nothing,DComment (DP (-1,1),DP (-1,1)) "" Nothing,DComment (DP (0,0),DP (0,18)) "runInUnboundThread" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1-18 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: runInUnboundThread}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-34
        }
       Just (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "action" Nothing] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-34
          }
         Just (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,1)) "=" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-26
            }
           Just (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-24
              }
             Just (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,-3))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:26 }
             Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:31-34
            }
           Just (Ann (DP (0,0)) (ColDelta 31) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "do" Nothing] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:31-32
              }
             Just (Ann (DP (0,0)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:34 }
             Just (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,3),DP (1,3)) "" Nothing,DComment (DP (0,0),DP (0,5)) "bound" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing,DComment (DP (0,1),DP (0,21)) "isCurrentThreadBound" Nothing] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:1-18 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: runInUnboundThread})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:1-18 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: runInUnboundThread})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:20-25
             }
            Just (Ann (DP (0,9)) (ColDelta 20) DP (0,1) [DComment (DP (0,-16),DP (0,-16)) "" Nothing,DComment (DP (0,0),DP (0,2)) "if" Nothing,DComment (DP (0,1),DP (0,6)) "bound" Nothing] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: action})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,27)-(386,15)
              }
             Just (Ann (DP (0,-1)) (ColDelta 27) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,29)-(386,15)
                }
               Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(377,3)-(386,15) Ref "delta-10"),DP (0,0))])
               (HsDo 
                (DoExpr) 
                [
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:3-31 }
                  Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-3),DP (0,1)) "then" Nothing),DP (0,-3)),((G AnnLarrow),DP (0,1))])
                  (BindStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:3-7 }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                    (VarPat 
                     (Unqual {OccName: bound}))) 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:12-31
                     }
                    Just (Ann (DP (0,0)) (ColDelta 9) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "do" Nothing] [((G AnnVal),DP (0,0))])
                    (HsVar 
                     (Unqual {OccName: isCurrentThreadBound}))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})))),
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15)
                   }
                  Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                  (BodyStmt 
                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15)
                     }
                    Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnIf),DP (0,0)),((AnnComment DComment (DP (0,-4),DP (0,-4)) "" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,0),DP (0,2)) "mv" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing),DP (0,1)),((G AnnThen),DP (1,2)),((AnnComment DComment (DP (1,-2),DP (1,-2)) "" Nothing),DP (1,-2)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,12)) "unsafeResult" Nothing),DP (0,0)),((G AnnElse),DP (1,2))])
                    (HsIf 
                     (Just 
                      (HsLit 
                       (HsString "" {FastString: "noSyntaxExpr"}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:378:6-10 }
                      Just (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: bound}))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(379,10)-(385,29)
                       }
                      Just (Ann (DP (0,-1)) (ColDelta 7) DP (0,1) [DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,4)) "mask" Nothing] [((G AnnDo),DP (0,-1)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(380,7)-(385,29) Ref "delta-11"),DP (0,0))])
                      (HsDo 
                       (DoExpr) 
                       [
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:7-24 }
                         Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "tid" Nothing),DP (0,0)),((G AnnLarrow),DP (0,1))])
                         (BindStmt 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:7-8 }
                           Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                           (VarPat 
                            (Unqual {OccName: mv}))) 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:13-24
                            }
                           Just (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                           (HsVar 
                            (Unqual {OccName: newEmptyMVar}))) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})))),
                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,7)-(385,29)
                          }
                         Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-12),DP (0,-10)) "<-" Nothing,DComment (DP (0,1),DP (0,7)) "forkIO" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,14)) "Exception.try" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,7)) "restore" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (0,1),DP (0,8)) "putMVar" Nothing,DComment (DP (0,1),DP (0,3)) "mv" Nothing] [])
                         (BodyStmt 
                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,7)-(385,29)
                            }
                           Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                           (OpApp 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:7-10 }
                             Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: mask}))) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:12 }
                             Just (Ann (DP (0,0)) (ColDelta 5) DP (0,1) [DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,3)) "let" Nothing] [((G AnnVal),DP (0,0))])
                             (HsVar 
                              (Unqual {OccName: $}))) 
                            (PlaceHolder) 
                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29)
                              }
                             Just (Ann (DP (0,-3)) (ColDelta 7) DP (0,1) [DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,4)) "wait" Nothing] [((G AnnLam),DP (0,-3)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29) Ref "delta-12"),DP (0,0))])
                             (HsLam 
                              (MG 
                               [
                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29)
                                  }
                                 Just (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((AnnComment DComment (DP (0,-4),DP (0,-3)) "=" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,1),DP (0,9)) "takeMVar" Nothing),DP (0,1)),((G AnnRarrow),DP (0,1))])
                                 (Match 
                                  (Nothing) 
                                  [
                                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:15-21
                                     }
                                    Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                    (VarPat 
                                     (Unqual {OccName: restore})))] 
                                  (Nothing) 
                                  (GRHSs 
                                   [
                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,26)-(385,29)
                                      }
                                     Just (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [])
                                     (GRHS 
                                      [] 
                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,26)-(385,29)
                                        }
                                       Just (Ann (DP (0,0)) (ColDelta 12) DP (0,0) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(382,9)-(385,29) Ref "delta-13"),DP (0,0))])
                                       (HsDo 
                                        (DoExpr) 
                                        [
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:9-69 }
                                          Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnLarrow),DP (0,1))])
                                          (BindStmt 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:9-11 }
                                            Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                            (VarPat 
                                             (Unqual {OccName: tid}))) 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-69
                                             }
                                            Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])
                                            (OpApp 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-54
                                               }
                                              Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [])
                                              (OpApp 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-21
                                                 }
                                                Just (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                (HsVar 
                                                 (Unqual {OccName: forkIO}))) 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:23 }
                                                Just (Ann (DP (0,-16)) (ColDelta 14) DP (0,1) [DComment (DP (0,0),DP (0,17)) "Exception.throwTo" Nothing] [((G AnnVal),DP (0,-16))])
                                                (HsVar 
                                                 (Unqual {OccName: $}))) 
                                               (PlaceHolder) 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:25-54
                                                 }
                                                Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [])
                                                (HsApp 
                                                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:25-37
                                                   }
                                                  Just (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                  (HsVar 
                                                   (Qual {ModuleName: Exception} {OccName: try}))) 
                                                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:39-54
                                                   }
                                                  Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((AnnComment DComment (DP (0,-5),DP (0,-1)) "wait" Nothing),DP (0,-5)),((G AnnCloseP),DP (0,0))])
                                                  (HsPar 
                                                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:40-53
                                                     }
                                                    Just (Ann (DP (0,0)) (ColDelta 31) DP (0,0) [] [])
                                                    (HsApp 
                                                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:40-46
                                                       }
                                                      Just (Ann (DP (0,0)) (ColDelta 31) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                      (HsVar 
                                                       (Unqual {OccName: restore}))) 
                                                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:48-53
                                                       }
                                                      Just (Ann (DP (0,0)) (ColDelta 39) DP (0,1) [DComment (DP (0,-7),DP (0,-4)) "tid" Nothing,DComment (DP (0,1),DP (0,2)) "e" Nothing,DComment (DP (0,1),DP (0,3)) ">>" Nothing] [((G AnnVal),DP (0,0))])
                                                      (HsVar 
                                                       (Unqual {OccName: action}))))))))))) 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:56-58
                                               }
                                              Just (Ann (DP (0,1)) (ColDelta 47) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                              (HsVar 
                                               (Unqual {OccName: >>=}))) 
                                             (PlaceHolder) 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:60-69
                                               }
                                              Just (Ann (DP (0,1)) (ColDelta 51) DP (0,1) [] [])
                                              (HsApp 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:60-66
                                                 }
                                                Just (Ann (DP (0,0)) (ColDelta 51) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                (HsVar 
                                                 (Unqual {OccName: putMVar}))) 
                                               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:68-69
                                                 }
                                                Just (Ann (DP (0,1)) (ColDelta 59) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                (HsVar 
                                                 (Unqual {OccName: mv}))))))) 
                                           (HsLit 
                                            (HsString "" {FastString: "noSyntaxExpr"})) 
                                           (HsLit 
                                            (HsString "" {FastString: "noSyntaxExpr"})))),
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,9)-(384,52)
                                           }
                                          Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLet),DP (0,0))])
                                          (LetStmt 
                                           (HsValBinds 
                                            (ValBindsIn {Bag(Located (HsBind RdrName)): 
                                             [
                                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52)
                                                }
                                               Just (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [])
                                               (FunBind 
                                                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:13-16
                                                  }
                                                 Just (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                 (Unqual {OccName: wait})) 
                                                (False) 
                                                (MG 
                                                 [
                                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52)
                                                    }
                                                   Just (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [((AnnComment DComment (DP (0,-3),DP (0,0)) ">>=" Nothing),DP (0,-3)),((G AnnEqual),DP (0,1))])
                                                   (Match 
                                                    (Just 
                                                     ((,) 
                                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:13-16
                                                        }
                                                       Just (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                       (Unqual {OccName: wait})) 
                                                      (False))) 
                                                    [] 
                                                    (Nothing) 
                                                    (GRHSs 
                                                     [
                                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,18)-(384,52)
                                                        }
                                                       Just (Ann (DP (0,-1)) (ColDelta 5) DP (0,-1) [] [])
                                                       (GRHS 
                                                        [] 
                                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,20)-(384,52)
                                                          }
                                                         Just (Ann (DP (0,-10)) (ColDelta 7) DP (0,1) [DComment (DP (0,-1),DP (0,11)) "unsafeResult" Nothing] [])
                                                         (OpApp 
                                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:20-30
                                                            }
                                                           Just (Ann (DP (0,-10)) (ColDelta 7) DP (0,1) [] [])
                                                           (HsApp 
                                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:20-27
                                                              }
                                                             Just (Ann (DP (0,-10)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,-10))])
                                                             (HsVar 
                                                              (Unqual {OccName: takeMVar}))) 
                                                            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:29-30
                                                              }
                                                             Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                             (HsVar 
                                                              (Unqual {OccName: mv}))))) 
                                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:32-48
                                                            }
                                                           Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnBackquote),DP (0,0)),((G AnnVal),DP (0,0)),((G AnnBackquote),DP (0,0))])
                                                           (HsVar 
                                                            (Qual {ModuleName: Exception} {OccName: catch}))) 
                                                          (PlaceHolder) 
                                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52)
                                                            }
                                                           Just (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52) Ref "delta-14"),DP (0,0))])
                                                           (HsLam 
                                                            (MG 
                                                             [
                                                              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52)
                                                                }
                                                               Just (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((G AnnRarrow),DP (0,1))])
                                                               (Match 
                                                                (Nothing) 
                                                                [
                                                                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:51-70
                                                                   }
                                                                  Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                                                                  (ParPat 
                                                                   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:52-69  }
                                                                    Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnDcolon),DP (0,1))])
                                                                    (SigPatIn 
                                                                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:52 }
                                                                      Just (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                                      (VarPat 
                                                                       (Unqual {OccName: e}))) 
                                                                     (HsWB 
                                                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:57-69     }
                                                                       Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                       (HsTyVar 
                                                                        (Unqual {OccName: SomeException}))) 
                                                                      (PlaceHolder) 
                                                                      (PlaceHolder) 
                                                                      (PlaceHolder))))))] 
                                                                (Nothing) 
                                                                (GRHSs 
                                                                 [
                                                                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-52 }
                                                                   Just (Ann (DP (0,6)) (ColDelta -28) DP (1,-28) [DComment (DP (1,-45),DP (1,-45)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,4)) "else" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing] [])
                                                                   (GRHS 
                                                                    [] 
                                                                    ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-52   }
                                                                     Just (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [])
                                                                     (OpApp 
                                                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-44     }
                                                                       Just (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [])
                                                                       (HsApp 
                                                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-42       }
                                                                         Just (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [])
                                                                         (HsApp 
                                                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-38         }
                                                                           Just (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                                                           (HsVar 
                                                                            (Qual {ModuleName: Exception} {OccName: throwTo}))) 
                                                                          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:40-42         }
                                                                           Just (Ann (DP (0,1)) (ColDelta -10) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                           (HsVar 
                                                                            (Unqual {OccName: tid}))))) 
                                                                        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:44 }
                                                                         Just (Ann (DP (0,1)) (ColDelta -6) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                         (HsVar 
                                                                          (Unqual {OccName: e}))))) 
                                                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:46-47     }
                                                                       Just (Ann (DP (0,1)) (ColDelta -4) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                       (HsVar 
                                                                        (Unqual {OccName: >>}))) 
                                                                      (PlaceHolder) 
                                                                      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:49-52     }
                                                                       Just (Ann (DP (0,1)) (ColDelta -1) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                                                       (HsVar 
                                                                        (Unqual {OccName: wait})))))))] 
                                                                 (EmptyLocalBinds))))] 
                                                             [] 
                                                             (PlaceHolder) 
                                                             (FromSource))))))))] 
                                                     (EmptyLocalBinds))))] 
                                                 [] 
                                                 (PlaceHolder) 
                                                 (FromSource)) 
                                                (WpHole) 
                                                (PlaceHolder) 
                                                []))]} 
                                             [])))),
                                         ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-29 }
                                          Just (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])
                                          (BodyStmt 
                                           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-29 }
                                            Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])
                                            (OpApp 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-12 }
                                              Just (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])
                                              (HsVar 
                                               (Unqual {OccName: wait}))) 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:14-16
                                               }
                                              Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                              (HsVar 
                                               (Unqual {OccName: >>=}))) 
                                             (PlaceHolder) 
                                             ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:18-29
                                               }
                                              Just (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])
                                              (HsVar 
                                               (Unqual {OccName: unsafeResult}))))) 
                                           (HsLit 
                                            (HsString "" {FastString: "noSyntaxExpr"})) 
                                           (HsLit 
                                            (HsString "" {FastString: "noSyntaxExpr"})) 
                                           (PlaceHolder)))] 
                                        (PlaceHolder)))))] 
                                   (EmptyLocalBinds))))] 
                               [] 
                               (PlaceHolder) 
                               (FromSource)))))) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})) 
                          (HsLit 
                           (HsString "" {FastString: "noSyntaxExpr"})) 
                          (PlaceHolder)))] 
                       (PlaceHolder))) 
                     ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:386:10-15
                       }
                      Just (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])
                      (HsVar 
                       (Unqual {OccName: action}))))) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (HsLit 
                    (HsString "" {FastString: "noSyntaxExpr"})) 
                   (PlaceHolder)))] 
                (PlaceHolder)))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1-46 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,-2),DP (0,0)) "::" Nothing,DComment (DP (0,1),DP (0,7)) "Either" Nothing,DComment (DP (0,1),DP (0,14)) "SomeException" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,12)) "unsafeResult" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,7)) "either" Nothing,DComment (DP (0,1),DP (0,18)) "Exception.throwIO" Nothing,DComment (DP (0,1),DP (0,7)) "return" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1-12 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: unsafeResult}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-46
        }
       Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-46
          }
         Just (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-38
            }
           Just (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-36
              }
             Just (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [])
             (HsAppTy 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-22
                }
               Just (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [((G AnnVal),DP (0,0))])
               (HsTyVar 
                (Unqual {OccName: Either}))) 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:24-36
                }
               Just (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])
               (HsTyVar 
                (Unqual {OccName: SomeException}))))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:38 }
             Just (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:43-46
            }
           Just (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:43-44
              }
             Just (Ann (DP (0,0)) (ColDelta 43) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:46 }
             Just (Ann (DP (0,1)) (ColDelta 46) DP (0,1) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: a}))))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-12 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: unsafeResult})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46 }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,-12),DP (0,66)) "-- ---------------------------------------------------------------------------" Nothing),DP (0,-12)),((G AnnEqual),DP (0,1))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-12 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: unsafeResult})) 
            (False))) 
          [] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:14-46
              }
             Just (Ann (DP (0,-1)) (ColDelta 14) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:16-46
                }
               Just (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [])
               (HsApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:16-39
                  }
                 Just (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [])
                 (HsApp 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:16-21
                    }
                   Just (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Unqual {OccName: either}))) 
                  ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:23-39
                    }
                   Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])
                   (HsVar 
                    (Qual {ModuleName: Exception} {OccName: throwIO}))))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:41-46
                  }
                 Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: return})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1-29 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (12,1) [DComment (DP (1,1),DP (1,34)) "-- threadWaitRead/threadWaitWrite" Nothing,DComment (DP (1,1),DP (1,79)) "-- ---------------------------------------------------------------------------" Nothing,DComment (DP (1,1),DP (1,34)) "-- threadWaitRead/threadWaitWrite" Nothing,DComment (DP (0,-33),DP (0,35)) "-- | Block the current thread until data is available to read on the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,66)) "-- | Block the current thread until data is available to read on the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (0,-36),DP (0,29)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,66)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,49)) "-- that has been used with 'threadWaitRead', use" Nothing,DComment (DP (0,-48),DP (0,17)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing,DComment (DP (0,-26),DP (0,42)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,14)) "threadWaitRead" Nothing,DComment (DP (0,-14),DP (0,34)) "-- that has been used with 'threadWaitRead', use" Nothing,DComment (DP (0,-33),DP (0,-31)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "Fd" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,14)) "threadWaitRead" Nothing,DComment (DP (0,-14),DP (0,12)) "-- 'GHC.Conc.closeFdWith'." Nothing,DComment (DP (0,-11),DP (0,-9)) "fd" Nothing] [((AnnComment DComment (DP (0,-14),DP (0,7)) "#ifdef mingw32_HOST_OS" Nothing),DP (0,-14)),((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1-14 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitRead}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-29
        }
       Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-29
          }
         Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-20
            }
           Just (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Fd}))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:25-29
            }
           Just (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:25-26
              }
             Just (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:28-29
              }
             Just (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:1-14 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitRead})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,3),DP (1,63)) "-- fdReady does the right thing, but we have to call it in a" Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,71)) "-- separate thread, otherwise threadWaitRead won't be interruptible," Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,41)) "-- and this only works with -threaded." Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "case" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,1)) "0" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,14)) "hWaitForInput" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "stdin" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "-" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "1" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,27),DP (1,27)) "" Nothing),DP (1,27)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,25),DP (1,77)) "-- hWaitForInput does work properly, but we can only" Nothing),DP (1,25)),((AnnComment DComment (DP (1,25),DP (1,67)) "-- do this for stdin since we know its FD." Nothing),DP (1,25)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,79)) "\"threadWaitRead requires -threaded on Windows, or use System.IO.hWaitForInput\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (12,3))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:1-14 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitRead})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:16-17
             }
            Just (Ann (DP (0,-51)) (ColDelta 16) DP (0,1) [DComment (DP (0,-12),DP (0,52)) "-- we have no IO manager implementing threadWaitRead on Windows." Nothing] [((G AnnVal),DP (0,-51))])
            (VarPat 
             (Unqual {OccName: fd})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:3-30 }
             Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:5-30 }
               Just (Ann (DP (0,2)) (ColDelta 5) DP (0,1) [DComment (DP (0,-1),DP (0,-1)) "" Nothing] [])
               (HsApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:5-27 }
                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Qual {ModuleName: GHC.Conc} {OccName: threadWaitRead}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:29-30
                  }
                 Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fd})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1-30 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (10,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,63)) "-- | Block the current thread until data can be written to the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,66)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,69)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,50)) "-- that has been used with 'threadWaitWrite', use" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1-15 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitWrite}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-30
        }
       Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-30
          }
         Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-21
            }
           Just (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Fd}))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:26-30
            }
           Just (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:26-27
              }
             Just (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:29-30
              }
             Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:1-15 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitWrite})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,48)) "\"threadWaitWrite requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (5,3))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:1-15 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitWrite})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:17-18
             }
            Just (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: fd})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:3-31 }
             Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:5-31 }
               Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
               (HsApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:5-28 }
                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Qual {ModuleName: GHC.Conc} {OccName: threadWaitWrite}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:30-31
                  }
                 Just (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fd})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1-45 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,61)) "-- | Returns an STM action that can be used to wait for data" Nothing,DComment (DP (1,1),DP (1,61)) "-- to read from a file descriptor. The second returned value" Nothing,DComment (DP (1,1),DP (1,59)) "-- is an IO action that can be used to deregister interest" Nothing,DComment (DP (1,1),DP (1,27)) "-- in the file descriptor." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,20)) "-- /Since: 4.7.0.0/" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1-17 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitReadSTM}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-45
        }
       Just (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-45
          }
         Just (Ann (DP (0,0)) (ColDelta 22) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-23
            }
           Just (Ann (DP (0,0)) (ColDelta 22) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Fd}))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:28-45
            }
           Just (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:28-29
              }
             Just (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:31-45
              }
             Just (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:32-37
                 }
                Just (Ann (DP (0,0)) (ColDelta 32) DP (0,0) [] [((G AnnComma),DP (0,0))])
                (HsAppTy 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:32-34
                   }
                  Just (Ann (DP (0,0)) (ColDelta 32) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsTyVar 
                   (Unqual {OccName: STM}))) 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:36-37
                   }
                  Just (Ann (DP (0,1)) (ColDelta 36) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                  (HsTupleTy 
                   (HsBoxedOrConstraintTuple) 
                   [])))),
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:40-44
                 }
                Just (Ann (DP (0,1)) (ColDelta 40) DP (0,1) [] [])
                (HsAppTy 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:40-41
                   }
                  Just (Ann (DP (0,0)) (ColDelta 40) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsTyVar 
                   (Unqual {OccName: IO}))) 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:43-44
                   }
                  Just (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                  (HsTupleTy 
                   (HsBoxedOrConstraintTuple) 
                   []))))])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:1-17 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitReadSTM})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "v" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "newTVarIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "Nothing" Nothing),DP (0,1)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,5)) "mask_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "void" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,46),DP (1,46)) "" Nothing),DP (1,46)),((AnnComment DComment (DP (0,0),DP (0,10)) "atomically" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,9)) "writeTVar" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "Just" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "readTVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (1,39),DP (1,39)) "" Nothing),DP (1,39)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,7)) "Nothing" Nothing),DP (0,0)),((AnnComment DComment (DP (0,9),DP (0,11)) "->" Nothing),DP (0,9)),((AnnComment DComment (DP (0,1),DP (0,6)) "retry" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,3),DP (0,5)) "->" Nothing),DP (0,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "throwSTM" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "killAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,11)) "killAction" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "|" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,50)) "\"threadWaitReadSTM requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (14,3))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:1-17 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitReadSTM})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:19-20
             }
            Just (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: fd})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:3-33 }
             Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:5-33 }
               Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
               (HsApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:5-30 }
                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Qual {ModuleName: GHC.Conc} {OccName: threadWaitReadSTM}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:32-33
                  }
                 Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fd})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      []))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1-46 }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,63)) "-- | Returns an STM action that can be used to wait until data" Nothing,DComment (DP (1,1),DP (1,66)) "-- can be written to a file descriptor. The second returned value" Nothing,DComment (DP (1,1),DP (1,59)) "-- is an IO action that can be used to deregister interest" Nothing,DComment (DP (1,1),DP (1,27)) "-- in the file descriptor." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,20)) "-- /Since: 4.7.0.0/" Nothing] [((G AnnDcolon),DP (0,1))])
    (SigD 
     (TypeSig 
      [
       ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1-18 }
        Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
        (Unqual {OccName: threadWaitWriteSTM}))] 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-46
        }
       Just (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [])
       (HsForAllTy 
        (Implicit) 
        (Nothing) 
        (HsQTvs 
         [] 
         []) 
        ({ <no location info> }
         Nothing
         []) 
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-46
          }
         Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnRarrow),DP (0,1))])
         (HsFunTy 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-24
            }
           Just (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0))])
           (HsTyVar 
            (Unqual {OccName: Fd}))) 
          ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:29-46
            }
           Just (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])
           (HsAppTy 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:29-30
              }
             Just (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (HsTyVar 
              (Unqual {OccName: IO}))) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:32-46
              }
             Just (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
             (HsTupleTy 
              (HsBoxedOrConstraintTuple) 
              [
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:33-38
                 }
                Just (Ann (DP (0,0)) (ColDelta 33) DP (0,0) [] [((G AnnComma),DP (0,0))])
                (HsAppTy 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:33-35
                   }
                  Just (Ann (DP (0,0)) (ColDelta 33) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsTyVar 
                   (Unqual {OccName: STM}))) 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:37-38
                   }
                  Just (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                  (HsTupleTy 
                   (HsBoxedOrConstraintTuple) 
                   [])))),
               ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:41-45
                 }
                Just (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [])
                (HsAppTy 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:41-42
                   }
                  Just (Ann (DP (0,0)) (ColDelta 41) DP (0,0) [] [((G AnnVal),DP (0,0))])
                  (HsTyVar 
                   (Unqual {OccName: IO}))) 
                 ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:44-45
                   }
                  Just (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])
                  (HsTupleTy 
                   (HsBoxedOrConstraintTuple) 
                   []))))])))))))) 
      (PlaceHolder)))),
   ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34)
     }
    Just (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])
    (ValD 
     (FunBind 
      ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:1-18 }
       Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
       (Unqual {OccName: threadWaitWriteSTM})) 
      (False) 
      (MG 
       [
        ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34)
          }
         Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "v" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "newTVarIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "Nothing" Nothing),DP (0,1)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,5)) "mask_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "void" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,46),DP (1,46)) "" Nothing),DP (1,46)),((AnnComment DComment (DP (0,0),DP (0,10)) "atomically" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,9)) "writeTVar" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "Just" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "readTVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (1,39),DP (1,39)) "" Nothing),DP (1,39)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,7)) "Nothing" Nothing),DP (0,0)),((AnnComment DComment (DP (0,9),DP (0,11)) "->" Nothing),DP (0,9)),((AnnComment DComment (DP (0,1),DP (0,6)) "retry" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,3),DP (0,5)) "->" Nothing),DP (0,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "throwSTM" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "killAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,11)) "killAction" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "|" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,51)) "\"threadWaitWriteSTM requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (14,3))])
         (Match 
          (Just 
           ((,) 
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:1-18 }
             Just (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])
             (Unqual {OccName: threadWaitWriteSTM})) 
            (False))) 
          [
           ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:20-21
             }
            Just (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])
            (VarPat 
             (Unqual {OccName: fd})))] 
          (Nothing) 
          (GRHSs 
           [
            ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:3-34 }
             Just (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])
             (GRHS 
              [] 
              ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:5-34 }
               Just (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])
               (HsApp 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:5-31 }
                 Just (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Qual {ModuleName: GHC.Conc} {OccName: threadWaitWriteSTM}))) 
                ({ ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:33-34
                  }
                 Just (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnVal),DP (0,0))])
                 (HsVar 
                  (Unqual {OccName: fd})))))))] 
           (EmptyLocalBinds))))] 
       [] 
       (PlaceHolder) 
       (FromSource)) 
      (WpHole) 
      (PlaceHolder) 
      [])))] 
  (Nothing) 
  (Nothing)))
==============
[(AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:1:1 CN "HsModule" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,28)) "{-# LANGUAGE Trustworthy #-}" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (5,6)) "{-# LANGUAGE CPP\n           , MagicHash\n           , UnboxedTuples\n           , ScopedTypeVariables\n  #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,45)) "{-# OPTIONS_GHC -fno-warn-unused-imports #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,43)) "{-# OPTIONS_GHC -fno-warn-deprecations #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-42),DP (0,2)) "{-# OPTIONS_GHC -fno-warn-unused-imports #-}" Nothing),DP (0,-42)),((AnnComment DComment (DP (1,1),DP (1,43)) "{-# OPTIONS_GHC -fno-warn-deprecations #-}" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-42),DP (0,25)) "-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN" Nothing),DP (0,-42)),((AnnComment DComment (DP (1,1),DP (1,45)) "-- and Control.Concurrent.SampleVar imports." Nothing),DP (1,1)),((AnnComment DComment (DP (0,-44),DP (0,23)) "-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN" Nothing),DP (0,-44)),((AnnComment DComment (DP (1,1),DP (1,45)) "-- and Control.Concurrent.SampleVar imports." Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "-- |" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-4),DP (0,73)) "-----------------------------------------------------------------------------" Nothing),DP (0,-4)),((AnnComment DComment (DP (1,1),DP (1,5)) "-- |" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-4),DP (0,32)) "-- Module      :  Control.Concurrent" Nothing),DP (0,-4)),((AnnComment DComment (DP (1,1),DP (1,37)) "-- Module      :  Control.Concurrent" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-36),DP (0,16)) "-- Copyright   :  (c) The University of Glasgow 2001" Nothing),DP (0,-36)),((AnnComment DComment (DP (1,1),DP (1,53)) "-- Copyright   :  (c) The University of Glasgow 2001" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-52),DP (0,13)) "-- License     :  BSD-style (see the file libraries/base/LICENSE)" Nothing),DP (0,-52)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,63)) "-- License     :  BSD-style (see the file libraries/base/LICENSE)" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,37)) "-- Maintainer  :  libraries@haskell.org" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,31)) "-- Stability   :  experimental" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-30),DP (0,9)) "-- Maintainer  :  libraries@haskell.org" Nothing),DP (0,-30)),((AnnComment DComment (DP (1,1),DP (1,31)) "-- Stability   :  experimental" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-30),DP (0,14)) "-- Portability :  non-portable (concurrency)" Nothing),DP (0,-30)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,42)) "-- Portability :  non-portable (concurrency)" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,57)) "-- A common interface to a collection of useful concurrency" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,17)) "-- abstractions." Nothing),DP (1,1)),((AnnComment DComment (DP (0,-16),DP (0,43)) "-- A common interface to a collection of useful concurrency" Nothing),DP (0,-16)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,14)) "-- abstractions." Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,3)) "--" Nothing),DP (1,1)),((AnnComment DComment (DP (0,-2),DP (0,75)) "-----------------------------------------------------------------------------" Nothing),DP (0,-2)),((AnnComment DComment (DP (1,1),DP (1,78)) "-----------------------------------------------------------------------------" Nothing),DP (1,1)),((AnnComment DComment (DP (1,1),DP (1,7)) "module" Nothing),DP (1,1)),((AnnComment DComment (DP (0,1),DP (0,19)) "Control.Concurrent" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((G AnnModule),DP (27,1)),((G AnnVal),DP (0,1)),((G AnnWhere),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "unsafe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,26)) "\"rtsSupportsBoundThreads\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "Bool" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "withThread" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "m" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "mask_" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "io" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) ">>=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "putMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "x" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "takeMVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "m" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "x" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "a" Nothing),DP (0,1)),((AnnComment DComment (DP (1,5),DP (1,5)) "" Nothing),DP (1,5)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,4)) "->" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,8)) "throwIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "Fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (1,4),DP (1,4)) "" Nothing),DP (1,4)),((AnnComment DComment (DP (0,0),DP (0,19)) "throwErrnoIfMinus1_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (1,9),DP (1,16)) "fdReady" Nothing),DP (1,9)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,12)) "fromIntegral" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "write" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "iNFINITE" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,8)) "iNFINITE" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,11)) "0xFFFFFFFF" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "-- urgh" Nothing),DP (0,1)),((AnnComment DComment (DP (2,1),DP (2,1)) "" Nothing),DP (2,1)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "import" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "ccall" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "safe" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "\"fdReady\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,3),DP (1,10)) "fdReady" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "IO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "CInt" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,6)) "#endif" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (2,79)) "-- ---------------------------------------------------------------------------" Nothing),DP (2,1)),((AnnComment DComment (DP (1,1),DP (1,13)) "-- More docs" Nothing),DP (1,1)),((AnnComment DComment (DP (2,1),DP (42,3)) "{- $osthreads\n\n      #osthreads# In GHC, threads created by 'forkIO' are lightweight threads, and\n      are managed entirely by the GHC runtime.  Typically Haskell\n      threads are an order of magnitude or two more efficient (in\n      terms of both time and space) than operating system threads.\n\n      The downside of having lightweight threads is that only one can\n      run at a time, so if one thread blocks in a foreign call, for\n      example, the other threads cannot continue.  The GHC runtime\n      works around this by making use of full OS threads where\n      necessary.  When the program is built with the @-threaded@\n      option (to link against the multithreaded version of the\n      runtime), a thread making a @safe@ foreign call will not block\n      the other threads in the system; another OS thread will take\n      over running Haskell threads until the original call returns.\n      The runtime maintains a pool of these /worker/ threads so that\n      multiple Haskell threads can be involved in external calls\n      simultaneously.\n\n      The \"System.IO\" library manages multiplexing in its own way.  On\n      Windows systems it uses @safe@ foreign calls to ensure that\n      threads doing I\\/O operations don't block the whole runtime,\n      whereas on Unix systems all the currently blocked I\\/O requests\n      are managed by a single thread (the /IO manager thread/) using\n      a mechanism such as @epoll@ or @kqueue@, depending on what is\n      provided by the host operating system.\n\n      The runtime will run a Haskell thread using any of the available\n      worker OS threads.  If you need control over which particular OS\n      thread is used to run a given Haskell thread, perhaps because\n      you need to call a foreign library that uses OS-thread-local\n      state, then you need bound threads (see \"Control.Concurrent#boundthreads\").\n\n      If you don't use the @-threaded@ option, then the runtime does\n      not make use of multiple OS threads.  Foreign calls will block\n      all other running Haskell threads until the call returns.  The\n      \"System.IO\" library still does multiplexing, so there can be multiple\n      threads doing I\\/O, and this is handled internally by the runtime using\n      @select@.\n-}" Nothing),DP (2,1)),((AnnComment DComment (DP (-40,1),DP (1,3)) "{- $osthreads\n\n      #osthreads# In GHC, threads created by 'forkIO' are lightweight threads, and\n\n      are managed entirely by the GHC runtime.  Typically Haskell\n      threads are an order of magnitude or two more efficient (in\n      terms of both time and space) than operating system threads.\n\n      The downside of having lightweight threads is that only one can\n      run at a time, so if one thread blocks in a foreign call, for\n      example, the other threads cannot continue.  The GHC runtime\n      works around this by making use of full OS threads where\n      necessary.  When the program is built with the @-threaded@\n      option (to link against the multithreaded version of the\n      runtime), a thread making a @safe@ foreign call will not block\n      the other threads in the system; another OS thread will take\n      over running Haskell threads until the original call returns.\n      The runtime maintains a pool of these /worker/ threads so that\n      multiple Haskell threads can be involved in external calls\n      simultaneously.\n\n      The \"System.IO\" library manages multiplexing in its own way.  On\n      Windows systems it uses @safe@ foreign calls to ensure that\n      threads doing I\\/O operations don't block the whole runtime,\n      whereas on Unix systems all the currently blocked I\\/O requests\n      are managed by a single thread (the /IO manager thread/) using\n      a mechanism such as @epoll@ or @kqueue@, depending on what is\n      provided by the host operating system.\n\n      The runtime will run a Haskell thread using any of the available\n      worker OS threads.  If you need control over which particular OS\n      thread is used to run a given Haskell thread, perhaps because\n      you need to call a foreign library that uses OS-thread-local\n      state, then you need bound threads (see \"Control.Concurrent#boundthreads\").\n\n      If you don't use the @-threaded@ option, then the runtime does\n      not make use of multiple OS threads.  Foreign calls will block\n      all other running Haskell threads until the call returns.  The\n      \"System.IO\" library still does multiplexing, so there can be multiple\n      threads doing I\\/O, and this is handled internally by the runtime using\n      @select@.\n-}" Nothing),DP (-40,1)),((AnnComment DComment (DP (1,1),DP (59,3)) "{- $termination\n\n      In a standalone GHC program, only the main thread is\n      required to terminate in order for the process to terminate.\n      Thus all other forked threads will simply terminate at the same\n      time as the main thread (the terminology for this kind of\n      behaviour is \\\"daemonic threads\\\").\n\n      If you want the program to wait for child threads to\n      finish before exiting, you need to program this yourself.  A\n      simple mechanism is to have each child thread write to an\n      'MVar' when it completes, and have the main\n      thread wait on all the 'MVar's before\n      exiting:\n\n>   myForkIO :: IO () -> IO (MVar ())\n>   myForkIO io = do\n>     mvar <- newEmptyMVar\n>     forkFinally io (\\_ -> putMVar mvar ())\n>     return mvar\n\n      Note that we use 'forkFinally' to make sure that the\n      'MVar' is written to even if the thread dies or\n      is killed for some reason.\n\n      A better method is to keep a global list of all child\n      threads which we should wait for at the end of the program:\n\n>    children :: MVar [MVar ()]\n>    children = unsafePerformIO (newMVar [])\n>\n>    waitForChildren :: IO ()\n>    waitForChildren = do\n>      cs <- takeMVar children\n>      case cs of\n>        []   -> return ()\n>        m:ms -> do\n>           putMVar children ms\n>           takeMVar m\n>           waitForChildren\n>\n>    forkChild :: IO () -> IO ThreadId\n>    forkChild io = do\n>        mvar <- newEmptyMVar\n>        childs <- takeMVar children\n>        putMVar children (mvar:childs)\n>        forkFinally io (\\_ -> putMVar mvar ())\n>\n>     main =\n>       later waitForChildren $\n>       ...\n\n      The main thread principle also applies to calls to Haskell from\n      outside, using @foreign export@.  When the @foreign export@ed\n      function is invoked, it starts a new main thread, and it returns\n      when this main thread terminates.  If the call causes new\n      threads to be forked, they may remain in the system after the\n      @foreign export@ed function has returned.\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (-57,1),DP (1,3)) "{- $termination\n\n      In a standalone GHC program, only the main thread is\n      required to terminate in order for the process to terminate.\n      Thus all other forked threads will simply terminate at the same\n      time as the main thread (the terminology for this kind of\n      behaviour is \\\"daemonic threads\\\").\n\n      If you want the program to wait for child threads to\n      finish before exiting, you need to program this yourself.  A\n      simple mechanism is to have each child thread write to an\n      'MVar' when it completes, and have the main\n      thread wait on all the 'MVar's before\n      exiting:\n\n>   myForkIO :: IO () -> IO (MVar ())\n>   myForkIO io = do\n>     mvar <- newEmptyMVar\n>     forkFinally io (\\_ -> putMVar mvar ())\n>     return mvar\n\n      Note that we use 'forkFinally' to make sure that the\n      'MVar' is written to even if the thread dies or\n      is killed for some reason.\n\n      A better method is to keep a global list of all child\n      threads which we should wait for at the end of the program:\n\n>    children :: MVar [MVar ()]\n>    children = unsafePerformIO (newMVar [])\n>\n>    waitForChildren :: IO ()\n>    waitForChildren = do\n>      cs <- takeMVar children\n>      case cs of\n>        []   -> return ()\n>        m:ms -> do\n>           putMVar children ms\n>           takeMVar m\n>           waitForChildren\n>\n>    forkChild :: IO () -> IO ThreadId\n>    forkChild io = do\n>        mvar <- newEmptyMVar\n>        childs <- takeMVar children\n>        putMVar children (mvar:childs)\n>        forkFinally io (\\_ -> putMVar mvar ())\n>\n>     main =\n>       later waitForChildren $\n>       ...\n\n      The main thread principle also applies to calls to Haskell from\n      outside, using @foreign export@.  When the @foreign export@ed\n      function is invoked, it starts a new main thread, and it returns\n      when this main thread terminates.  If the call causes new\n      threads to be forked, they may remain in the system after the\n      @foreign export@ed function has returned.\n-}" Nothing),DP (-57,1)),((AnnComment DComment (DP (1,1),DP (29,3)) "{- $preemption\n\n      GHC implements pre-emptive multitasking: the execution of\n      threads are interleaved in a random fashion.  More specifically,\n      a thread may be pre-empted whenever it allocates some memory,\n      which unfortunately means that tight loops which do no\n      allocation tend to lock out other threads (this only seems to\n      happen with pathological benchmark-style code, however).\n\n      The rescheduling timer runs on a 20ms granularity by\n      default, but this may be altered using the\n      @-i\\<n\\>@ RTS option.  After a rescheduling\n      \\\"tick\\\" the running thread is pre-empted as soon as\n      possible.\n\n      One final note: the\n      @aaaa@ @bbbb@ example may not\n      work too well on GHC (see Scheduling, above), due\n      to the locking on a 'System.IO.Handle'.  Only one thread\n      may hold the lock on a 'System.IO.Handle' at any one\n      time, so if a reschedule happens while a thread is holding the\n      lock, the other thread won't be able to run.  The upshot is that\n      the switch from @aaaa@ to\n      @bbbbb@ happens infrequently.  It can be\n      improved by lowering the reschedule tick period.  We also have a\n      patch that causes a reschedule whenever a thread waiting on a\n      lock is woken up, but haven't found it to be useful for anything\n      other than this example :-)\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (-27,1),DP (1,3)) "{- $preemption\n\n      GHC implements pre-emptive multitasking: the execution of\n      threads are interleaved in a random fashion.  More specifically,\n      a thread may be pre-empted whenever it allocates some memory,\n      which unfortunately means that tight loops which do no\n      allocation tend to lock out other threads (this only seems to\n      happen with pathological benchmark-style code, however).\n\n      The rescheduling timer runs on a 20ms granularity by\n      default, but this may be altered using the\n      @-i\\<n\\>@ RTS option.  After a rescheduling\n      \\\"tick\\\" the running thread is pre-empted as soon as\n      possible.\n\n      One final note: the\n      @aaaa@ @bbbb@ example may not\n      work too well on GHC (see Scheduling, above), due\n      to the locking on a 'System.IO.Handle'.  Only one thread\n      may hold the lock on a 'System.IO.Handle' at any one\n      time, so if a reschedule happens while a thread is holding the\n      lock, the other thread won't be able to run.  The upshot is that\n      the switch from @aaaa@ to\n      @bbbbb@ happens infrequently.  It can be\n      improved by lowering the reschedule tick period.  We also have a\n      patch that causes a reschedule whenever a thread waiting on a\n      lock is woken up, but haven't found it to be useful for anything\n      other than this example :-)\n-}" Nothing),DP (-27,1)),((AnnComment DComment (DP (1,1),DP (26,3)) "{- $deadlock\n\nGHC attempts to detect when threads are deadlocked using the garbage\ncollector.  A thread that is not reachable (cannot be found by\nfollowing pointers from live objects) must be deadlocked, and in this\ncase the thread is sent an exception.  The exception is either\n'BlockedIndefinitelyOnMVar', 'BlockedIndefinitelyOnSTM',\n'NonTermination', or 'Deadlock', depending on the way in which the\nthread is deadlocked.\n\nNote that this feature is intended for debugging, and should not be\nrelied on for the correct operation of your program.  There is no\nguarantee that the garbage collector will be accurate enough to detect\nyour deadlock, and no guarantee that the garbage collector will run in\na timely enough manner.  Basically, the same caveats as for finalizers\napply to deadlock detection.\n\nThere is a subtle interaction between deadlock detection and\nfinalizers (as created by 'Foreign.Concurrent.newForeignPtr' or the\nfunctions in \"System.Mem.Weak\"): if a thread is blocked waiting for a\nfinalizer to run, then the thread will be considered deadlocked and\nsent an exception.  So preferably don't do this, but if you have no\nalternative then it is possible to prevent the thread from being\nconsidered deadlocked by making a 'StablePtr' pointing to it.  Don't\nforget to release the 'StablePtr' later with 'freeStablePtr'.\n-}" Nothing),DP (1,1)),((AnnComment DComment (DP (-24,1),DP (1,3)) "{- $deadlock\n\nGHC attempts to detect when threads are deadlocked using the garbage\ncollector.  A thread that is not reachable (cannot be found by\nfollowing pointers from live objects) must be deadlocked, and in this\ncase the thread is sent an exception.  The exception is either\n'BlockedIndefinitelyOnMVar', 'BlockedIndefinitelyOnSTM',\n'NonTermination', or 'Deadlock', depending on the way in which the\nthread is deadlocked.\n\nNote that this feature is intended for debugging, and should not be\nrelied on for the correct operation of your program.  There is no\nguarantee that the garbage collector will be accurate enough to detect\nyour deadlock, and no guarantee that the garbage collector will run in\na timely enough manner.  Basically, the same caveats as for finalizers\napply to deadlock detection.\n\nThere is a subtle interaction between deadlock detection and\nfinalizers (as created by 'Foreign.Concurrent.newForeignPtr' or the\nfunctions in \"System.Mem.Weak\"): if a thread is blocked waiting for a\nfinalizer to run, then the thread will be considered deadlocked and\nsent an exception.  So preferably don't do this, but if you have no\nalternative then it is possible to prevent the thread from being\nconsidered deadlocked by making a 'StablePtr' pointing to it.  Don't\nforget to release the 'StablePtr' later with 'freeStablePtr'.\n-}" Nothing),DP (-24,1)),((AnnComment DComment (DP (0,-2),DP (0,-2)) "" Nothing),DP (0,-2)),((G AnnEofPos),DP (190,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(28,27)-(106,5) CN "(:)" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 27) DP (0,1) [DComment (DP (0,-17),DP (0,6)) "-- * Concurrent Haskell" Nothing] [((G AnnOpenP),DP (0,-5)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- * GHC's implementation of concurrency" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- * GHC's implementation of concurrency" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,62)) "-- |This section describes features specific to GHC's" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- implementation of Concurrent Haskell." Nothing),DP (1,9)),((AnnComment DComment (DP (0,-40),DP (0,13)) "-- |This section describes features specific to GHC's" Nothing),DP (0,-40)),((AnnComment DComment (DP (1,9),DP (1,49)) "-- implementation of Concurrent Haskell." Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,59)) "-- ** Haskell threads and Operating System threads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,59)) "-- ** Haskell threads and Operating System threads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,22)) "-- $osthreads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,22)) "-- $osthreads" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,38)) "-- ** Terminating the program" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,38)) "-- ** Terminating the program" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,24)) "-- $termination" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,24)) "-- $termination" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,26)) "-- ** Pre-emption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,26)) "-- ** Pre-emption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- $preemption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- $preemption" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- ** Deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,23)) "-- ** Deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,21)) "-- $deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,9),DP (1,21)) "-- $deadlock" Nothing),DP (1,9)),((AnnComment DComment (DP (1,5),DP (1,6)) ")" Nothing),DP (1,5)),((AnnComment DComment (DP (0,1),DP (0,6)) "where" Nothing),DP (0,1)),((G AnnCloseP),DP (23,5))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:35:9-16 CN "IEThingAbs" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (7,9) [DComment (DP (1,9),DP (1,32)) "-- * Concurrent Haskell" Nothing,DComment (DP (1,9),DP (1,23)) "-- $conc_intro" Nothing,DComment (DP (1,9),DP (1,23)) "-- $conc_intro" Nothing,DComment (DP (1,9),DP (1,42)) "-- * Basic concurrency operations" Nothing,DComment (DP (1,9),DP (1,42)) "-- * Basic concurrency operations" Nothing,DComment (DP (1,9),DP (1,17)) "ThreadId" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:35:9-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-8),DP (0,2)) "myThreadId" Nothing),DP (0,-8)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:36:9-18 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:36:9-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:38:9-14 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (2,9) [DComment (DP (1,9),DP (1,15)) "forkIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:38:9-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-6),DP (0,5)) "forkFinally" Nothing),DP (0,-6)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:39:9-19 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,4),DP (0,5)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:39:9-19 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-11),DP (0,5)) "forkIOWithUnmask" Nothing),DP (0,-11)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:40:9-24 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,4),DP (0,5)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:40:9-24 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-16),DP (0,-6)) "killThread" Nothing),DP (0,-16)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:41:9-18 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:41:9-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-10),DP (0,-3)) "throwTo" Nothing),DP (0,-10)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:42:9-15 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:42:9-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:45:9-14 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (3,9) [DComment (DP (1,9),DP (1,36)) "-- ** Threads with affinity" Nothing,DComment (DP (1,9),DP (1,15)) "forkOn" Nothing,DComment (DP (0,-6),DP (0,21)) "-- ** Threads with affinity" Nothing,DComment (DP (0,-21),DP (0,-20)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:45:9-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-6),DP (0,10)) "forkOnWithUnmask" Nothing),DP (0,-6)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:46:9-24 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,9),DP (0,10)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:46:9-24 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-16),DP (0,2)) "getNumCapabilities" Nothing),DP (0,-16)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:47:9-26 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:47:9-26 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:48:9-26 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:48:9-26 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-18),DP (0,-2)) "threadCapability" Nothing),DP (0,-18)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:49:9-24 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:49:9-24 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:54:9-13 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (5,9) [DComment (DP (1,9),DP (1,24)) "-- * Scheduling" Nothing,DComment (DP (1,9),DP (1,24)) "-- * Scheduling" Nothing,DComment (DP (1,9),DP (1,28)) "-- $conc_scheduling" Nothing,DComment (DP (1,9),DP (1,14)) "yield" Nothing,DComment (DP (0,-5),DP (0,14)) "-- $conc_scheduling" Nothing,DComment (DP (0,-14),DP (0,-13)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:54:9-13 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:61:9-19 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (7,9) [DComment (DP (1,9),DP (1,23)) "-- ** Blocking" Nothing,DComment (DP (1,9),DP (1,23)) "-- ** Blocking" Nothing,DComment (DP (1,9),DP (1,21)) "-- $blocking" Nothing,DComment (DP (1,9),DP (1,21)) "-- $blocking" Nothing,DComment (DP (1,9),DP (1,22)) "-- ** Waiting" Nothing,DComment (DP (1,9),DP (1,20)) "threadDelay" Nothing,DComment (DP (0,-11),DP (0,2)) "-- ** Waiting" Nothing,DComment (DP (0,-2),DP (0,-1)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:61:9-19 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-11),DP (0,3)) "threadWaitRead" Nothing),DP (0,-11)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:62:9-22 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,2),DP (0,3)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:62:9-22 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-14),DP (0,1)) "threadWaitWrite" Nothing),DP (0,-14)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:63:9-23 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,0),DP (0,1)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:63:9-23 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-15),DP (0,2)) "threadWaitReadSTM" Nothing),DP (0,-15)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:64:9-25 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:64:9-25 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-17),DP (0,1)) "threadWaitWriteSTM" Nothing),DP (0,-17)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:65:9-26 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,0),DP (0,1)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:65:9-26 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:9-38 CN "IEModuleContents" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (4,9) [DComment (DP (1,9),DP (1,40)) "-- * Communication abstractions" Nothing,DComment (DP (1,9),DP (1,40)) "-- * Communication abstractions" Nothing,DComment (DP (1,9),DP (1,15)) "module" Nothing,DComment (DP (0,1),DP (0,24)) "Control.Concurrent.MVar" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:9-38 CN "IEModuleContents" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:9-38 CN "IEModuleContents" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((AnnComment DComment (DP (0,-23),DP (0,1)) "Control.Concurrent.QSemN" Nothing),DP (0,-23)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:9-39 CN "IEModuleContents" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,0),DP (0,1)) "," Nothing] [((G AnnModule),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:76:9-31 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (4,9) [DComment (DP (1,9),DP (1,27)) "-- * Bound Threads" Nothing,DComment (DP (1,9),DP (1,25)) "-- $boundthreads" Nothing,DComment (DP (0,-16),DP (0,2)) "-- * Bound Threads" Nothing,DComment (DP (1,9),DP (1,25)) "-- $boundthreads" Nothing,DComment (DP (0,-16),DP (0,7)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:76:9-31 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-23),DP (0,-17)) "forkOS" Nothing),DP (0,-23)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:77:9-14 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:77:9-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-6),DP (0,14)) "isCurrentThreadBound" Nothing),DP (0,-6)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:78:9-28 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,13),DP (0,14)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:78:9-28 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-20),DP (0,-4)) "runInBoundThread" Nothing),DP (0,-20)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:79:9-24 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:79:9-24 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-16),DP (0,2)) "runInUnboundThread" Nothing),DP (0,-16)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:80:9-26 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (1,9) [DComment (DP (0,1),DP (0,2)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:80:9-26 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:83:9-22 CN "IEVar" NotNeeded,
  (Ann (DP (1,9)) (ColDelta 9) DP (3,9) [DComment (DP (1,9),DP (1,42)) "-- * Weak references to ThreadIds" Nothing,DComment (DP (1,9),DP (1,23)) "mkWeakThreadId" Nothing,DComment (DP (0,-14),DP (0,19)) "-- * Weak references to ThreadIds" Nothing,DComment (DP (0,-19),DP (0,-18)) "," Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:83:9-22 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:108:1-14 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,8)) "Prelude" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-42 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,23)) "Control.Exception.Base" Nothing,DComment (DP (0,1),DP (0,3)) "as" Nothing,DComment (DP (0,1),DP (0,10)) "Exception" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1)),((G AnnAs),DP (0,1)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:1-20 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,14)) "GHC.Exception" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,1)-(114,62) CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-13),DP (0,-5)) "GHC.Conc" Nothing,DComment (DP (0,1),DP (0,7)) "hiding" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,14)) "threadWaitRead" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,1),DP (0,16)) "threadWaitWrite" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,17)-(114,62) CN "(:)" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnHiding),DP (0,0)),((G AnnOpenP),DP (0,1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:25-38 CN "IEVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:25-38 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-14),DP (0,3)) "threadWaitReadSTM" Nothing),DP (0,-14)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:41-55 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:41-55 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 41) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-14),DP (0,-13)) "," Nothing),DP (0,-14)),((AnnComment DComment (DP (0,1),DP (0,19)) "threadWaitWriteSTM" Nothing),DP (0,1)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:25-41 CN "IEVar" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 25) DP (1,25) [DComment (DP (0,5),DP (0,6)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "qualified" Nothing,DComment (DP (0,1),DP (0,9)) "GHC.Conc" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:25-41 CN "Unqual" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 25) DP (1,25) [] [((G AnnVal),DP (0,-1)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:44-61 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:44-61 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 44) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1-25 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnQualified),DP (0,1)),((AnnComment DComment (DP (0,-9),DP (0,-3)) "GHC.IO" Nothing),DP (0,-9)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:1-68 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-1),DP (0,0)) "(" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,2)) ".." Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,1),DP (0,19)) "unsafeInterleaveIO" Nothing,DComment (DP (0,0),DP (0,1)) "," Nothing,DComment (DP (0,1),DP (0,13)) "unsafeUnmask" Nothing,DComment (DP (0,1),DP (0,2)) ")" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:25-68 CN "(:)" NotNeeded,
  (Ann (DP (0,8)) (ColDelta 25) DP (0,11) [DComment (DP (0,-6),DP (0,3)) "GHC.IORef" Nothing] [((G AnnOpenP),DP (0,0)),((AnnComment DComment (DP (0,-8),DP (0,-7)) ")" Nothing),DP (0,-8)),((G AnnCloseP),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-28 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-32 CN "IEThingAll" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((AnnComment DComment (DP (0,-2),DP (0,6)) "newIORef" Nothing),DP (0,-2)),((G AnnOpenP),DP (0,0)),((G AnnDotdot),DP (0,0)),((G AnnCloseP),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:35-52 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:35-52 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 35) DP (0,0) [] [((G AnnVal),DP (0,0)),((AnnComment DComment (DP (0,-18),DP (0,-17)) "," Nothing),DP (0,-18)),((AnnComment DComment (DP (0,1),DP (0,10)) "readIORef" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,11)) "writeIORef" Nothing),DP (0,1)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:55-66 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 55) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:55-66 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 55) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:1-59 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:25-59 CN "(:)" NotNeeded,
  (Ann (DP (0,9)) (ColDelta 25) DP (0,8) [DComment (DP (0,-9),DP (0,-1)) "GHC.Base" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:27-34 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:27-34 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 27) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:37-45 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:37-45 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 37) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:48-57 CN "IEVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 48) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:48-57 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 48) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:1-15 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:1-32 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,19)) "System.Posix.Types" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,1),DP (0,3)) "Fd" Nothing,DComment (DP (0,1),DP (0,2)) ")" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:27-32 CN "(:)" NotNeeded,
  (Ann (DP (0,2)) (ColDelta 27) DP (0,1) [DComment (DP (0,-18),DP (0,-1)) "Foreign.StablePtr" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:29-30 CN "IEThingAbs" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:29-30 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:1-24 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:1-22 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-17),DP (0,-2)) "Foreign.C.Types" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:1-20 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-15),DP (0,-2)) "Control.Monad" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:1-30 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (8,1) [DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "Foreign.C" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,10)) "System.IO" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,11)) "Data.Maybe" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,5)) "Maybe" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,2)) ".." Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "import" Nothing,DComment (DP (0,1),DP (0,24)) "Control.Concurrent.MVar" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:1-30 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:1-30 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:1-31 CN "ImportDecl" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,-23),DP (0,1)) "Control.Concurrent.QSemN" Nothing] [((G AnnImport),DP (0,0)),((G AnnVal),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1-11 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1-71 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (66,1) [DComment (DP (1,1),DP (21,3)) "{- $conc_intro\n\nThe concurrency extension for Haskell is described in the paper\n/Concurrent Haskell/\n<http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz>.\n\nConcurrency is \\\"lightweight\\\", which means that both thread creation\nand context switching overheads are extremely low.  Scheduling of\nHaskell threads is done internally in the Haskell runtime system, and\ndoesn't make use of any operating system-supplied thread packages.\n\nHowever, if you want to interact with a foreign library that expects your\nprogram to use the operating system-supplied thread package, you can do so\nby using 'forkOS' instead of 'forkIO'.\n\nHaskell threads can communicate via 'MVar's, a kind of synchronised\nmutable variable (see \"Control.Concurrent.MVar\").  Several common\nconcurrency abstractions can be built from 'MVar's, and these are\nprovided by the \"Control.Concurrent\" library.\nIn GHC, threads may also communicate via exceptions.\n-}" Nothing,DComment (DP (-19,1),DP (1,3)) "{- $conc_intro\n\nThe concurrency extension for Haskell is described in the paper\n/Concurrent Haskell/\n<http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz>.\n\nConcurrency is \\\"lightweight\\\", which means that both thread creation\nand context switching overheads are extremely low.  Scheduling of\nHaskell threads is done internally in the Haskell runtime system, and\ndoesn't make use of any operating system-supplied thread packages.\n\nHowever, if you want to interact with a foreign library that expects your\nprogram to use the operating system-supplied thread package, you can do so\nby using 'forkOS' instead of 'forkIO'.\n\nHaskell threads can communicate via 'MVar's, a kind of synchronised\nmutable variable (see \"Control.Concurrent.MVar\").  Several common\nconcurrency abstractions can be built from 'MVar's, and these are\nprovided by the \"Control.Concurrent\" library.\nIn GHC, threads may also communicate via exceptions.\n-}" Nothing,DComment (DP (1,1),DP (18,3)) "{- $conc_scheduling\n\n    Scheduling may be either pre-emptive or co-operative,\n    depending on the implementation of Concurrent Haskell (see below\n    for information related to specific compilers).  In a co-operative\n    system, context switches only occur when you use one of the\n    primitives defined in this module.  This means that programs such\n    as:\n\n\n>   main = forkIO (write 'a') >> write 'b'\n>     where write c = putChar c >> write c\n\n    will print either @aaaaaaaaaaaaaa...@ or @bbbbbbbbbbbb...@,\n    instead of some random interleaving of @a@s and @b@s.  In\n    practice, cooperative multitasking is sufficient for writing\n    simple graphical user interfaces.\n-}" Nothing,DComment (DP (-16,1),DP (1,3)) "{- $conc_scheduling\n\n    Scheduling may be either pre-emptive or co-operative,\n    depending on the implementation of Concurrent Haskell (see below\n    for information related to specific compilers).  In a co-operative\n    system, context switches only occur when you use one of the\n    primitives defined in this module.  This means that programs such\n    as:\n\n\n>   main = forkIO (write 'a') >> write 'b'\n>     where write c = putChar c >> write c\n\n    will print either @aaaaaaaaaaaaaa...@ or @bbbbbbbbbbbb...@,\n    instead of some random interleaving of @a@s and @b@s.  In\n    practice, cooperative multitasking is sufficient for writing\n    simple graphical user interfaces.\n-}" Nothing,DComment (DP (1,1),DP (10,3)) "{- $blocking\nDifferent Haskell implementations have different characteristics with\nregard to which operations block /all/ threads.\n\nUsing GHC without the @-threaded@ option, all foreign calls will block\nall other Haskell threads in the system, although I\\/O operations will\nnot.  With the @-threaded@ option, only foreign calls with the @unsafe@\nattribute will block all other threads.\n\n-}" Nothing,DComment (DP (-8,1),DP (1,3)) "{- $blocking\nDifferent Haskell implementations have different characteristics with\nregard to which operations block /all/ threads.\n\nUsing GHC without the @-threaded@ option, all foreign calls will block\nall other Haskell threads in the system, although I\\/O operations will\nnot.  With the @-threaded@ option, only foreign calls with the @unsafe@\nattribute will block all other threads.\n\n-}" Nothing,DComment (DP (1,1),DP (1,75)) "-- | fork a thread and call the supplied function when the thread is about" Nothing,DComment (DP (1,1),DP (1,73)) "-- to terminate, with an exception or a returned value.  The function is" Nothing,DComment (DP (0,-72),DP (0,2)) "-- | fork a thread and call the supplied function when the thread is about" Nothing,DComment (DP (1,1),DP (1,47)) "-- called with asynchronous exceptions masked." Nothing,DComment (DP (0,-46),DP (0,26)) "-- to terminate, with an exception or a returned value.  The function is" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,44)) "-- called with asynchronous exceptions masked." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,32)) "-- > forkFinally action and_then =" Nothing,DComment (DP (1,1),DP (1,26)) "-- >   mask $ \\restore ->" Nothing,DComment (DP (0,-25),DP (0,9)) "-- > forkFinally action and_then =" Nothing,DComment (DP (1,1),DP (1,26)) "-- >   mask $ \\restore ->" Nothing,DComment (DP (0,-25),DP (0,26)) "-- >     forkIO $ try (restore action) >>= and_then" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,49)) "-- >     forkIO $ try (restore action) >>= and_then" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,62)) "-- This function is useful for informing the parent when a child" Nothing,DComment (DP (1,1),DP (1,28)) "-- terminates, for example." Nothing,DComment (DP (0,-27),DP (0,37)) "-- This function is useful for informing the parent when a child" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,25)) "-- terminates, for example." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,17)) "-- /Since: 4.6.0.0/" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,11)) "forkFinally" Nothing,DComment (DP (0,-11),DP (0,8)) "-- /Since: 4.6.0.0/" Nothing,DComment (DP (0,-7),DP (0,-5)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,6)) "Either" Nothing,DComment (DP (0,1),DP (0,14)) "SomeException" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,9)) "ThreadId" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-17 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-19 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-71 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "action" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-71 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,8)) "and_then" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:19 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-56 CN "HsParTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-71 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-44 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-46 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-55 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:32-44 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,2)) (ColDelta 32) DP (0,1) [DComment (DP (0,-2),DP (0,-1)) "=" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:46 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 46) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:51-52 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 51) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:51-55 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 51) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:54-55 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 54) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:61-62 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 61) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:61-71 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 61) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:64-71 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 64) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:1-11 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:13-18 CN "VarPat" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 13) DP (0,1) [DComment (DP (0,-9),DP (0,-5)) "mask" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,2)) "\\" Nothing,DComment (DP (0,0),DP (0,7)) "restore" Nothing] [((G AnnVal),DP (0,-5))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:20-27 CN "VarPat" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 20) DP (0,1) [DComment (DP (0,0),DP (0,2)) "->" Nothing] [((G AnnVal),DP (0,-1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,29)-(203,46) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 29) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:3-6 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 3) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,3)-(203,46) CN "OpApp" NotNeeded,
  (Ann (DP (1,3)) (ColDelta 3) DP (1,3) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:8 CN "HsVar" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 8) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "forkIO" Nothing] [((G AnnVal),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46) CN "(:)" Ref "delta-1",
  (Ann (DP (0,-1)) (ColDelta 10) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46) CN "HsLam" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46) Ref "delta-1"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46) CN "Match" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((AnnComment DComment (DP (0,-6),DP (0,-5)) "$" Nothing),DP (0,-6)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:11-17 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-33 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -5) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-46 CN "GRHS" NotNeeded,
  (Ann (DP (1,-5)) (ColDelta -5) DP (1,-5) [DComment (DP (0,-2),DP (0,5)) "restore" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (0,1),DP (0,9)) "and_then" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-46 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -5) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:12 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 2) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:14-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 4) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:14-33 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 4) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:18-33 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:19-25 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:19-32 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:27-32 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:35-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:39-46 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-52 CN "ForD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (57,1) [DComment (DP (1,1),DP (1,79)) "-- ---------------------------------------------------------------------------" Nothing,DComment (DP (1,1),DP (1,17)) "-- Bound Threads" Nothing,DComment (DP (0,-16),DP (0,62)) "-- ---------------------------------------------------------------------------" Nothing,DComment (DP (1,1),DP (1,17)) "-- Bound Threads" Nothing,DComment (DP (1,1),DP (46,3)) "{- $boundthreads\n   #boundthreads#\n\nSupport for multiple operating system threads and bound threads as described\nbelow is currently only available in the GHC runtime system if you use the\n/-threaded/ option when linking.\n\nOther Haskell systems do not currently support multiple operating system threads.\n\nA bound thread is a haskell thread that is /bound/ to an operating system\nthread. While the bound thread is still scheduled by the Haskell run-time\nsystem, the operating system thread takes care of all the foreign calls made\nby the bound thread.\n\nTo a foreign library, the bound thread will look exactly like an ordinary\noperating system thread created using OS functions like @pthread_create@\nor @CreateThread@.\n\nBound threads can be created using the 'forkOS' function below. All foreign\nexported functions are run in a bound thread (bound to the OS thread that\ncalled the function). Also, the @main@ action of every Haskell program is\nrun in a bound thread.\n\nWhy do we need this? Because if a foreign library is called from a thread\ncreated using 'forkIO', it won't have access to any /thread-local state/ -\nstate variables that have specific values for each OS thread\n(see POSIX's @pthread_key_create@ or Win32's @TlsAlloc@). Therefore, some\nlibraries (OpenGL, for example) will not work from a thread created using\n'forkIO'. They work fine in threads created using 'forkOS' or when called\nfrom @main@ or from a @foreign export@.\n\nIn terms of performance, 'forkOS' (aka bound) threads are much more\nexpensive than 'forkIO' (aka unbound) threads, because a 'forkOS'\nthread is tied to a particular OS thread, whereas a 'forkIO' thread\ncan be run by any OS thread.  Context-switching between a 'forkOS'\nthread and a 'forkIO' thread is many times more expensive than between\ntwo 'forkIO' threads.\n\nNote in particular that the main program thread (the thread running\n@Main.main@) is always a bound thread, so for good concurrency\nperformance you should ensure that the main thread is not doing\nrepeated communication with other threads in the system.  Typically\nthis means forking subthreads to do the work using 'forkIO', and\nwaiting for the results in the main thread.\n\n-}" Nothing,DComment (DP (-44,1),DP (2,3)) "{- $boundthreads\n   #boundthreads#\n\n\nSupport for multiple operating system threads and bound threads as described\nbelow is currently only available in the GHC runtime system if you use the\n/-threaded/ option when linking.\n\nOther Haskell systems do not currently support multiple operating system threads.\n\nA bound thread is a haskell thread that is /bound/ to an operating system\nthread. While the bound thread is still scheduled by the Haskell run-time\nsystem, the operating system thread takes care of all the foreign calls made\nby the bound thread.\n\nTo a foreign library, the bound thread will look exactly like an ordinary\noperating system thread created using OS functions like @pthread_create@\nor @CreateThread@.\n\nBound threads can be created using the 'forkOS' function below. All foreign\nexported functions are run in a bound thread (bound to the OS thread that\ncalled the function). Also, the @main@ action of every Haskell program is\nrun in a bound thread.\n\nWhy do we need this? Because if a foreign library is called from a thread\ncreated using 'forkIO', it won't have access to any /thread-local state/ -\nstate variables that have specific values for each OS thread\n(see POSIX's @pthread_key_create@ or Win32's @TlsAlloc@). Therefore, some\nlibraries (OpenGL, for example) will not work from a thread created using\n'forkIO'. They work fine in threads created using 'forkOS' or when called\nfrom @main@ or from a @foreign export@.\n\nIn terms of performance, 'forkOS' (aka bound) threads are much more\nexpensive than 'forkIO' (aka unbound) threads, because a 'forkOS'\nthread is tied to a particular OS thread, whereas a 'forkIO' thread\ncan be run by any OS thread.  Context-switching between a 'forkOS'\nthread and a 'forkIO' thread is many times more expensive than between\ntwo 'forkIO' threads.\n\nNote in particular that the main program thread (the thread running\n@Main.main@) is always a bound thread, so for good concurrency\nperformance you should ensure that the main thread is not doing\nrepeated communication with other threads in the system.  Typically\nthis means forking subthreads to do the work using 'forkIO', and\nwaiting for the results in the main thread.\n\n-}" Nothing,DComment (DP (0,-2),DP (0,41)) "-- | 'True' if bound threads are supported." Nothing,DComment (DP (1,1),DP (1,67)) "-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'" Nothing,DComment (DP (1,1),DP (1,44)) "-- | 'True' if bound threads are supported." Nothing,DComment (DP (0,-43),DP (0,32)) "-- will always return 'False' and both 'forkOS' and 'runInBoundThread' will" Nothing,DComment (DP (1,1),DP (1,9)) "-- fail." Nothing,DComment (DP (0,-8),DP (0,58)) "-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,7)) "foreign" Nothing,DComment (DP (0,-7),DP (0,68)) "-- will always return 'False' and both 'forkOS' and 'runInBoundThread' will" Nothing,DComment (DP (0,-67),DP (0,-61)) "import" Nothing,DComment (DP (0,1),DP (0,6)) "ccall" Nothing,DComment (DP (0,1),DP (0,24)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,5)) "Bool" Nothing,DComment (DP (1,1),DP (1,9)) "-- fail." Nothing] [((G AnnForeign),DP (0,0)),((G AnnImport),DP (0,1)),((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:16-20 CN "CCallConv" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:22-44 CN "Unqual" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:49-52 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 49) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:49-52 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 49) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1-6 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1-30 CN "SigD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (22,1) [DComment (DP (1,1),DP (18,3)) "{- |\nLike 'forkIO', this sparks off a new thread to run the 'IO'\ncomputation passed as the first argument, and returns the 'ThreadId'\nof the newly created thread.\n\nHowever, 'forkOS' creates a /bound/ thread, which is necessary if you\nneed to call foreign (non-Haskell) libraries that make use of\nthread-local state, such as OpenGL (see \"Control.Concurrent#boundthreads\").\n\nUsing 'forkOS' instead of 'forkIO' makes no difference at all to the\nscheduling behaviour of the Haskell runtime system.  It is a common\nmisconception that you need to use 'forkOS' instead of 'forkIO' to\navoid blocking all the Haskell threads when making a foreign call;\nthis isn't the case.  To allow foreign calls to be made without\nblocking all the Haskell threads (with GHC), it is only necessary to\nuse the @-threaded@ option when linking your program, and to make sure\nthe foreign import is not marked @unsafe@.\n-}" Nothing,DComment (DP (-15,1),DP (2,3)) "{- |\nLike 'forkIO', this sparks off a new thread to run the 'IO'\ncomputation passed as the first argument, and returns the 'ThreadId'\nof the newly created thread.\n\nHowever, 'forkOS' creates a /bound/ thread, which is necessary if you\nneed to call foreign (non-Haskell) libraries that make use of\nthread-local state, such as OpenGL (see \"Control.Concurrent#boundthreads\").\n\nUsing 'forkOS' instead of 'forkIO' makes no difference at all to the\nscheduling behaviour of the Haskell runtime system.  It is a common\nmisconception that you need to use 'forkOS' instead of 'forkIO' to\navoid blocking all the Haskell threads when making a foreign call;\nthis isn't the case.  To allow foreign calls to be made without\nblocking all the Haskell threads (with GHC), it is only necessary to\nuse the @-threaded@ option when linking your program, and to make sure\nthe foreign import is not marked @unsafe@.\n-}" Nothing,DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,6)) "forkOS" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,9)) "ThreadId" Nothing] [((AnnComment DComment (DP (0,-6),DP (0,1)) "foreign" Nothing),DP (0,-6)),((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-12 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [] [((G AnnVal),DP (0,-4))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-15 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-30 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [DComment (DP (0,-1),DP (0,5)) "export" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-30 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,-4)) (ColDelta 11) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,5)) "ccall" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:14-15 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:20-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:20-30 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:23-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-11)) (ColDelta 23) DP (0,1) [DComment (DP (0,0),DP (0,12)) "forkOS_entry" Nothing] [((G AnnVal),DP (0,-11))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(284,1)-(285,33) CN "ForD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,5),DP (1,7)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing] [((G AnnForeign),DP (0,0)),((G AnnExport),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,7)) "foreign" Nothing),DP (0,0)),((G AnnDcolon),DP (1,5))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:16-20 CN "CExportStatic" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:22-33 CN "Unqual" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-16 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-24 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-33 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-33 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:18-24 CN "HsParTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 18) DP (0,1) [DComment (DP (0,-8),DP (0,-2)) "import" Nothing,DComment (DP (0,1),DP (0,6)) "ccall" Nothing] [((G AnnOpenP),DP (0,-3)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:19-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:19-23 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:22-23 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((AnnComment DComment (DP (0,-1),DP (0,13)) "\"forkOS_entry\"" Nothing),DP (0,-1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:29-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:29-33 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:32-33 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(287,1)-(288,33) CN "ForD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,3),DP (0,26)) "forkOS_entry_reimported" Nothing,DComment (DP (1,5),DP (1,7)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing] [((G AnnForeign),DP (0,0)),((G AnnImport),DP (0,1)),((G AnnVal),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,12)) "forkOS_entry" Nothing),DP (0,0)),((G AnnDcolon),DP (1,5))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:16-20 CN "CCallConv" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:37-59 CN "Unqual" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-16 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-24 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-33 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-33 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:18-24 CN "HsParTy" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 18) DP (0,1) [DComment (DP (0,-3),DP (0,-1)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing] [((G AnnOpenP),DP (0,-8)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:19-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:19-23 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:22-23 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:29-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,-1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:29-33 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 29) DP (0,1) [DComment (DP (0,-1),DP (0,0)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:32-33 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 32) DP (0,1) [DComment (DP (0,0),DP (0,1)) "(" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1-42 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,12)) "forkOS_entry" Nothing,DComment (DP (0,1),DP (0,13)) "stableAction" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [((AnnComment DComment (DP (0,-4),DP (0,-4)) "" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,0),DP (0,6)) "action" Nothing),DP (0,0)),((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-25 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,-1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-33 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-42 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [DComment (DP (0,0),DP (0,2)) "<-" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-42 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 17) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,12)) "stableAction" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:27-33 CN "HsParTy" NotNeeded,
  (Ann (DP (0,-6)) (ColDelta 27) DP (0,1) [DComment (DP (0,-7),DP (0,7)) "deRefStablePtr" Nothing] [((G AnnOpenP),DP (0,-6)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:28-29 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:28-32 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:31-32 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:38-39 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 38) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:38-42 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:41-42 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:1-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:14-25 CN "VarPat" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 14) DP (0,1) [DComment (DP (0,-4),DP (0,-4)) "" Nothing,DComment (DP (0,0),DP (0,6)) "action" Nothing] [((G AnnVal),DP (0,-1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,27)-(293,14) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 27) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,29)-(293,14) CN "HsDo" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(292,9)-(293,14) Ref "delta-2"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:9-14 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:9-45 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(292,9)-(293,14) CN "(:)" Ref "delta-2",
  (Ann (DP (1,0)) (ColDelta 9) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:19-32 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 10) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:19-45 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:34-45 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:293:9-14 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 0) DP (1,0) [DComment (DP (1,-8),DP (1,-8)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,7)) "foreign" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:293:9-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(295,1)-(296,35) CN "ForD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,1),DP (0,6)) "ccall" Nothing,DComment (DP (0,1),DP (0,20)) "forkOS_createThread" Nothing,DComment (DP (1,5),DP (1,7)) "::" Nothing,DComment (DP (0,1),DP (0,10)) "StablePtr" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,2)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,5)) "CInt" Nothing] [((G AnnForeign),DP (0,0)),((G AnnImport),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,1)) "" Nothing),DP (1,1)),((AnnComment DComment (DP (0,0),DP (0,15)) "failNonThreaded" Nothing),DP (0,0)),((G AnnDcolon),DP (1,5))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:16-20 CN "CCallConv" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:22-40 CN "Unqual" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-16 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-24 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-35 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-35 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 8) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:18-24 CN "HsParTy" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 18) DP (0,1) [DComment (DP (0,0),DP (0,2)) "::" Nothing] [((G AnnOpenP),DP (0,-1)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:19-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:19-23 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:22-23 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 22) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "IO" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:29-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:29-35 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:32-35 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1-23 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,15)) "failNonThreaded" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,5)) "fail" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,43)) "\"RTS doesn't support multiple OS threads \"" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:20-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:20-23 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:20-23 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:23 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,0),DP (0,2)) "++" Nothing,DComment (DP (0,0),DP (0,34)) "\"(use ghc -threaded when linking)\"" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,17)-(300,59) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 17) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:19-22 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:19-67 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,19)-(300,59) CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:26-67 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:300:24-25 CN "HsVar" NotNeeded,
  (Ann (DP (0,9)) (ColDelta 24) DP (1,24) [DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,6)) "forkOS" Nothing,DComment (DP (0,1),DP (0,8)) "action0" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:300:26-59 CN "HsLit" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:1-6 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(302,1)-(323,33) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(302,1)-(323,33) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,5),DP (1,6)) "|" Nothing,DComment (DP (0,1),DP (0,24)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:8-14 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,5)-(322,18) CN "GRHS" NotNeeded,
  (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [DComment (DP (0,-6),DP (0,-6)) "" Nothing,DComment (DP (0,0),DP (0,2)) "mv" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing,DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing] [((G AnnVbar),DP (0,0)),((AnnComment DComment (DP (0,-21),DP (0,-21)) "" Nothing),DP (0,-21)),((AnnComment DComment (DP (0,0),DP (0,1)) "b" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,26)) "Exception.getMaskingState" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:7-29 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:7-29 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,33)-(322,18) CN "HsDo" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(304,9)-(322,18) Ref "delta-3"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:9-10 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:9-26 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-2),DP (0,1)) "let" Nothing),DP (0,-2)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(304,9)-(322,18) CN "(:)" Ref "delta-3",
  (Ann (DP (1,0)) (ColDelta 9) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:15-26 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9-38 CN "BindStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:14-38 CN "HsVar" NotNeeded,
  (Ann (DP (0,-61)) (ColDelta 5) DP (0,1) [DComment (DP (0,0),DP (0,62)) "-- async exceptions are masked in the child if they are masked" Nothing] [((G AnnVal),DP (0,-61))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(306,9)-(315,62) CN "LetStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLet),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:13-19 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77) CN "FunBind" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(315,62) CN "HsValBinds" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 4) DP (4,0) [DComment (DP (0,1),DP (0,65)) "-- in the parent, as for forkIO (see #1048). forkOS_createThread" Nothing,DComment (DP (1,0),DP (1,54)) "-- creates a thread with exceptions masked by default." Nothing,DComment (DP (0,-54),DP (0,8)) "-- async exceptions are masked in the child if they are masked" Nothing,DComment (DP (1,0),DP (1,0)) "" Nothing,DComment (DP (0,0),DP (0,7)) "action1" Nothing,DComment (DP (0,-7),DP (0,57)) "-- in the parent, as for forkIO (see #1048). forkOS_createThread" Nothing,DComment (DP (0,-56),DP (0,-55)) "=" Nothing,DComment (DP (0,1),DP (0,5)) "case" Nothing,DComment (DP (0,1),DP (0,2)) "b" Nothing,DComment (DP (0,1),DP (0,3)) "of" Nothing,DComment (DP (1,0),DP (1,54)) "-- creates a thread with exceptions masked by default." Nothing,DComment (DP (0,-42),DP (0,-42)) "" Nothing,DComment (DP (0,0),DP (0,8)) "Unmasked" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,13)) "unsafeUnmask" Nothing,DComment (DP (0,1),DP (0,8)) "action0" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,21)-(313,77) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 8) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,23)-(313,77) CN "HsCase" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnCase),DP (0,0)),((G AnnOf),DP (0,1)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(311,25)-(313,77) Ref "delta-4"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:28 CN "HsVar" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 15) DP (0,1) [DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,19)) "MaskedInterruptible" Nothing] [((G AnnVal),DP (0,-16))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-32 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-32 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-56 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(311,25)-(313,77) CN "(:)" Ref "delta-4",
  (Ann (DP (1,0)) (ColDelta 12) DP (1,0) [DComment (DP (0,13),DP (0,15)) "->" Nothing,DComment (DP (0,1),DP (0,8)) "action0" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:34-56 CN "GRHS" NotNeeded,
  (Ann (DP (0,-12)) (ColDelta 9) DP (0,1) [DComment (DP (0,-8),DP (0,13)) "MaskedUninterruptible" Nothing] [((G AnnRarrow),DP (0,-12))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:37-48 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 12) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:37-56 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:50-56 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [DComment (DP (0,-2),DP (0,0)) "->" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-43 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-43 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-54 CN "Match" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-7),DP (0,13)) "uninterruptibleMask_" Nothing,DComment (DP (0,1),DP (0,8)) "action0" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:45-54 CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnRarrow),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:48-54 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25-45 CN "ConPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25-45 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25-77 CN "Match" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 0) DP (1,0) [DComment (DP (1,-12),DP (1,-12)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,11)) "action_plus" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:47-77 CN "GRHS" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 22) DP (0,1) [DComment (DP (0,-21),DP (0,-20)) "=" Nothing,DComment (DP (0,1),DP (0,16)) "Exception.catch" Nothing,DComment (DP (0,1),DP (0,8)) "action1" Nothing] [((G AnnRarrow),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:50-69 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:50-77 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:71-77 CN "HsVar" NotNeeded,
  (Ann (DP (0,8)) (ColDelta 46) DP (0,1) [DComment (DP (0,-19),DP (0,-7)) "childHandler" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-23 CN "Unqual" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [] [((G AnnVal),DP (0,-1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-62 CN "FunBind" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [DComment (DP (2,-4),DP (2,-4)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,5)) "entry" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-62 CN "Match" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (2,0) [] [((AnnComment DComment (DP (0,-9),DP (0,-7)) "<-" Nothing),DP (0,-9)),((AnnComment DComment (DP (0,1),DP (0,13)) "newStablePtr" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:25-62 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 12) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:27-41 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:27-49 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:27-62 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:43-49 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [DComment (DP (0,-11),DP (0,-10)) "(" Nothing,DComment (DP (0,0),DP (0,10)) "myThreadId" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:51-62 CN "HsVar" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 38) DP (0,1) [DComment (DP (0,-7),DP (0,-4)) ">>=" Nothing,DComment (DP (0,1),DP (0,8)) "putMVar" Nothing] [((G AnnVal),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9-13 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9-72 CN "BindStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (2,0) [DComment (DP (0,-8),DP (0,-6)) "mv" Nothing,DComment (DP (0,1),DP (0,3)) ">>" Nothing,DComment (DP (0,1),DP (0,12)) "action_plus" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,0),DP (1,0)) "" Nothing,DComment (DP (0,0),DP (0,3)) "err" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing,DComment (DP (0,1),DP (0,20)) "forkOS_createThread" Nothing,DComment (DP (0,1),DP (0,6)) "entry" Nothing] [((AnnComment DComment (DP (0,-5),DP (0,-1)) "when" Nothing),DP (0,-5)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:18-29 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:18-72 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,1) [DComment (DP (0,-2),DP (0,1)) "err" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:31-72 CN "HsPar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 22) DP (0,1) [DComment (DP (0,-11),DP (0,-9)) "/=" Nothing,DComment (DP (0,1),DP (0,2)) "0" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,5)) "fail" Nothing] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-41 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-56 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-71 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:43-45 CN "HsVar" NotNeeded,
  (Ann (DP (0,-15)) (ColDelta 34) DP (0,1) [DComment (DP (0,-10),DP (0,16)) "\"Cannot create OS thread.\"" Nothing] [((G AnnVal),DP (0,-15))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:47-53 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 38) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:47-56 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:55-56 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 46) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:58-59 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 49) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:61-71 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 52) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9-11 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9-40 CN "BindStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:16-34 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:16-40 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:36-40 CN "HsVar" NotNeeded,
  (Ann (DP (0,9)) (ColDelta 27) DP (0,1) [DComment (DP (0,-19),DP (0,-11)) "takeMVar" Nothing,DComment (DP (0,1),DP (0,3)) "mv" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-12 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-23 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-57 CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-57 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:14-23 CN "HsPar" NotNeeded,
  (Ann (DP (0,-8)) (ColDelta 5) DP (0,1) [DComment (DP (0,-4),DP (0,9)) "freeStablePtr" Nothing] [((G AnnOpenP),DP (0,-8)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:15-17 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:15-22 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 6) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:19-20 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 10) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:22 CN "HsOverLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 13) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:25 CN "HsVar" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 16) DP (0,1) [DComment (DP (0,-1),DP (0,4)) "entry" Nothing] [((G AnnVal),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:27-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 18) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:27-57 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:32-57 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9-11 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9-26 CN "BindStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((AnnComment DComment (DP (0,-3),DP (0,3)) "return" Nothing),DP (0,-3)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:16-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:16-26 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:25-26 CN "HsVar" NotNeeded,
  (Ann (DP (0,6)) (ColDelta 16) DP (0,1) [DComment (DP (0,-8),DP (0,-5)) "tid" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-21 CN "HsVar" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 0) DP (1,0) [] [((G AnnVal),DP (0,-7))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-27 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 0) DP (1,0) [DComment (DP (1,-4),DP (1,-4)) "" Nothing,DComment (DP (0,0),DP (0,1)) "|" Nothing,DComment (DP (0,1),DP (0,10)) "otherwise" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-27 CN "HsApp" NotNeeded,
  (Ann (DP (0,-7)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:23-27 CN "HsVar" NotNeeded,
  (Ann (DP (0,-11)) (ColDelta 14) DP (0,1) [DComment (DP (0,-5),DP (0,-4)) "=" Nothing,DComment (DP (0,1),DP (0,16)) "failNonThreaded" Nothing] [((G AnnVal),DP (0,-11))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9-14 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9-18 CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9-18 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:16-18 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:5-33 CN "GRHS" NotNeeded,
  (Ann (DP (0,-67)) (ColDelta 5) DP (1,5) [DComment (DP (1,1),DP (1,72)) "-- | Returns 'True' if the calling thread is /bound/, that is, if it is" Nothing] [((G AnnVbar),DP (0,-67)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:7-15 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:7-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:19-33 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1-20 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1-31 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (5,1) [DComment (DP (1,1),DP (1,74)) "-- safe to use foreign libraries that rely on thread-local state from the" Nothing,DComment (DP (1,1),DP (1,19)) "-- calling thread." Nothing,DComment (DP (0,-18),DP (0,53)) "-- | Returns 'True' if the calling thread is /bound/, that is, if it is" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,20)) "isCurrentThreadBound" Nothing,DComment (DP (0,-20),DP (0,53)) "-- safe to use foreign libraries that rely on thread-local state from the" Nothing,DComment (DP (0,-52),DP (0,-50)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,5)) "Bool" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,18)) "-- calling thread." Nothing,DComment (DP (0,-18),DP (0,2)) "isCurrentThreadBound" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,2)) "\\" Nothing,DComment (DP (0,1),DP (0,3)) "s#" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing] [((AnnComment DComment (DP (0,-16),DP (0,-12)) "case" Nothing),DP (0,-16)),((AnnComment DComment (DP (0,1),DP (0,22)) "isCurrentThreadBound#" Nothing),DP (0,1)),((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:25-26 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:25-31 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:25-31 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:28-31 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:1-20 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,-12),DP (0,-12)) "" Nothing),DP (0,-12)),((AnnComment DComment (DP (0,0),DP (0,2)) "(#" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,4)) "s2#" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,4)) "flg" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "#)" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [DComment (DP (0,0),DP (0,2)) "s#" Nothing,DComment (DP (0,1),DP (0,3)) "of" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,22)-(331,57) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 22) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:24-25 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 24) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,24)-(331,57) CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:27 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 27) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57) CN "(:)" Ref "delta-5",
  (Ann (DP (0,-1)) (ColDelta 29) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57) CN "HsLam" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "(#" Nothing] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57) Ref "delta-5"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57) CN "Match" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:31-32 CN "VarPat" NotNeeded,
  (Ann (DP (0,-2)) (ColDelta 2) DP (0,1) [DComment (DP (0,0),DP (0,3)) "s2#" Nothing] [((G AnnVal),DP (0,-2))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(330,5)-(331,57) CN "GRHS" NotNeeded,
  (Ann (DP (1,-24)) (ColDelta -24) DP (1,-24) [DComment (DP (0,-1),DP (0,6)) "isTrue#" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,3)) "flg" Nothing,DComment (DP (0,1),DP (0,4)) "/=#" Nothing,DComment (DP (0,1),DP (0,3)) "0#" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "#)" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(330,5)-(331,57) CN "HsCase" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -24) DP (0,0) [] [((G AnnCase),DP (0,0)),((G AnnOf),DP (0,1)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-57 Ref "delta-6"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:10-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:10-33 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -19) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:32-33 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-22 CN "TuplePat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnOpen),DP (0,0)),((G AnnClose),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-57 CN "(:)" Ref "delta-6",
  (Ann (DP (1,0)) (ColDelta -20) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-57 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:12-14 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:17-19 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:24-57 CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 15) DP (0,1) [] [((G AnnRarrow),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:27-57 CN "ExplicitTuple" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [] [((G AnnOpen),DP (0,0)),((G AnnClose),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:30-32 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 21) DP (0,0) [] [((G AnnVal),DP (0,0)),((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:30-32 CN "Present" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 21) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:35-41 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:35-54 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:35-54 CN "Present" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:43-54 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:44-46 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 35) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:44-53 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 35) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:48-50 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:52-53 CN "HsLit" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1-32 CN "SigD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (12,1) [DComment (DP (1,1),DP (9,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis not /bound/, a bound thread is created temporarily. @runInBoundThread@\ndoesn't finish until the 'IO' computation finishes.\n\nYou can wrap a series of foreign function calls that rely on thread-local state\nwith @runInBoundThread@ so that you can use them without knowing whether the\ncurrent thread is /bound/.\n-}" Nothing,DComment (DP (-6,1),DP (2,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis not /bound/, a bound thread is created temporarily. @runInBoundThread@\ndoesn't finish until the 'IO' computation finishes.\n\nYou can wrap a series of foreign function calls that rely on thread-local state\nwith @runInBoundThread@ so that you can use them without knowing whether the\ncurrent thread is /bound/.\n-}" Nothing,DComment (DP (-1,1),DP (-1,1)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,16)) "runInBoundThread" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-22 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [] [((G AnnVal),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-24 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-32 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "action" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-32 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 21) DP (0,1) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:29-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:29-32 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:32 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:1-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(345,1)-(357,33) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(345,1)-(357,33) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,5),DP (1,6)) "|" Nothing,DComment (DP (0,1),DP (0,24)) "rtsSupportsBoundThreads" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:18-23 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 18) DP (0,1) [DComment (DP (0,-8),DP (0,-8)) "" Nothing,DComment (DP (0,0),DP (0,5)) "bound" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,5)-(356,30) CN "GRHS" NotNeeded,
  (Ann (DP (1,5)) (ColDelta 5) DP (1,5) [DComment (DP (0,-6),DP (0,14)) "isCurrentThreadBound" Nothing] [((G AnnVbar),DP (0,0)),((AnnComment DComment (DP (0,-21),DP (0,-21)) "" Nothing),DP (0,-21)),((AnnComment DComment (DP (0,0),DP (0,2)) "if" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,6)) "bound" Nothing),DP (0,1)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:7-29 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:7-29 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,33)-(356,30) CN "HsDo" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(347,9)-(356,30) Ref "delta-7"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:9-13 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:9-37 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-1),DP (0,3)) "then" Nothing),DP (0,-1)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(347,9)-(356,30) CN "(:)" Ref "delta-7",
  (Ann (DP (1,0)) (ColDelta 9) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:18-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30) CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-20),DP (0,-14)) "action" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30) CN "HsIf" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnIf),DP (0,0)),((AnnComment DComment (DP (0,-4),DP (0,0)) "else" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((G AnnThen),DP (1,4)),((AnnComment DComment (DP (0,-3),DP (0,-1)) "<-" Nothing),DP (0,-3)),((AnnComment DComment (DP (0,1),DP (0,9)) "newIORef" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "undefined" Nothing),DP (0,1)),((G AnnElse),DP (1,4))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:348:12-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:349:18-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,-2)) (ColDelta 9) DP (0,1) [DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,3)) "ref" Nothing] [((G AnnVal),DP (0,-2))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(350,18)-(356,30) CN "HsDo" NotNeeded,
  (Ann (DP (0,-2)) (ColDelta 9) DP (0,1) [DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,3)) "let" Nothing] [((G AnnDo),DP (0,-2)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(351,17)-(356,30) Ref "delta-8"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:17-19 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:17-41 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-3),DP (0,4)) "bracket" Nothing),DP (0,-3)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(351,17)-(356,30) CN "(:)" Ref "delta-8",
  (Ann (DP (1,0)) (ColDelta 8) DP (1,0) [DComment (DP (0,1),DP (0,1)) "" Nothing,DComment (DP (0,0),DP (0,11)) "action_plus" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,14)) "Exception.try" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (0,1),DP (0,11)) "writeIORef" Nothing,DComment (DP (0,1),DP (0,4)) "ref" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:24-31 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:24-41 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:33-41 CN "HsVar" NotNeeded,
  (Ann (DP (0,-5)) (ColDelta 16) DP (0,1) [DComment (DP (0,-7),DP (0,-6)) "(" Nothing,DComment (DP (0,0),DP (0,12)) "newStablePtr" Nothing] [((G AnnVal),DP (0,-5))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:17-73 CN "LetStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-3),DP (0,8)) "action_plus" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing] [((G AnnLet),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-31 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73 CN "FunBind" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73 CN "HsValBinds" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 4) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-7),DP (0,6)) "freeStablePtr" Nothing),DP (0,-7)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:33-73 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 12) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-47 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-54 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 14) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-73 CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 14) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:49-54 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:56-58 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:60-69 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 39) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:60-73 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 39) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:71-73 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 50) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:17-23 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:17-50 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(354,37) CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(355,84) CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(356,30) CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(356,30) CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:25-50 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 8) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:26-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:26-49 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:39-49 CN "HsVar" NotNeeded,
  (Ann (DP (0,-21)) (ColDelta 22) DP (0,1) [DComment (DP (0,-12),DP (0,-11)) "\\" Nothing,DComment (DP (0,0),DP (0,6)) "cEntry" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,24)) "forkOS_entry_reimported" Nothing] [((G AnnVal),DP (0,-21))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:354:25-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,-6)) (ColDelta 8) DP (1,8) [DComment (DP (0,10),DP (0,16)) "cEntry" Nothing,DComment (DP (0,1),DP (0,3)) ">>" Nothing,DComment (DP (0,1),DP (0,10)) "readIORef" Nothing,DComment (DP (0,1),DP (0,4)) "ref" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (1,2),DP (1,14)) "unsafeResult" Nothing] [((G AnnVal),DP (0,-6))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:25-84 CN "HsPar" NotNeeded,
  (Ann (DP (0,-9)) (ColDelta 8) DP (1,8) [DComment (DP (1,-12),DP (1,-12)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,1)) "|" Nothing,DComment (DP (0,1),DP (0,10)) "otherwise" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,16)) "failNonThreaded" Nothing] [((G AnnOpenP),DP (0,-9)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83 CN "(:)" Ref "delta-9",
  (Ann (DP (0,-1)) (ColDelta 9) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83 CN "HsLam" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,0) [] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83 Ref "delta-9"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83 CN "Match" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:27-32 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-59 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-66 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-83 CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 11) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-83 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 11) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:61-66 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 35) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:68-69 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 42) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:71-79 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 45) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:71-83 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 45) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:81-83 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 55) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:86-88 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 69) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:356:19-30 CN "HsVar" NotNeeded,
  (Ann (DP (1,2)) (ColDelta 2) DP (1,2) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:5-33 CN "GRHS" NotNeeded,
  (Ann (DP (-14,5)) (ColDelta 5) DP (1,5) [DComment (DP (1,1),DP (15,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis /bound/, an unbound thread is created temporarily using 'forkIO'.\n@runInBoundThread@ doesn't finish until the 'IO' computation finishes.\n\nUse this function /only/ in the rare case that you have actually observed a\nperformance loss due to the use of bound threads. A program that\ndoesn't need it's main thread to be bound and makes /heavy/ use of concurrency\n(e.g. a web server), might want to wrap it's @main@ action in\n@runInUnboundThread@.\n\nNote that exceptions which are thrown to the current thread are thrown in turn\nto the thread that is executing the given computation. This ensures there's\nalways a way of killing the forked thread.\n-}" Nothing] [((G AnnVbar),DP (-14,5)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:7-15 CN "BodyStmt" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:7-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:19-33 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1-34 CN "SigD" NotNeeded,
  (Ann (DP (2,1)) (ColDelta 1) DP (17,1) [DComment (DP (2,1),DP (16,3)) "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis /bound/, an unbound thread is created temporarily using 'forkIO'.\n@runInBoundThread@ doesn't finish until the 'IO' computation finishes.\n\nUse this function /only/ in the rare case that you have actually observed a\nperformance loss due to the use of bound threads. A program that\ndoesn't need it's main thread to be bound and makes /heavy/ use of concurrency\n(e.g. a web server), might want to wrap it's @main@ action in\n@runInUnboundThread@.\n\nNote that exceptions which are thrown to the current thread are thrown in turn\nto the thread that is executing the given computation. This ensures there's\nalways a way of killing the forked thread.\n-}" Nothing,DComment (DP (-1,1),DP (-1,1)) "" Nothing,DComment (DP (0,0),DP (0,18)) "runInUnboundThread" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,-3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-26 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-34 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [DComment (DP (0,-2),DP (0,4)) "action" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-34 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 23) DP (0,1) [] [((AnnComment DComment (DP (0,0),DP (0,1)) "=" Nothing),DP (0,0)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:26 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:31-32 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 31) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:31-34 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 31) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "do" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:34 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 34) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:1-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (1,3),DP (1,3)) "" Nothing,DComment (DP (0,0),DP (0,5)) "bound" Nothing,DComment (DP (0,1),DP (0,3)) "<-" Nothing,DComment (DP (0,1),DP (0,21)) "isCurrentThreadBound" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:20-25 CN "VarPat" NotNeeded,
  (Ann (DP (0,9)) (ColDelta 20) DP (0,1) [DComment (DP (0,-16),DP (0,-16)) "" Nothing,DComment (DP (0,0),DP (0,2)) "if" Nothing,DComment (DP (0,1),DP (0,6)) "bound" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,27)-(386,15) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 27) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,29)-(386,15) CN "HsDo" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(377,3)-(386,15) Ref "delta-10"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:3-7 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:3-31 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,-3),DP (0,1)) "then" Nothing),DP (0,-3)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(377,3)-(386,15) CN "(:)" Ref "delta-10",
  (Ann (DP (1,0)) (ColDelta 3) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:12-31 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 9) DP (0,1) [DComment (DP (0,-1),DP (0,1)) "do" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15) CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15) CN "HsIf" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnIf),DP (0,0)),((AnnComment DComment (DP (0,-4),DP (0,-4)) "" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,0),DP (0,2)) "mv" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,13)) "newEmptyMVar" Nothing),DP (0,1)),((G AnnThen),DP (1,2)),((AnnComment DComment (DP (1,-2),DP (1,-2)) "" Nothing),DP (1,-2)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,12)) "unsafeResult" Nothing),DP (0,0)),((G AnnElse),DP (1,2))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:378:6-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 3) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(379,10)-(385,29) CN "HsDo" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 7) DP (0,1) [DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,4)) "mask" Nothing] [((G AnnDo),DP (0,-1)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(380,7)-(385,29) Ref "delta-11"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:7-8 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:7-24 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "tid" Nothing),DP (0,0)),((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(380,7)-(385,29) CN "(:)" Ref "delta-11",
  (Ann (DP (1,0)) (ColDelta 4) DP (1,0) [DComment (DP (0,0),DP (0,1)) "$" Nothing,DComment (DP (0,1),DP (0,2)) "\\" Nothing,DComment (DP (0,0),DP (0,7)) "restore" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "do" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:13-24 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:7-10 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,7)-(385,29) CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [DComment (DP (0,-12),DP (0,-10)) "<-" Nothing,DComment (DP (0,1),DP (0,7)) "forkIO" Nothing,DComment (DP (0,1),DP (0,2)) "$" Nothing,DComment (DP (0,1),DP (0,14)) "Exception.try" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,7)) "restore" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,4)) ">>=" Nothing,DComment (DP (0,1),DP (0,8)) "putMVar" Nothing,DComment (DP (0,1),DP (0,3)) "mv" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,7)-(385,29) CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:12 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,1) [DComment (DP (0,-2),DP (0,-2)) "" Nothing,DComment (DP (0,0),DP (0,3)) "let" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29) CN "(:)" Ref "delta-12",
  (Ann (DP (0,-1)) (ColDelta 7) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29) CN "HsLam" NotNeeded,
  (Ann (DP (0,-3)) (ColDelta 7) DP (0,1) [DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,4)) "wait" Nothing] [((G AnnLam),DP (0,-3)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29) Ref "delta-12"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29) CN "Match" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((AnnComment DComment (DP (0,-4),DP (0,-3)) "=" Nothing),DP (0,-4)),((AnnComment DComment (DP (0,1),DP (0,9)) "takeMVar" Nothing),DP (0,1)),((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:15-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,26)-(385,29) CN "GRHS" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 12) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,26)-(385,29) CN "HsDo" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 12) DP (0,0) [] [((G AnnDo),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(382,9)-(385,29) Ref "delta-13"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:9-11 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:9-69 CN "BindStmt" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnLarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(382,9)-(385,29) CN "(:)" Ref "delta-13",
  (Ann (DP (1,0)) (ColDelta -5) DP (1,0) [DComment (DP (0,1),DP (0,3)) "mv" Nothing,DComment (DP (0,1),DP (0,2)) "`" Nothing,DComment (DP (0,0),DP (0,15)) "Exception.catch" Nothing,DComment (DP (0,0),DP (0,1)) "`" Nothing,DComment (DP (0,1),DP (0,2)) "\\" Nothing,DComment (DP (0,0),DP (0,1)) "(" Nothing,DComment (DP (0,0),DP (0,1)) "e" Nothing,DComment (DP (0,1),DP (0,3)) "::" Nothing,DComment (DP (0,1),DP (0,14)) "SomeException" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-21 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-54 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 7) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-69 CN "OpApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:23 CN "HsVar" NotNeeded,
  (Ann (DP (0,-16)) (ColDelta 14) DP (0,1) [DComment (DP (0,0),DP (0,17)) "Exception.throwTo" Nothing] [((G AnnVal),DP (0,-16))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:25-37 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:25-54 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:39-54 CN "HsPar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((AnnComment DComment (DP (0,-5),DP (0,-1)) "wait" Nothing),DP (0,-5)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:40-46 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 31) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:40-53 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 31) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:48-53 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 39) DP (0,1) [DComment (DP (0,-7),DP (0,-4)) "tid" Nothing,DComment (DP (0,1),DP (0,2)) "e" Nothing,DComment (DP (0,1),DP (0,3)) ">>" Nothing] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:56-58 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 47) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:60-66 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 51) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:60-69 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 51) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:68-69 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 59) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,9)-(384,52) CN "LetStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [((G AnnLet),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:13-16 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52) CN "FunBind" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52) CN "HsValBinds" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 4) DP (0,1) [DComment (DP (0,-3),DP (0,1)) "wait" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,1) [] [((AnnComment DComment (DP (0,-3),DP (0,0)) ">>=" Nothing),DP (0,-3)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,18)-(384,52) CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 5) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:20-27 CN "HsVar" NotNeeded,
  (Ann (DP (0,-10)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,-10))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:20-30 CN "HsApp" NotNeeded,
  (Ann (DP (0,-10)) (ColDelta 7) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,20)-(384,52) CN "OpApp" NotNeeded,
  (Ann (DP (0,-10)) (ColDelta 7) DP (0,1) [DComment (DP (0,-1),DP (0,11)) "unsafeResult" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:29-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:32-48 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnBackquote),DP (0,0)),((G AnnVal),DP (0,0)),((G AnnBackquote),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52) CN "(:)" Ref "delta-14",
  (Ann (DP (0,-1)) (ColDelta 37) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52) CN "HsLam" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnLam),DP (0,0)),((AnnList ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52) Ref "delta-14"),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52) CN "Match" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 0) DP (0,-1) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:51-70 CN "ParPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:52 CN "VarPat" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:52-69 CN "SigPatIn" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 2) DP (0,0) [] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:57-69 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-38 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-42 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-44 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-52 CN "GRHS" NotNeeded,
  (Ann (DP (0,6)) (ColDelta -28) DP (1,-28) [DComment (DP (1,-45),DP (1,-45)) "" Nothing,DComment (DP (0,0),DP (0,0)) "" Nothing,DComment (DP (0,0),DP (0,4)) "else" Nothing,DComment (DP (0,1),DP (0,7)) "action" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-52 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta -28) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:40-42 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -10) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:44 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -6) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:46-47 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -4) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:49-52 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta -1) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-12 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-29 CN "BodyStmt" NotNeeded,
  (Ann (DP (1,0)) (ColDelta 0) DP (1,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-29 CN "OpApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 0) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:14-16 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:18-29 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 9) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:386:10-15 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 7) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1-46 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (2,1) [DComment (DP (0,-2),DP (0,0)) "::" Nothing,DComment (DP (0,1),DP (0,7)) "Either" Nothing,DComment (DP (0,1),DP (0,14)) "SomeException" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "a" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,12)) "unsafeResult" Nothing,DComment (DP (0,1),DP (0,2)) "=" Nothing,DComment (DP (0,1),DP (0,7)) "either" Nothing,DComment (DP (0,1),DP (0,18)) "Exception.throwIO" Nothing,DComment (DP (0,1),DP (0,7)) "return" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-22 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-36 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-38 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-46 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-46 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 17) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:24-36 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 24) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:38 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 38) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:43-44 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 43) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:43-46 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:46 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 46) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-12 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46 CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (0,-12),DP (0,66)) "-- ---------------------------------------------------------------------------" Nothing),DP (0,-12)),((G AnnEqual),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46 CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:14-46 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 14) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:16-21 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:16-39 CN "HsApp" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 16) DP (0,0) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:16-46 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 16) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:23-39 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:41-46 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1-29 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (12,1) [DComment (DP (1,1),DP (1,34)) "-- threadWaitRead/threadWaitWrite" Nothing,DComment (DP (1,1),DP (1,79)) "-- ---------------------------------------------------------------------------" Nothing,DComment (DP (1,1),DP (1,34)) "-- threadWaitRead/threadWaitWrite" Nothing,DComment (DP (0,-33),DP (0,35)) "-- | Block the current thread until data is available to read on the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,66)) "-- | Block the current thread until data is available to read on the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (0,-36),DP (0,29)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (0,-2),DP (0,66)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,49)) "-- that has been used with 'threadWaitRead', use" Nothing,DComment (DP (0,-48),DP (0,17)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing,DComment (DP (0,-26),DP (0,42)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,14)) "threadWaitRead" Nothing,DComment (DP (0,-14),DP (0,34)) "-- that has been used with 'threadWaitRead', use" Nothing,DComment (DP (0,-33),DP (0,-31)) "::" Nothing,DComment (DP (0,1),DP (0,3)) "Fd" Nothing,DComment (DP (0,1),DP (0,3)) "->" Nothing,DComment (DP (0,1),DP (0,3)) "IO" Nothing,DComment (DP (0,1),DP (0,2)) "(" Nothing,DComment (DP (0,0),DP (0,1)) ")" Nothing,DComment (DP (1,1),DP (1,1)) "" Nothing,DComment (DP (0,0),DP (0,14)) "threadWaitRead" Nothing,DComment (DP (0,-14),DP (0,12)) "-- 'GHC.Conc.closeFdWith'." Nothing,DComment (DP (0,-11),DP (0,-9)) "fd" Nothing] [((AnnComment DComment (DP (0,-14),DP (0,7)) "#ifdef mingw32_HOST_OS" Nothing),DP (0,-14)),((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-20 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-29 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-29 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 19) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:25-26 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 25) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:25-29 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 25) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:28-29 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:1-14 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,3),DP (1,63)) "-- fdReady does the right thing, but we have to call it in a" Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,71)) "-- separate thread, otherwise threadWaitRead won't be interruptible," Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,41)) "-- and this only works with -threaded." Nothing),DP (1,3)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "case" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,1)) "0" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,14)) "hWaitForInput" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "stdin" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "-" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "1" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,27),DP (1,27)) "" Nothing),DP (1,27)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,25),DP (1,77)) "-- hWaitForInput does work properly, but we can only" Nothing),DP (1,25)),((AnnComment DComment (DP (1,25),DP (1,67)) "-- do this for stdin since we know its FD." Nothing),DP (1,25)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,79)) "\"threadWaitRead requires -threaded on Windows, or use System.IO.hWaitForInput\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (12,3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:16-17 CN "VarPat" NotNeeded,
  (Ann (DP (0,-51)) (ColDelta 16) DP (0,1) [DComment (DP (0,-12),DP (0,52)) "-- we have no IO manager implementing threadWaitRead on Windows." Nothing] [((G AnnVal),DP (0,-51))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:3-30 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:5-27 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:5-30 CN "HsApp" NotNeeded,
  (Ann (DP (0,2)) (ColDelta 5) DP (0,1) [DComment (DP (0,-1),DP (0,-1)) "" Nothing] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:29-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1-30 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (10,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,63)) "-- | Block the current thread until data can be written to the" Nothing,DComment (DP (1,1),DP (1,37)) "-- given file descriptor (GHC only)." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,66)) "-- This will throw an 'IOError' if the file descriptor was closed" Nothing,DComment (DP (1,1),DP (1,69)) "-- while this thread was blocked.  To safely close a file descriptor" Nothing,DComment (DP (1,1),DP (1,50)) "-- that has been used with 'threadWaitWrite', use" Nothing,DComment (DP (1,1),DP (1,27)) "-- 'GHC.Conc.closeFdWith'." Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-21 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-30 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-30 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 20) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:26-27 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 26) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:26-30 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 26) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:29-30 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:1-15 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,2),DP (0,3)) "=" Nothing),DP (0,2)),((AnnComment DComment (DP (0,1),DP (0,11)) "withThread" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,48)) "\"threadWaitWrite requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (5,3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:17-18 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 17) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:3-31 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:5-28 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:5-31 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:30-31 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 30) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1-17 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1-45 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,61)) "-- | Returns an STM action that can be used to wait for data" Nothing,DComment (DP (1,1),DP (1,61)) "-- to read from a file descriptor. The second returned value" Nothing,DComment (DP (1,1),DP (1,59)) "-- is an IO action that can be used to deregister interest" Nothing,DComment (DP (1,1),DP (1,27)) "-- in the file descriptor." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,20)) "-- /Since: 4.7.0.0/" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-23 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 22) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-45 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 22) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-45 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 22) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:28-29 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 28) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:28-45 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 28) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:31-45 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 31) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:32-34 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 32) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:32-37 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 32) DP (0,0) [] [((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:36-37 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 36) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:40-41 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 40) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:40-44 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 40) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:43-44 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 43) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:1-17 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "v" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "newTVarIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "Nothing" Nothing),DP (0,1)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,5)) "mask_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "void" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "0" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,46),DP (1,46)) "" Nothing),DP (1,46)),((AnnComment DComment (DP (0,0),DP (0,10)) "atomically" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,9)) "writeTVar" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "Just" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "readTVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (1,39),DP (1,39)) "" Nothing),DP (1,39)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,7)) "Nothing" Nothing),DP (0,0)),((AnnComment DComment (DP (0,9),DP (0,11)) "->" Nothing),DP (0,9)),((AnnComment DComment (DP (0,1),DP (0,6)) "retry" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,3),DP (0,5)) "->" Nothing),DP (0,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "throwSTM" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "killAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,11)) "killAction" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "|" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,50)) "\"threadWaitReadSTM requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (14,3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:19-20 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 19) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:3-33 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:5-30 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:5-33 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:32-33 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1-46 CN "SigD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (9,1) [DComment (DP (1,1),DP (1,6)) "#endif" Nothing,DComment (DP (2,1),DP (2,63)) "-- | Returns an STM action that can be used to wait until data" Nothing,DComment (DP (1,1),DP (1,66)) "-- can be written to a file descriptor. The second returned value" Nothing,DComment (DP (1,1),DP (1,59)) "-- is an IO action that can be used to deregister interest" Nothing,DComment (DP (1,1),DP (1,27)) "-- in the file descriptor." Nothing,DComment (DP (1,1),DP (1,3)) "--" Nothing,DComment (DP (1,1),DP (1,20)) "-- /Since: 4.7.0.0/" Nothing] [((G AnnDcolon),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-24 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-46 CN "HsForAllTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 23) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-46 CN "HsFunTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 23) DP (0,0) [] [((G AnnRarrow),DP (0,1))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:29-30 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 29) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:29-46 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 29) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:32-46 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 32) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:33-35 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 33) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:33-38 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 33) DP (0,0) [] [((G AnnComma),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:37-38 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 37) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:41-42 CN "HsTyVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 41) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:41-45 CN "HsAppTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 41) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:44-45 CN "HsTupleTy" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 44) DP (0,1) [] [((G AnnOpenP),DP (0,0)),((G AnnCloseP),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:1-18 CN "Unqual" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34) CN "Match" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 1) DP (0,0) [] [((AnnComment DComment (DP (1,1),DP (1,22)) "#ifdef mingw32_HOST_OS" Nothing),DP (1,1)),((AnnComment DComment (DP (1,3),DP (1,4)) "|" Nothing),DP (1,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "threaded" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "v" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,10)) "newTVarIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,8)) "Nothing" Nothing),DP (0,1)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,5)) "mask_" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "void" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "forkIO" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,4)) "try" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "waitFd" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "fd" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "1" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,46),DP (1,46)) "" Nothing),DP (1,46)),((AnnComment DComment (DP (0,0),DP (0,10)) "atomically" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,9)) "writeTVar" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "$" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,5)) "Just" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "do" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,6)) "result" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "<-" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,9)) "readTVar" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "v" Nothing),DP (0,1)),((AnnComment DComment (DP (1,39),DP (1,39)) "" Nothing),DP (1,39)),((AnnComment DComment (DP (0,0),DP (0,4)) "case" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,7)) "result" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,3)) "of" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,7)) "Nothing" Nothing),DP (0,0)),((AnnComment DComment (DP (0,9),DP (0,11)) "->" Nothing),DP (0,9)),((AnnComment DComment (DP (0,1),DP (0,6)) "retry" Nothing),DP (0,1)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,5)) "Right" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "->" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,41),DP (1,41)) "" Nothing),DP (1,41)),((AnnComment DComment (DP (0,0),DP (0,4)) "Just" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,4)) "Left" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "e" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (0,3),DP (0,5)) "->" Nothing),DP (0,3)),((AnnComment DComment (DP (0,1),DP (0,9)) "throwSTM" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) "e" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,3)) "::" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,12)) "IOException" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,3)) "let" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,1)) "" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "killAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,7)) "return" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,19),DP (1,19)) "" Nothing),DP (1,19)),((AnnComment DComment (DP (0,0),DP (0,0)) "" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,6)) "return" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,2)) "(" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,10)) "waitAction" Nothing),DP (0,0)),((AnnComment DComment (DP (0,0),DP (0,1)) "," Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,11)) "killAction" Nothing),DP (0,1)),((AnnComment DComment (DP (0,0),DP (0,1)) ")" Nothing),DP (0,0)),((AnnComment DComment (DP (1,3),DP (1,3)) "" Nothing),DP (1,3)),((AnnComment DComment (DP (0,0),DP (0,1)) "|" Nothing),DP (0,0)),((AnnComment DComment (DP (0,1),DP (0,10)) "otherwise" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,2)) "=" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,6)) "error" Nothing),DP (0,1)),((AnnComment DComment (DP (0,1),DP (0,51)) "\"threadWaitWriteSTM requires -threaded on Windows\"" Nothing),DP (0,1)),((AnnComment DComment (DP (1,1),DP (1,5)) "#else" Nothing),DP (1,1)),((G AnnEqual),DP (14,3))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34) CN "ValD" NotNeeded,
  (Ann (DP (1,1)) (ColDelta 1) DP (1,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:20-21 CN "VarPat" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 20) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:3-34 CN "GRHS" NotNeeded,
  (Ann (DP (0,-1)) (ColDelta 3) DP (0,-1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:5-31 CN "HsVar" NotNeeded,
  (Ann (DP (0,0)) (ColDelta 5) DP (0,0) [] [((G AnnVal),DP (0,0))])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:5-34 CN "HsApp" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 5) DP (0,1) [] [])),
 (AnnKey ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:33-34 CN "HsVar" NotNeeded,
  (Ann (DP (0,1)) (ColDelta 33) DP (0,1) [] [((G AnnVal),DP (0,0))])),
 (AnnKey <no location info> CN "EmptyLocalBinds" NotNeeded,
  (Ann (DP (-203,0)) (ColDelta -10) DP (-203,0) [] []))]
==============
([((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:1:1,
    AnnModule),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:28:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:1:1,
    AnnWhere),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:106:7-11]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(28,27)-(106,5),
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:106:5]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(28,27)-(106,5),
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:28:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:35:9-16,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:35:17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:36:9-18,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:36:19]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:38:9-14,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:38:15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:39:9-19,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:39:20]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:40:9-24,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:40:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:41:9-18,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:41:19]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:42:9-15,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:42:16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:45:9-14,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:45:15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:46:9-24,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:46:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:47:9-26,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:47:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:48:9-26,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:48:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:49:9-24,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:49:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:54:9-13,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:54:14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:61:9-19,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:61:20]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:62:9-22,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:62:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:63:9-23,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:63:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:64:9-25,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:64:26]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:65:9-26,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:65:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:9-38,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:39]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:9-38,
    AnnModule),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:69:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:9-38,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:39]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:9-38,
    AnnModule),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:70:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:9-38,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:39]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:9-38,
    AnnModule),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:71:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:9-39,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:40]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:9-39,
    AnnModule),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:72:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:76:9-31,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:76:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:77:9-14,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:77:15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:78:9-28,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:78:29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:79:9-24,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:79:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:80:9-26,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:80:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:83:9-22,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:83:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:108:1-14,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:108:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:108:1-14,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-42,
    AnnAs),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:31-32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-42,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-42,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:1-42,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:110:34-42]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:1-20,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:112:1-20,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,1)-(114,62),
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,1)-(114,62),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,17)-(114,62),
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:62]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,17)-(114,62),
    AnnHiding),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:17-22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(113,17)-(114,62),
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:25-38,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:39]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:41-55,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:113:56]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:25-41,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:114:42]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1-25,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1-25,
    AnnQualified),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:8-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:115:1-25,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:1-68,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:1-68,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:25-68,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:68]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:25-68,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-32,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-32,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-32,
    AnnDotdot),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:30-31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:27-32,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:35-52,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:116:53]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:1-59,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:1-59,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:25-59,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:59]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:25-59,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:27-34,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:35]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:37-45,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:117:46]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:1-15,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:118:1-15,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:1-32,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:1-32,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:27-32,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:27-32,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:120:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:1-24,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:121:1-24,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:1-22,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:122:1-22,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:1-20,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:123:1-20,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:1-30,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:131:1-30,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:1-30,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:132:1-30,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:1-30,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:133:1-30,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:1-31,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:134:1-31,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1-71,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:13-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:1-71,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:16-71,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:21-22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-56,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:56]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-56,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:24-71,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:58-59]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-46,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:48-49]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:25-55,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:48-49]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:54-55,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:55]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:54-55,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:200:54]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:201:1-11]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(201,1)-(203,46),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,3)-(203,46),
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:8]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46),
    AnnLam),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:10]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(202,10)-(203,46),
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:202:19-20]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-33,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:12]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:5-46,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:35-37]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:18-33,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:18-33,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:203:18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-52,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:46-47]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-52,
    AnnForeign),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-7]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-52,
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:260:1-52,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1-30,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:8-9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:1-30,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:11-30,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:17-18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:14-15,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:14-15,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:282:14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(284,1)-(285,33),
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:5-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(284,1)-(285,33),
    AnnExport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(284,1)-(285,33),
    AnnForeign),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:284:1-7]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(284,1)-(285,33),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:8-33,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:26-27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:18-24,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:18-24,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:22-23,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:22-23,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:32-33,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:32-33,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:285:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(287,1)-(288,33),
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:5-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(287,1)-(288,33),
    AnnForeign),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:1-7]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(287,1)-(288,33),
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:287:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(287,1)-(288,33),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:8-33,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:26-27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:18-24,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:18-24,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:22-23,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:22-23,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:32-33,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:32-33,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:288:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1-42,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:14-15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:1-42,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:17-42,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:35-36]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:27-33,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:27-33,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:31-32,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:31-32,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:41-42,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:42]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:41-42,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:290:41]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:1-12]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,1)-(293,14),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(291,29)-(293,14),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:291:29-30]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:9-45,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:16-17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:292:9-45,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:293:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(295,1)-(296,35),
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:5-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(295,1)-(296,35),
    AnnForeign),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:1-7]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(295,1)-(296,35),
    AnnImport),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:295:9-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(295,1)-(296,35),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:8-35,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:26-27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:18-24,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:18-24,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:22-23,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:22-23,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:296:22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1-23,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:17-18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:298:1-23,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:1-15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,1)-(300,59),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:19-67,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:299:24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(299,19)-(300,59),
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:300:24-25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(302,1)-(323,33),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:302:1-6]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(302,1)-(323,33),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,5)-(322,18),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,5)-(322,18),
    AnnVbar),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:5]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(303,33)-(322,18),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:303:33-34]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:9-26,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:12-13]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:304:9-26,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9-38,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:11-12]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:305:9-38,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:306:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(306,9)-(315,62),
    AnnLet),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:306:9-11]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(306,9)-(315,62),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:21]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:13-19]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,13)-(313,77),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,23)-(313,77),
    AnnCase),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:23-26]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(310,23)-(313,77),
    AnnOf),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:310:30-31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:25-56,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:34-56,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:311:34-35]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:25-54,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:45-54,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:312:45-46]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:47-77,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:313:47-48]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-62,
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-62,
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:315:13-23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9-72,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:15-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:9-72,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:31-72,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:72]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:31-72,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-56,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:43-45]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:32-71,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:317:58-59]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9-40,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:13-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:318:9-40,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-57,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:9-57,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:14-23,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:14-23,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:15-22,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:319:19-20]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9-26,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:13-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:320:9-26,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:321:9-27,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:322:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:5-33,
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:5-33,
    AnnVbar),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:323:5]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1-31,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:22-23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:328:1-31,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:1-20]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,1)-(331,57),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,24)-(331,57),
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57),
    AnnLam),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(329,29)-(331,57),
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:329:34-35]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(330,5)-(331,57),
    AnnCase),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:5-8]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(330,5)-(331,57),
    AnnOf),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:330:35-36]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-22,
    AnnClose),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:21-22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-22,
    AnnOpen),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:9-10]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:12-14,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:24-57,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:24-25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:27-57,
    AnnClose),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:56-57]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:27-57,
    AnnOpen),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:27-28]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:30-32,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:43-54,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:54]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:43-54,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:43]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:44-53,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:331:48-50]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1-32,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:18-19]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:1-32,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:21-32,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:343:26-27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(345,1)-(357,33),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:345:1-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(345,1)-(357,33),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,5)-(356,30),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,5)-(356,30),
    AnnVbar),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:5]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(346,33)-(356,30),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:346:33-34]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:9-37,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:15-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:347:9-37,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:348:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30),
    AnnElse),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:350:13-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30),
    AnnIf),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:348:9-10]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(348,9)-(356,30),
    AnnThen),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:349:13-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(350,18)-(356,30),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:350:18-19]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:17-41,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:21-22]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:351:17-41,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:17-73,
    AnnLet),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:17-19]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:17-73,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73,
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:33]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-73,
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:21-31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:35-73,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:352:56-58]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(353,17)-(356,30),
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:86-88]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:25-50,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:50]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:25-50,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:353:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:25-84,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:84]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:25-84,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:25]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83,
    AnnLam),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:26-83,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:34-35]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:37-83,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:355:68-69]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:5-33,
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:5-33,
    AnnVbar),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:357:5]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1-34,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:20-21]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:1-34,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:23-34,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:374:28-29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:1-18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,1)-(386,15),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(376,29)-(386,15),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:376:29-30]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:3-31,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:9-10]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:377:3-31,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:378:3]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15),
    AnnElse),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:386:5-8]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15),
    AnnIf),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:378:3-4]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(378,3)-(386,15),
    AnnThen),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:379:5-8]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(379,10)-(385,29),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:379:10-11]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:7-24,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:10-11]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:380:7-24,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:7]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,7)-(385,29),
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:12]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29),
    AnnLam),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,14)-(385,29),
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:23-24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(381,26)-(385,29),
    AnnDo),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:381:26-27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:9-69,
    AnnLarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:13-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:9-69,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-54,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:16-69,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:56-58]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:39-54,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:54]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:39-54,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:382:39]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,9)-(384,52),
    AnnLet),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:9-11]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,9)-(384,52),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,13)-(384,52),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:13-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,20)-(384,52),
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:32-48]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:32-48,
    AnnBackquote),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:32,
    ../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:48]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:32-48,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:33-47]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52),
    AnnLam),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:50]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(383,50)-(384,52),
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:72-73]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:51-70,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:70]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:51-70,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:51]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:52-69,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:383:54-55]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:22-52,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:384:46-47]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:9-29,
    AnnVal),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:385:14-16]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1-46,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:14-15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:1-46,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:17-46,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:388:40-41]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46,
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46,
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-12]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:389:1-46,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1-29,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:16-17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:1-29,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:19-29,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:22-23]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:28-29,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:28-29,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:401:28]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:414:3]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:402:1-14]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(402,1)-(414,30),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1-30,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:17-18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:1-30,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:20-30,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:23-24]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:29-30,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:30]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:29-30,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:424:29]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:430:3]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:425:1-15]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(425,1)-(430,31),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1-45,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:19-20]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:1-45,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:22-45,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:25-26]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:31-45,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:45]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:31-45,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:31]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:32-37,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:38]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:36-37,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:37]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:36-37,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:36]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:43-44,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:44]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:43-44,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:439:43]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:454:3]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:440:1-17]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(440,1)-(454,33),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1-46,
    AnnDcolon),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:20-21]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:1-46,
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:1]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:23-46,
    AnnRarrow),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:26-27]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:32-46,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:46]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:32-46,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:32]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:33-38,
    AnnComma),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:39]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:37-38,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:38]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:37-38,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:37]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:44-45,
    AnnCloseP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:45]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:44-45,
    AnnOpenP),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:463:44]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34),
    AnnEqual),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:478:3]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34),
    AnnFunId),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:464:1-18]),
  ((../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(464,1)-(478,34),
    AnnSemi),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:668:1]),
  ((<no location info>, AnnEofPos),
   [../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:668:1])],
 [(../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(28,27)-(106,5),
   [AnnLineComment "-- $deadlock", AnnLineComment "-- ** Deadlock",
    AnnLineComment "-- $preemption",
    AnnLineComment "-- ** Pre-emption",
    AnnLineComment "-- $termination",
    AnnLineComment "-- ** Terminating the program",
    AnnLineComment "-- $osthreads",
    AnnLineComment "-- ** Haskell threads and Operating System threads",
    AnnLineComment "-- implementation of Concurrent Haskell.",
    AnnLineComment "-- |This section describes features specific to GHC's",
    AnnLineComment "-- * GHC's implementation of concurrency",
    AnnLineComment "-- * Weak references to ThreadIds",
    AnnLineComment "-- $boundthreads",
    AnnLineComment "-- * Bound Threads",
    AnnLineComment "-- * Communication abstractions",
    AnnLineComment "-- ** Waiting", AnnLineComment "-- $blocking",
    AnnLineComment "-- ** Blocking",
    AnnLineComment "-- $conc_scheduling",
    AnnLineComment "-- * Scheduling",
    AnnLineComment "-- ** Threads with affinity",
    AnnLineComment "-- * Basic concurrency operations",
    AnnLineComment "-- $conc_intro",
    AnnLineComment "-- * Concurrent Haskell"]),
  (../../hackage-packages/base-4.7.0.2/Control/Concurrent.hs:(306,9)-(315,62),
   [AnnLineComment "-- creates a thread with exceptions masked by default.",
    AnnLineComment "-- in the parent, as for forkIO (see #1048). forkOS_createThread",
    AnnLineComment "-- async exceptions are masked in the child if they are masked"]),
  (<no location info>,
   [AnnBlockComment "{- $deadlock\n\nGHC attempts to detect when threads are deadlocked using the garbage\ncollector.  A thread that is not reachable (cannot be found by\nfollowing pointers from live objects) must be deadlocked, and in this\ncase the thread is sent an exception.  The exception is either\n'BlockedIndefinitelyOnMVar', 'BlockedIndefinitelyOnSTM',\n'NonTermination', or 'Deadlock', depending on the way in which the\nthread is deadlocked.\n\nNote that this feature is intended for debugging, and should not be\nrelied on for the correct operation of your program.  There is no\nguarantee that the garbage collector will be accurate enough to detect\nyour deadlock, and no guarantee that the garbage collector will run in\na timely enough manner.  Basically, the same caveats as for finalizers\napply to deadlock detection.\n\nThere is a subtle interaction between deadlock detection and\nfinalizers (as created by 'Foreign.Concurrent.newForeignPtr' or the\nfunctions in \"System.Mem.Weak\"): if a thread is blocked waiting for a\nfinalizer to run, then the thread will be considered deadlocked and\nsent an exception.  So preferably don't do this, but if you have no\nalternative then it is possible to prevent the thread from being\nconsidered deadlocked by making a 'StablePtr' pointing to it.  Don't\nforget to release the 'StablePtr' later with 'freeStablePtr'.\n-}",
    AnnBlockComment "{- $preemption\n\n      GHC implements pre-emptive multitasking: the execution of\n      threads are interleaved in a random fashion.  More specifically,\n      a thread may be pre-empted whenever it allocates some memory,\n      which unfortunately means that tight loops which do no\n      allocation tend to lock out other threads (this only seems to\n      happen with pathological benchmark-style code, however).\n\n      The rescheduling timer runs on a 20ms granularity by\n      default, but this may be altered using the\n      @-i\\<n\\>@ RTS option.  After a rescheduling\n      \\\"tick\\\" the running thread is pre-empted as soon as\n      possible.\n\n      One final note: the\n      @aaaa@ @bbbb@ example may not\n      work too well on GHC (see Scheduling, above), due\n      to the locking on a 'System.IO.Handle'.  Only one thread\n      may hold the lock on a 'System.IO.Handle' at any one\n      time, so if a reschedule happens while a thread is holding the\n      lock, the other thread won't be able to run.  The upshot is that\n      the switch from @aaaa@ to\n      @bbbbb@ happens infrequently.  It can be\n      improved by lowering the reschedule tick period.  We also have a\n      patch that causes a reschedule whenever a thread waiting on a\n      lock is woken up, but haven't found it to be useful for anything\n      other than this example :-)\n-}",
    AnnBlockComment "{- $termination\n\n      In a standalone GHC program, only the main thread is\n      required to terminate in order for the process to terminate.\n      Thus all other forked threads will simply terminate at the same\n      time as the main thread (the terminology for this kind of\n      behaviour is \\\"daemonic threads\\\").\n\n      If you want the program to wait for child threads to\n      finish before exiting, you need to program this yourself.  A\n      simple mechanism is to have each child thread write to an\n      'MVar' when it completes, and have the main\n      thread wait on all the 'MVar's before\n      exiting:\n\n>   myForkIO :: IO () -> IO (MVar ())\n>   myForkIO io = do\n>     mvar <- newEmptyMVar\n>     forkFinally io (\\_ -> putMVar mvar ())\n>     return mvar\n\n      Note that we use 'forkFinally' to make sure that the\n      'MVar' is written to even if the thread dies or\n      is killed for some reason.\n\n      A better method is to keep a global list of all child\n      threads which we should wait for at the end of the program:\n\n>    children :: MVar [MVar ()]\n>    children = unsafePerformIO (newMVar [])\n>\n>    waitForChildren :: IO ()\n>    waitForChildren = do\n>      cs <- takeMVar children\n>      case cs of\n>        []   -> return ()\n>        m:ms -> do\n>           putMVar children ms\n>           takeMVar m\n>           waitForChildren\n>\n>    forkChild :: IO () -> IO ThreadId\n>    forkChild io = do\n>        mvar <- newEmptyMVar\n>        childs <- takeMVar children\n>        putMVar children (mvar:childs)\n>        forkFinally io (\\_ -> putMVar mvar ())\n>\n>     main =\n>       later waitForChildren $\n>       ...\n\n      The main thread principle also applies to calls to Haskell from\n      outside, using @foreign export@.  When the @foreign export@ed\n      function is invoked, it starts a new main thread, and it returns\n      when this main thread terminates.  If the call causes new\n      threads to be forked, they may remain in the system after the\n      @foreign export@ed function has returned.\n-}",
    AnnBlockComment "{- $osthreads\n\n      #osthreads# In GHC, threads created by 'forkIO' are lightweight threads, and\n\n      are managed entirely by the GHC runtime.  Typically Haskell\n      threads are an order of magnitude or two more efficient (in\n      terms of both time and space) than operating system threads.\n\n      The downside of having lightweight threads is that only one can\n      run at a time, so if one thread blocks in a foreign call, for\n      example, the other threads cannot continue.  The GHC runtime\n      works around this by making use of full OS threads where\n      necessary.  When the program is built with the @-threaded@\n      option (to link against the multithreaded version of the\n      runtime), a thread making a @safe@ foreign call will not block\n      the other threads in the system; another OS thread will take\n      over running Haskell threads until the original call returns.\n      The runtime maintains a pool of these /worker/ threads so that\n      multiple Haskell threads can be involved in external calls\n      simultaneously.\n\n      The \"System.IO\" library manages multiplexing in its own way.  On\n      Windows systems it uses @safe@ foreign calls to ensure that\n      threads doing I\\/O operations don't block the whole runtime,\n      whereas on Unix systems all the currently blocked I\\/O requests\n      are managed by a single thread (the /IO manager thread/) using\n      a mechanism such as @epoll@ or @kqueue@, depending on what is\n      provided by the host operating system.\n\n      The runtime will run a Haskell thread using any of the available\n      worker OS threads.  If you need control over which particular OS\n      thread is used to run a given Haskell thread, perhaps because\n      you need to call a foreign library that uses OS-thread-local\n      state, then you need bound threads (see \"Control.Concurrent#boundthreads\").\n\n      If you don't use the @-threaded@ option, then the runtime does\n      not make use of multiple OS threads.  Foreign calls will block\n      all other running Haskell threads until the call returns.  The\n      \"System.IO\" library still does multiplexing, so there can be multiple\n      threads doing I\\/O, and this is handled internally by the runtime using\n      @select@.\n-}",
    AnnLineComment "-- More docs",
    AnnLineComment "-- ---------------------------------------------------------------------------",
    AnnLineComment "-- /Since: 4.7.0.0/", AnnLineComment "--",
    AnnLineComment "-- in the file descriptor.",
    AnnLineComment "-- is an IO action that can be used to deregister interest",
    AnnLineComment "-- can be written to a file descriptor. The second returned value",
    AnnLineComment "-- | Returns an STM action that can be used to wait until data",
    AnnLineComment "-- /Since: 4.7.0.0/", AnnLineComment "--",
    AnnLineComment "-- in the file descriptor.",
    AnnLineComment "-- is an IO action that can be used to deregister interest",
    AnnLineComment "-- to read from a file descriptor. The second returned value",
    AnnLineComment "-- | Returns an STM action that can be used to wait for data",
    AnnLineComment "-- 'GHC.Conc.closeFdWith'.",
    AnnLineComment "-- that has been used with 'threadWaitWrite', use",
    AnnLineComment "-- while this thread was blocked.  To safely close a file descriptor",
    AnnLineComment "-- This will throw an 'IOError' if the file descriptor was closed",
    AnnLineComment "--",
    AnnLineComment "-- given file descriptor (GHC only).",
    AnnLineComment "-- | Block the current thread until data can be written to the",
    AnnLineComment "-- 'GHC.Conc.closeFdWith'.",
    AnnLineComment "-- that has been used with 'threadWaitRead', use",
    AnnLineComment "-- while this thread was blocked.  To safely close a file descriptor",
    AnnLineComment "-- This will throw an 'IOError' if the file descriptor was closed",
    AnnLineComment "--",
    AnnLineComment "-- given file descriptor (GHC only).",
    AnnLineComment "-- | Block the current thread until data is available to read on the",
    AnnLineComment "-- threadWaitRead/threadWaitWrite",
    AnnLineComment "-- ---------------------------------------------------------------------------",
    AnnBlockComment "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis /bound/, an unbound thread is created temporarily using 'forkIO'.\n@runInBoundThread@ doesn't finish until the 'IO' computation finishes.\n\nUse this function /only/ in the rare case that you have actually observed a\nperformance loss due to the use of bound threads. A program that\ndoesn't need it's main thread to be bound and makes /heavy/ use of concurrency\n(e.g. a web server), might want to wrap it's @main@ action in\n@runInUnboundThread@.\n\nNote that exceptions which are thrown to the current thread are thrown in turn\nto the thread that is executing the given computation. This ensures there's\nalways a way of killing the forked thread.\n-}",
    AnnBlockComment "{- |\nRun the 'IO' computation passed as the first argument. If the calling thread\nis not /bound/, a bound thread is created temporarily. @runInBoundThread@\ndoesn't finish until the 'IO' computation finishes.\n\nYou can wrap a series of foreign function calls that rely on thread-local state\nwith @runInBoundThread@ so that you can use them without knowing whether the\ncurrent thread is /bound/.\n-}",
    AnnLineComment "-- calling thread.",
    AnnLineComment "-- safe to use foreign libraries that rely on thread-local state from the",
    AnnLineComment "-- | Returns 'True' if the calling thread is /bound/, that is, if it is",
    AnnBlockComment "{- |\nLike 'forkIO', this sparks off a new thread to run the 'IO'\ncomputation passed as the first argument, and returns the 'ThreadId'\nof the newly created thread.\n\nHowever, 'forkOS' creates a /bound/ thread, which is necessary if you\nneed to call foreign (non-Haskell) libraries that make use of\nthread-local state, such as OpenGL (see \"Control.Concurrent#boundthreads\").\n\nUsing 'forkOS' instead of 'forkIO' makes no difference at all to the\nscheduling behaviour of the Haskell runtime system.  It is a common\nmisconception that you need to use 'forkOS' instead of 'forkIO' to\navoid blocking all the Haskell threads when making a foreign call;\nthis isn't the case.  To allow foreign calls to be made without\nblocking all the Haskell threads (with GHC), it is only necessary to\nuse the @-threaded@ option when linking your program, and to make sure\nthe foreign import is not marked @unsafe@.\n-}",
    AnnLineComment "-- fail.",
    AnnLineComment "-- will always return 'False' and both 'forkOS' and 'runInBoundThread' will",
    AnnLineComment "-- If @rtsSupportsBoundThreads@ is 'False', 'isCurrentThreadBound'",
    AnnLineComment "-- | 'True' if bound threads are supported.",
    AnnBlockComment "{- $boundthreads\n   #boundthreads#\n\n\nSupport for multiple operating system threads and bound threads as described\nbelow is currently only available in the GHC runtime system if you use the\n/-threaded/ option when linking.\n\nOther Haskell systems do not currently support multiple operating system threads.\n\nA bound thread is a haskell thread that is /bound/ to an operating system\nthread. While the bound thread is still scheduled by the Haskell run-time\nsystem, the operating system thread takes care of all the foreign calls made\nby the bound thread.\n\nTo a foreign library, the bound thread will look exactly like an ordinary\noperating system thread created using OS functions like @pthread_create@\nor @CreateThread@.\n\nBound threads can be created using the 'forkOS' function below. All foreign\nexported functions are run in a bound thread (bound to the OS thread that\ncalled the function). Also, the @main@ action of every Haskell program is\nrun in a bound thread.\n\nWhy do we need this? Because if a foreign library is called from a thread\ncreated using 'forkIO', it won't have access to any /thread-local state/ -\nstate variables that have specific values for each OS thread\n(see POSIX's @pthread_key_create@ or Win32's @TlsAlloc@). Therefore, some\nlibraries (OpenGL, for example) will not work from a thread created using\n'forkIO'. They work fine in threads created using 'forkOS' or when called\nfrom @main@ or from a @foreign export@.\n\nIn terms of performance, 'forkOS' (aka bound) threads are much more\nexpensive than 'forkIO' (aka unbound) threads, because a 'forkOS'\nthread is tied to a particular OS thread, whereas a 'forkIO' thread\ncan be run by any OS thread.  Context-switching between a 'forkOS'\nthread and a 'forkIO' thread is many times more expensive than between\ntwo 'forkIO' threads.\n\nNote in particular that the main program thread (the thread running\n@Main.main@) is always a bound thread, so for good concurrency\nperformance you should ensure that the main thread is not doing\nrepeated communication with other threads in the system.  Typically\nthis means forking subthreads to do the work using 'forkIO', and\nwaiting for the results in the main thread.\n\n-}",
    AnnLineComment "-- Bound Threads",
    AnnLineComment "-- ---------------------------------------------------------------------------",
    AnnLineComment "-- /Since: 4.6.0.0/", AnnLineComment "--",
    AnnLineComment "-- terminates, for example.",
    AnnLineComment "-- This function is useful for informing the parent when a child",
    AnnLineComment "--",
    AnnLineComment "-- >     forkIO $ try (restore action) >>= and_then",
    AnnLineComment "-- >   mask $ \\restore ->",
    AnnLineComment "-- > forkFinally action and_then =",
    AnnLineComment "--",
    AnnLineComment "-- called with asynchronous exceptions masked.",
    AnnLineComment "-- to terminate, with an exception or a returned value.  The function is",
    AnnLineComment "-- | fork a thread and call the supplied function when the thread is about",
    AnnBlockComment "{- $blocking\nDifferent Haskell implementations have different characteristics with\nregard to which operations block /all/ threads.\n\nUsing GHC without the @-threaded@ option, all foreign calls will block\nall other Haskell threads in the system, although I\\/O operations will\nnot.  With the @-threaded@ option, only foreign calls with the @unsafe@\nattribute will block all other threads.\n\n-}",
    AnnBlockComment "{- $conc_scheduling\n\n    Scheduling may be either pre-emptive or co-operative,\n    depending on the implementation of Concurrent Haskell (see below\n    for information related to specific compilers).  In a co-operative\n    system, context switches only occur when you use one of the\n    primitives defined in this module.  This means that programs such\n    as:\n\n\n>   main = forkIO (write 'a') >> write 'b'\n>     where write c = putChar c >> write c\n\n    will print either @aaaaaaaaaaaaaa...@ or @bbbbbbbbbbbb...@,\n    instead of some random interleaving of @a@s and @b@s.  In\n    practice, cooperative multitasking is sufficient for writing\n    simple graphical user interfaces.\n-}",
    AnnBlockComment "{- $conc_intro\n\nThe concurrency extension for Haskell is described in the paper\n/Concurrent Haskell/\n<http://www.haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz>.\n\nConcurrency is \\\"lightweight\\\", which means that both thread creation\nand context switching overheads are extremely low.  Scheduling of\nHaskell threads is done internally in the Haskell runtime system, and\ndoesn't make use of any operating system-supplied thread packages.\n\nHowever, if you want to interact with a foreign library that expects your\nprogram to use the operating system-supplied thread package, you can do so\nby using 'forkOS' instead of 'forkIO'.\n\nHaskell threads can communicate via 'MVar's, a kind of synchronised\nmutable variable (see \"Control.Concurrent.MVar\").  Several common\nconcurrency abstractions can be built from 'MVar's, and these are\nprovided by the \"Control.Concurrent\" library.\nIn GHC, threads may also communicate via exceptions.\n-}",
    AnnLineComment "-----------------------------------------------------------------------------",
    AnnLineComment "--", AnnLineComment "-- abstractions.",
    AnnLineComment "-- A common interface to a collection of useful concurrency",
    AnnLineComment "--",
    AnnLineComment "-- Portability :  non-portable (concurrency)",
    AnnLineComment "-- Stability   :  experimental",
    AnnLineComment "-- Maintainer  :  libraries@haskell.org",
    AnnLineComment "--",
    AnnLineComment "-- License     :  BSD-style (see the file libraries/base/LICENSE)",
    AnnLineComment "-- Copyright   :  (c) The University of Glasgow 2001",
    AnnLineComment "-- Module      :  Control.Concurrent",
    AnnLineComment "-- |",
    AnnLineComment "-----------------------------------------------------------------------------",
    AnnLineComment "-- and Control.Concurrent.SampleVar imports.",
    AnnLineComment "-- kludge for the Control.Concurrent.QSem, Control.Concurrent.QSemN",
    AnnBlockComment "{-# OPTIONS_GHC -fno-warn-deprecations #-}",
    AnnBlockComment "{-# OPTIONS_GHC -fno-warn-unused-imports #-}",
    AnnBlockComment "{-# LANGUAGE CPP\n           , MagicHash\n           , UnboxedTuples\n           , ScopedTypeVariables\n  #-}",
    AnnBlockComment "{-# LANGUAGE Trustworthy #-}"])])